/*
* generated by Xtext
*/
package org.artop.ecuc.autosar4x.dsl.values.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class EcucValuesDslGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Model");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Keyword cPackageKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cPackageNameAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cPackageNameIDTerminalRuleCall_0_1_0 = (RuleCall)cPackageNameAssignment_0_1.eContents().get(0);
		private final Assignment cModulesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cModulesModuleParserRuleCall_1_0 = (RuleCall)cModulesAssignment_1.eContents().get(0);
		
		//Model:
		//	("package" packageName=ID)? modules+=Module*;
		public ParserRule getRule() { return rule; }

		//("package" packageName=ID)? modules+=Module*
		public Group getGroup() { return cGroup; }

		//("package" packageName=ID)?
		public Group getGroup_0() { return cGroup_0; }

		//"package"
		public Keyword getPackageKeyword_0_0() { return cPackageKeyword_0_0; }

		//packageName=ID
		public Assignment getPackageNameAssignment_0_1() { return cPackageNameAssignment_0_1; }

		//ID
		public RuleCall getPackageNameIDTerminalRuleCall_0_1_0() { return cPackageNameIDTerminalRuleCall_0_1_0; }

		//modules+=Module*
		public Assignment getModulesAssignment_1() { return cModulesAssignment_1; }

		//Module
		public RuleCall getModulesModuleParserRuleCall_1_0() { return cModulesModuleParserRuleCall_1_0; }
	}

	public class ModuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Module");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cModuleAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cModuleKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cDefinitionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cDefinitionEcucModuleDefCrossReference_2_0 = (CrossReference)cDefinitionAssignment_2.eContents().get(0);
		private final RuleCall cDefinitionEcucModuleDefIDTerminalRuleCall_2_0_1 = (RuleCall)cDefinitionEcucModuleDefCrossReference_2_0.eContents().get(1);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cColonKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cShortNameAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cShortNameIDTerminalRuleCall_3_1_0 = (RuleCall)cShortNameAssignment_3_1.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cLeftParenthesisKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Group cGroup_4_1 = (Group)cGroup_4.eContents().get(1);
		private final Keyword cTagsKeyword_4_1_0 = (Keyword)cGroup_4_1.eContents().get(0);
		private final Assignment cTagsAssignment_4_1_1 = (Assignment)cGroup_4_1.eContents().get(1);
		private final RuleCall cTagsTagParserRuleCall_4_1_1_0 = (RuleCall)cTagsAssignment_4_1_1.eContents().get(0);
		private final Group cGroup_4_1_2 = (Group)cGroup_4_1.eContents().get(2);
		private final Keyword cCommaKeyword_4_1_2_0 = (Keyword)cGroup_4_1_2.eContents().get(0);
		private final Assignment cTagsAssignment_4_1_2_1 = (Assignment)cGroup_4_1_2.eContents().get(1);
		private final RuleCall cTagsTagParserRuleCall_4_1_2_1_0 = (RuleCall)cTagsAssignment_4_1_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4_2 = (Keyword)cGroup_4.eContents().get(2);
		private final Keyword cEqualsSignKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cLeftCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cContainerAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cContainerContainerParserRuleCall_7_0 = (RuleCall)cContainerAssignment_7.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		//Module:
		//	{Module} "module" definition=[ecucpd::EcucModuleDef] (":" shortName=ID)? ("(" ("tags" tags+=Tag ("," tags+=Tag)*)?
		//	")")? "=" "{" container+=Container* "}";
		public ParserRule getRule() { return rule; }

		//{Module} "module" definition=[ecucpd::EcucModuleDef] (":" shortName=ID)? ("(" ("tags" tags+=Tag ("," tags+=Tag)*)? ")")?
		//"=" "{" container+=Container* "}"
		public Group getGroup() { return cGroup; }

		//{Module}
		public Action getModuleAction_0() { return cModuleAction_0; }

		//"module"
		public Keyword getModuleKeyword_1() { return cModuleKeyword_1; }

		//definition=[ecucpd::EcucModuleDef]
		public Assignment getDefinitionAssignment_2() { return cDefinitionAssignment_2; }

		//[ecucpd::EcucModuleDef]
		public CrossReference getDefinitionEcucModuleDefCrossReference_2_0() { return cDefinitionEcucModuleDefCrossReference_2_0; }

		//ID
		public RuleCall getDefinitionEcucModuleDefIDTerminalRuleCall_2_0_1() { return cDefinitionEcucModuleDefIDTerminalRuleCall_2_0_1; }

		//(":" shortName=ID)?
		public Group getGroup_3() { return cGroup_3; }

		//":"
		public Keyword getColonKeyword_3_0() { return cColonKeyword_3_0; }

		//shortName=ID
		public Assignment getShortNameAssignment_3_1() { return cShortNameAssignment_3_1; }

		//ID
		public RuleCall getShortNameIDTerminalRuleCall_3_1_0() { return cShortNameIDTerminalRuleCall_3_1_0; }

		//("(" ("tags" tags+=Tag ("," tags+=Tag)*)? ")")?
		public Group getGroup_4() { return cGroup_4; }

		//"("
		public Keyword getLeftParenthesisKeyword_4_0() { return cLeftParenthesisKeyword_4_0; }

		//("tags" tags+=Tag ("," tags+=Tag)*)?
		public Group getGroup_4_1() { return cGroup_4_1; }

		//"tags"
		public Keyword getTagsKeyword_4_1_0() { return cTagsKeyword_4_1_0; }

		//tags+=Tag
		public Assignment getTagsAssignment_4_1_1() { return cTagsAssignment_4_1_1; }

		//Tag
		public RuleCall getTagsTagParserRuleCall_4_1_1_0() { return cTagsTagParserRuleCall_4_1_1_0; }

		//("," tags+=Tag)*
		public Group getGroup_4_1_2() { return cGroup_4_1_2; }

		//","
		public Keyword getCommaKeyword_4_1_2_0() { return cCommaKeyword_4_1_2_0; }

		//tags+=Tag
		public Assignment getTagsAssignment_4_1_2_1() { return cTagsAssignment_4_1_2_1; }

		//Tag
		public RuleCall getTagsTagParserRuleCall_4_1_2_1_0() { return cTagsTagParserRuleCall_4_1_2_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_4_2() { return cRightParenthesisKeyword_4_2; }

		//"="
		public Keyword getEqualsSignKeyword_5() { return cEqualsSignKeyword_5; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_6() { return cLeftCurlyBracketKeyword_6; }

		//container+=Container*
		public Assignment getContainerAssignment_7() { return cContainerAssignment_7; }

		//Container
		public RuleCall getContainerContainerParserRuleCall_7_0() { return cContainerContainerParserRuleCall_7_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_8() { return cRightCurlyBracketKeyword_8; }
	}

	public class ContainedElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ContainedElement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cContainerParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cParameterParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cReferenceParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cInstanceReferenceParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//ContainedElement:
		//	Container | Parameter | Reference | InstanceReference;
		public ParserRule getRule() { return rule; }

		//Container | Parameter | Reference | InstanceReference
		public Alternatives getAlternatives() { return cAlternatives; }

		//Container
		public RuleCall getContainerParserRuleCall_0() { return cContainerParserRuleCall_0; }

		//Parameter
		public RuleCall getParameterParserRuleCall_1() { return cParameterParserRuleCall_1; }

		//Reference
		public RuleCall getReferenceParserRuleCall_2() { return cReferenceParserRuleCall_2; }

		//InstanceReference
		public RuleCall getInstanceReferenceParserRuleCall_3() { return cInstanceReferenceParserRuleCall_3; }
	}

	public class ContainerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Container");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cContainerAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cContainerKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cDefinitionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cDefinitionEcucContainerDefCrossReference_2_0 = (CrossReference)cDefinitionAssignment_2.eContents().get(0);
		private final RuleCall cDefinitionEcucContainerDefIDTerminalRuleCall_2_0_1 = (RuleCall)cDefinitionEcucContainerDefCrossReference_2_0.eContents().get(1);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cColonKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cShortNameAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cShortNameIDTerminalRuleCall_3_1_0 = (RuleCall)cShortNameAssignment_3_1.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cLeftParenthesisKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final UnorderedGroup cUnorderedGroup_4_1 = (UnorderedGroup)cGroup_4.eContents().get(1);
		private final Group cGroup_4_1_0 = (Group)cUnorderedGroup_4_1.eContents().get(0);
		private final Keyword cIndexKeyword_4_1_0_0 = (Keyword)cGroup_4_1_0.eContents().get(0);
		private final Assignment cIndexAssignment_4_1_0_1 = (Assignment)cGroup_4_1_0.eContents().get(1);
		private final RuleCall cIndexINTTerminalRuleCall_4_1_0_1_0 = (RuleCall)cIndexAssignment_4_1_0_1.eContents().get(0);
		private final Group cGroup_4_1_1 = (Group)cUnorderedGroup_4_1.eContents().get(1);
		private final Keyword cTagsKeyword_4_1_1_0 = (Keyword)cGroup_4_1_1.eContents().get(0);
		private final Assignment cTagsAssignment_4_1_1_1 = (Assignment)cGroup_4_1_1.eContents().get(1);
		private final RuleCall cTagsTagParserRuleCall_4_1_1_1_0 = (RuleCall)cTagsAssignment_4_1_1_1.eContents().get(0);
		private final Group cGroup_4_1_1_2 = (Group)cGroup_4_1_1.eContents().get(2);
		private final Keyword cCommaKeyword_4_1_1_2_0 = (Keyword)cGroup_4_1_1_2.eContents().get(0);
		private final Assignment cTagsAssignment_4_1_1_2_1 = (Assignment)cGroup_4_1_1_2.eContents().get(1);
		private final RuleCall cTagsTagParserRuleCall_4_1_1_2_1_0 = (RuleCall)cTagsAssignment_4_1_1_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4_2 = (Keyword)cGroup_4.eContents().get(2);
		private final Keyword cEqualsSignKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cLeftCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cElementsAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cElementsContainedElementParserRuleCall_7_0 = (RuleCall)cElementsAssignment_7.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		//Container:
		//	{Container} "container" definition=[ecucpd::EcucContainerDef] (":" shortName=ID)? ("(" (("index" index=INT)? &
		//	("tags" tags+=Tag ("," tags+=Tag)*)?) ")")? "=" "{" elements+=ContainedElement* "}";
		public ParserRule getRule() { return rule; }

		//{Container} "container" definition=[ecucpd::EcucContainerDef] (":" shortName=ID)? ("(" (("index" index=INT)? & ("tags"
		//tags+=Tag ("," tags+=Tag)*)?) ")")? "=" "{" elements+=ContainedElement* "}"
		public Group getGroup() { return cGroup; }

		//{Container}
		public Action getContainerAction_0() { return cContainerAction_0; }

		//"container"
		public Keyword getContainerKeyword_1() { return cContainerKeyword_1; }

		//definition=[ecucpd::EcucContainerDef]
		public Assignment getDefinitionAssignment_2() { return cDefinitionAssignment_2; }

		//[ecucpd::EcucContainerDef]
		public CrossReference getDefinitionEcucContainerDefCrossReference_2_0() { return cDefinitionEcucContainerDefCrossReference_2_0; }

		//ID
		public RuleCall getDefinitionEcucContainerDefIDTerminalRuleCall_2_0_1() { return cDefinitionEcucContainerDefIDTerminalRuleCall_2_0_1; }

		//(":" shortName=ID)?
		public Group getGroup_3() { return cGroup_3; }

		//":"
		public Keyword getColonKeyword_3_0() { return cColonKeyword_3_0; }

		//shortName=ID
		public Assignment getShortNameAssignment_3_1() { return cShortNameAssignment_3_1; }

		//ID
		public RuleCall getShortNameIDTerminalRuleCall_3_1_0() { return cShortNameIDTerminalRuleCall_3_1_0; }

		//("(" (("index" index=INT)? & ("tags" tags+=Tag ("," tags+=Tag)*)?) ")")?
		public Group getGroup_4() { return cGroup_4; }

		//"("
		public Keyword getLeftParenthesisKeyword_4_0() { return cLeftParenthesisKeyword_4_0; }

		//("index" index=INT)? & ("tags" tags+=Tag ("," tags+=Tag)*)?
		public UnorderedGroup getUnorderedGroup_4_1() { return cUnorderedGroup_4_1; }

		//("index" index=INT)?
		public Group getGroup_4_1_0() { return cGroup_4_1_0; }

		//"index"
		public Keyword getIndexKeyword_4_1_0_0() { return cIndexKeyword_4_1_0_0; }

		//index=INT
		public Assignment getIndexAssignment_4_1_0_1() { return cIndexAssignment_4_1_0_1; }

		//INT
		public RuleCall getIndexINTTerminalRuleCall_4_1_0_1_0() { return cIndexINTTerminalRuleCall_4_1_0_1_0; }

		//("tags" tags+=Tag ("," tags+=Tag)*)?
		public Group getGroup_4_1_1() { return cGroup_4_1_1; }

		//"tags"
		public Keyword getTagsKeyword_4_1_1_0() { return cTagsKeyword_4_1_1_0; }

		//tags+=Tag
		public Assignment getTagsAssignment_4_1_1_1() { return cTagsAssignment_4_1_1_1; }

		//Tag
		public RuleCall getTagsTagParserRuleCall_4_1_1_1_0() { return cTagsTagParserRuleCall_4_1_1_1_0; }

		//("," tags+=Tag)*
		public Group getGroup_4_1_1_2() { return cGroup_4_1_1_2; }

		//","
		public Keyword getCommaKeyword_4_1_1_2_0() { return cCommaKeyword_4_1_1_2_0; }

		//tags+=Tag
		public Assignment getTagsAssignment_4_1_1_2_1() { return cTagsAssignment_4_1_1_2_1; }

		//Tag
		public RuleCall getTagsTagParserRuleCall_4_1_1_2_1_0() { return cTagsTagParserRuleCall_4_1_1_2_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_4_2() { return cRightParenthesisKeyword_4_2; }

		//"="
		public Keyword getEqualsSignKeyword_5() { return cEqualsSignKeyword_5; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_6() { return cLeftCurlyBracketKeyword_6; }

		//elements+=ContainedElement*
		public Assignment getElementsAssignment_7() { return cElementsAssignment_7; }

		//ContainedElement
		public RuleCall getElementsContainedElementParserRuleCall_7_0() { return cElementsContainedElementParserRuleCall_7_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_8() { return cRightCurlyBracketKeyword_8; }
	}

	public class ParameterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Parameter");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cParameterAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cParamKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cDefinitionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cDefinitionEcucParameterDefCrossReference_2_0 = (CrossReference)cDefinitionAssignment_2.eContents().get(0);
		private final RuleCall cDefinitionEcucParameterDefIDTerminalRuleCall_2_0_1 = (RuleCall)cDefinitionEcucParameterDefCrossReference_2_0.eContents().get(1);
		private final Keyword cEqualsSignKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cValueAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cValueSimpleValueParserRuleCall_4_0 = (RuleCall)cValueAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cLeftParenthesisKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final UnorderedGroup cUnorderedGroup_5_1 = (UnorderedGroup)cGroup_5.eContents().get(1);
		private final Group cGroup_5_1_0 = (Group)cUnorderedGroup_5_1.eContents().get(0);
		private final Keyword cIndexKeyword_5_1_0_0 = (Keyword)cGroup_5_1_0.eContents().get(0);
		private final Assignment cIndexAssignment_5_1_0_1 = (Assignment)cGroup_5_1_0.eContents().get(1);
		private final RuleCall cIndexINTTerminalRuleCall_5_1_0_1_0 = (RuleCall)cIndexAssignment_5_1_0_1.eContents().get(0);
		private final Group cGroup_5_1_1 = (Group)cUnorderedGroup_5_1.eContents().get(1);
		private final Keyword cTagsKeyword_5_1_1_0 = (Keyword)cGroup_5_1_1.eContents().get(0);
		private final Assignment cTagsAssignment_5_1_1_1 = (Assignment)cGroup_5_1_1.eContents().get(1);
		private final RuleCall cTagsTagParserRuleCall_5_1_1_1_0 = (RuleCall)cTagsAssignment_5_1_1_1.eContents().get(0);
		private final Group cGroup_5_1_1_2 = (Group)cGroup_5_1_1.eContents().get(2);
		private final Keyword cCommaKeyword_5_1_1_2_0 = (Keyword)cGroup_5_1_1_2.eContents().get(0);
		private final Assignment cTagsAssignment_5_1_1_2_1 = (Assignment)cGroup_5_1_1_2.eContents().get(1);
		private final RuleCall cTagsTagParserRuleCall_5_1_1_2_1_0 = (RuleCall)cTagsAssignment_5_1_1_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5_2 = (Keyword)cGroup_5.eContents().get(2);
		
		//Parameter:
		//	{Parameter} "param" definition=[ecucpd::EcucParameterDef] "=" value=SimpleValue ("(" (("index" index=INT)? & ("tags"
		//	tags+=Tag ("," tags+=Tag)*)?) ")")?;
		public ParserRule getRule() { return rule; }

		//{Parameter} "param" definition=[ecucpd::EcucParameterDef] "=" value=SimpleValue ("(" (("index" index=INT)? & ("tags"
		//tags+=Tag ("," tags+=Tag)*)?) ")")?
		public Group getGroup() { return cGroup; }

		//{Parameter}
		public Action getParameterAction_0() { return cParameterAction_0; }

		//"param"
		public Keyword getParamKeyword_1() { return cParamKeyword_1; }

		//definition=[ecucpd::EcucParameterDef]
		public Assignment getDefinitionAssignment_2() { return cDefinitionAssignment_2; }

		//[ecucpd::EcucParameterDef]
		public CrossReference getDefinitionEcucParameterDefCrossReference_2_0() { return cDefinitionEcucParameterDefCrossReference_2_0; }

		//ID
		public RuleCall getDefinitionEcucParameterDefIDTerminalRuleCall_2_0_1() { return cDefinitionEcucParameterDefIDTerminalRuleCall_2_0_1; }

		//"="
		public Keyword getEqualsSignKeyword_3() { return cEqualsSignKeyword_3; }

		//value=SimpleValue
		public Assignment getValueAssignment_4() { return cValueAssignment_4; }

		//SimpleValue
		public RuleCall getValueSimpleValueParserRuleCall_4_0() { return cValueSimpleValueParserRuleCall_4_0; }

		//("(" (("index" index=INT)? & ("tags" tags+=Tag ("," tags+=Tag)*)?) ")")?
		public Group getGroup_5() { return cGroup_5; }

		//"("
		public Keyword getLeftParenthesisKeyword_5_0() { return cLeftParenthesisKeyword_5_0; }

		//("index" index=INT)? & ("tags" tags+=Tag ("," tags+=Tag)*)?
		public UnorderedGroup getUnorderedGroup_5_1() { return cUnorderedGroup_5_1; }

		//("index" index=INT)?
		public Group getGroup_5_1_0() { return cGroup_5_1_0; }

		//"index"
		public Keyword getIndexKeyword_5_1_0_0() { return cIndexKeyword_5_1_0_0; }

		//index=INT
		public Assignment getIndexAssignment_5_1_0_1() { return cIndexAssignment_5_1_0_1; }

		//INT
		public RuleCall getIndexINTTerminalRuleCall_5_1_0_1_0() { return cIndexINTTerminalRuleCall_5_1_0_1_0; }

		//("tags" tags+=Tag ("," tags+=Tag)*)?
		public Group getGroup_5_1_1() { return cGroup_5_1_1; }

		//"tags"
		public Keyword getTagsKeyword_5_1_1_0() { return cTagsKeyword_5_1_1_0; }

		//tags+=Tag
		public Assignment getTagsAssignment_5_1_1_1() { return cTagsAssignment_5_1_1_1; }

		//Tag
		public RuleCall getTagsTagParserRuleCall_5_1_1_1_0() { return cTagsTagParserRuleCall_5_1_1_1_0; }

		//("," tags+=Tag)*
		public Group getGroup_5_1_1_2() { return cGroup_5_1_1_2; }

		//","
		public Keyword getCommaKeyword_5_1_1_2_0() { return cCommaKeyword_5_1_1_2_0; }

		//tags+=Tag
		public Assignment getTagsAssignment_5_1_1_2_1() { return cTagsAssignment_5_1_1_2_1; }

		//Tag
		public RuleCall getTagsTagParserRuleCall_5_1_1_2_1_0() { return cTagsTagParserRuleCall_5_1_1_2_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_5_2() { return cRightParenthesisKeyword_5_2; }
	}

	public class ReferenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Reference");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cReferenceAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cRefKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cDefinitionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cDefinitionEcucAbstractReferenceDefCrossReference_2_0 = (CrossReference)cDefinitionAssignment_2.eContents().get(0);
		private final RuleCall cDefinitionEcucAbstractReferenceDefIDTerminalRuleCall_2_0_1 = (RuleCall)cDefinitionEcucAbstractReferenceDefCrossReference_2_0.eContents().get(1);
		private final Keyword cEqualsSignKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cValueAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cValueReferenceValueParserRuleCall_4_0 = (RuleCall)cValueAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cLeftParenthesisKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final UnorderedGroup cUnorderedGroup_5_1 = (UnorderedGroup)cGroup_5.eContents().get(1);
		private final Group cGroup_5_1_0 = (Group)cUnorderedGroup_5_1.eContents().get(0);
		private final Keyword cIndexKeyword_5_1_0_0 = (Keyword)cGroup_5_1_0.eContents().get(0);
		private final Assignment cIndexAssignment_5_1_0_1 = (Assignment)cGroup_5_1_0.eContents().get(1);
		private final RuleCall cIndexINTTerminalRuleCall_5_1_0_1_0 = (RuleCall)cIndexAssignment_5_1_0_1.eContents().get(0);
		private final Group cGroup_5_1_1 = (Group)cUnorderedGroup_5_1.eContents().get(1);
		private final Keyword cTagsKeyword_5_1_1_0 = (Keyword)cGroup_5_1_1.eContents().get(0);
		private final Assignment cTagsAssignment_5_1_1_1 = (Assignment)cGroup_5_1_1.eContents().get(1);
		private final RuleCall cTagsTagParserRuleCall_5_1_1_1_0 = (RuleCall)cTagsAssignment_5_1_1_1.eContents().get(0);
		private final Group cGroup_5_1_1_2 = (Group)cGroup_5_1_1.eContents().get(2);
		private final Keyword cCommaKeyword_5_1_1_2_0 = (Keyword)cGroup_5_1_1_2.eContents().get(0);
		private final Assignment cTagsAssignment_5_1_1_2_1 = (Assignment)cGroup_5_1_1_2.eContents().get(1);
		private final RuleCall cTagsTagParserRuleCall_5_1_1_2_1_0 = (RuleCall)cTagsAssignment_5_1_1_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5_2 = (Keyword)cGroup_5.eContents().get(2);
		
		//Reference:
		//	{Reference} "ref" definition=[ecucpd::EcucAbstractReferenceDef] "=" value=ReferenceValue ("(" (("index" index=INT)? &
		//	("tags" tags+=Tag ("," tags+=Tag)*)?) ")")?;
		public ParserRule getRule() { return rule; }

		//{Reference} "ref" definition=[ecucpd::EcucAbstractReferenceDef] "=" value=ReferenceValue ("(" (("index" index=INT)? &
		//("tags" tags+=Tag ("," tags+=Tag)*)?) ")")?
		public Group getGroup() { return cGroup; }

		//{Reference}
		public Action getReferenceAction_0() { return cReferenceAction_0; }

		//"ref"
		public Keyword getRefKeyword_1() { return cRefKeyword_1; }

		//definition=[ecucpd::EcucAbstractReferenceDef]
		public Assignment getDefinitionAssignment_2() { return cDefinitionAssignment_2; }

		//[ecucpd::EcucAbstractReferenceDef]
		public CrossReference getDefinitionEcucAbstractReferenceDefCrossReference_2_0() { return cDefinitionEcucAbstractReferenceDefCrossReference_2_0; }

		//ID
		public RuleCall getDefinitionEcucAbstractReferenceDefIDTerminalRuleCall_2_0_1() { return cDefinitionEcucAbstractReferenceDefIDTerminalRuleCall_2_0_1; }

		//"="
		public Keyword getEqualsSignKeyword_3() { return cEqualsSignKeyword_3; }

		//value=ReferenceValue
		public Assignment getValueAssignment_4() { return cValueAssignment_4; }

		//ReferenceValue
		public RuleCall getValueReferenceValueParserRuleCall_4_0() { return cValueReferenceValueParserRuleCall_4_0; }

		//("(" (("index" index=INT)? & ("tags" tags+=Tag ("," tags+=Tag)*)?) ")")?
		public Group getGroup_5() { return cGroup_5; }

		//"("
		public Keyword getLeftParenthesisKeyword_5_0() { return cLeftParenthesisKeyword_5_0; }

		//("index" index=INT)? & ("tags" tags+=Tag ("," tags+=Tag)*)?
		public UnorderedGroup getUnorderedGroup_5_1() { return cUnorderedGroup_5_1; }

		//("index" index=INT)?
		public Group getGroup_5_1_0() { return cGroup_5_1_0; }

		//"index"
		public Keyword getIndexKeyword_5_1_0_0() { return cIndexKeyword_5_1_0_0; }

		//index=INT
		public Assignment getIndexAssignment_5_1_0_1() { return cIndexAssignment_5_1_0_1; }

		//INT
		public RuleCall getIndexINTTerminalRuleCall_5_1_0_1_0() { return cIndexINTTerminalRuleCall_5_1_0_1_0; }

		//("tags" tags+=Tag ("," tags+=Tag)*)?
		public Group getGroup_5_1_1() { return cGroup_5_1_1; }

		//"tags"
		public Keyword getTagsKeyword_5_1_1_0() { return cTagsKeyword_5_1_1_0; }

		//tags+=Tag
		public Assignment getTagsAssignment_5_1_1_1() { return cTagsAssignment_5_1_1_1; }

		//Tag
		public RuleCall getTagsTagParserRuleCall_5_1_1_1_0() { return cTagsTagParserRuleCall_5_1_1_1_0; }

		//("," tags+=Tag)*
		public Group getGroup_5_1_1_2() { return cGroup_5_1_1_2; }

		//","
		public Keyword getCommaKeyword_5_1_1_2_0() { return cCommaKeyword_5_1_1_2_0; }

		//tags+=Tag
		public Assignment getTagsAssignment_5_1_1_2_1() { return cTagsAssignment_5_1_1_2_1; }

		//Tag
		public RuleCall getTagsTagParserRuleCall_5_1_1_2_1_0() { return cTagsTagParserRuleCall_5_1_1_2_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_5_2() { return cRightParenthesisKeyword_5_2; }
	}

	public class InstanceReferenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "InstanceReference");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cInstanceReferenceAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cIrefKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cDefinitionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cDefinitionEcucAbstractReferenceDefCrossReference_2_0 = (CrossReference)cDefinitionAssignment_2.eContents().get(0);
		private final RuleCall cDefinitionEcucAbstractReferenceDefIDTerminalRuleCall_2_0_1 = (RuleCall)cDefinitionEcucAbstractReferenceDefCrossReference_2_0.eContents().get(1);
		private final Keyword cEqualsSignKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cValueAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cValueInstanceReferenceValueParserRuleCall_4_0 = (RuleCall)cValueAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cLeftParenthesisKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final UnorderedGroup cUnorderedGroup_5_1 = (UnorderedGroup)cGroup_5.eContents().get(1);
		private final Group cGroup_5_1_0 = (Group)cUnorderedGroup_5_1.eContents().get(0);
		private final Keyword cIndexKeyword_5_1_0_0 = (Keyword)cGroup_5_1_0.eContents().get(0);
		private final Assignment cIndexAssignment_5_1_0_1 = (Assignment)cGroup_5_1_0.eContents().get(1);
		private final RuleCall cIndexINTTerminalRuleCall_5_1_0_1_0 = (RuleCall)cIndexAssignment_5_1_0_1.eContents().get(0);
		private final Group cGroup_5_1_1 = (Group)cUnorderedGroup_5_1.eContents().get(1);
		private final Keyword cTagsKeyword_5_1_1_0 = (Keyword)cGroup_5_1_1.eContents().get(0);
		private final Assignment cTagsAssignment_5_1_1_1 = (Assignment)cGroup_5_1_1.eContents().get(1);
		private final RuleCall cTagsTagParserRuleCall_5_1_1_1_0 = (RuleCall)cTagsAssignment_5_1_1_1.eContents().get(0);
		private final Group cGroup_5_1_1_2 = (Group)cGroup_5_1_1.eContents().get(2);
		private final Keyword cCommaKeyword_5_1_1_2_0 = (Keyword)cGroup_5_1_1_2.eContents().get(0);
		private final Assignment cTagsAssignment_5_1_1_2_1 = (Assignment)cGroup_5_1_1_2.eContents().get(1);
		private final RuleCall cTagsTagParserRuleCall_5_1_1_2_1_0 = (RuleCall)cTagsAssignment_5_1_1_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5_2 = (Keyword)cGroup_5.eContents().get(2);
		
		//InstanceReference:
		//	{InstanceReference} "iref" definition=[ecucpd::EcucAbstractReferenceDef] "=" value=InstanceReferenceValue ("("
		//	(("index" index=INT)? & ("tags" tags+=Tag ("," tags+=Tag)*)?) ")")?;
		public ParserRule getRule() { return rule; }

		//{InstanceReference} "iref" definition=[ecucpd::EcucAbstractReferenceDef] "=" value=InstanceReferenceValue ("(" (("index"
		//index=INT)? & ("tags" tags+=Tag ("," tags+=Tag)*)?) ")")?
		public Group getGroup() { return cGroup; }

		//{InstanceReference}
		public Action getInstanceReferenceAction_0() { return cInstanceReferenceAction_0; }

		//"iref"
		public Keyword getIrefKeyword_1() { return cIrefKeyword_1; }

		//definition=[ecucpd::EcucAbstractReferenceDef]
		public Assignment getDefinitionAssignment_2() { return cDefinitionAssignment_2; }

		//[ecucpd::EcucAbstractReferenceDef]
		public CrossReference getDefinitionEcucAbstractReferenceDefCrossReference_2_0() { return cDefinitionEcucAbstractReferenceDefCrossReference_2_0; }

		//ID
		public RuleCall getDefinitionEcucAbstractReferenceDefIDTerminalRuleCall_2_0_1() { return cDefinitionEcucAbstractReferenceDefIDTerminalRuleCall_2_0_1; }

		//"="
		public Keyword getEqualsSignKeyword_3() { return cEqualsSignKeyword_3; }

		//value=InstanceReferenceValue
		public Assignment getValueAssignment_4() { return cValueAssignment_4; }

		//InstanceReferenceValue
		public RuleCall getValueInstanceReferenceValueParserRuleCall_4_0() { return cValueInstanceReferenceValueParserRuleCall_4_0; }

		//("(" (("index" index=INT)? & ("tags" tags+=Tag ("," tags+=Tag)*)?) ")")?
		public Group getGroup_5() { return cGroup_5; }

		//"("
		public Keyword getLeftParenthesisKeyword_5_0() { return cLeftParenthesisKeyword_5_0; }

		//("index" index=INT)? & ("tags" tags+=Tag ("," tags+=Tag)*)?
		public UnorderedGroup getUnorderedGroup_5_1() { return cUnorderedGroup_5_1; }

		//("index" index=INT)?
		public Group getGroup_5_1_0() { return cGroup_5_1_0; }

		//"index"
		public Keyword getIndexKeyword_5_1_0_0() { return cIndexKeyword_5_1_0_0; }

		//index=INT
		public Assignment getIndexAssignment_5_1_0_1() { return cIndexAssignment_5_1_0_1; }

		//INT
		public RuleCall getIndexINTTerminalRuleCall_5_1_0_1_0() { return cIndexINTTerminalRuleCall_5_1_0_1_0; }

		//("tags" tags+=Tag ("," tags+=Tag)*)?
		public Group getGroup_5_1_1() { return cGroup_5_1_1; }

		//"tags"
		public Keyword getTagsKeyword_5_1_1_0() { return cTagsKeyword_5_1_1_0; }

		//tags+=Tag
		public Assignment getTagsAssignment_5_1_1_1() { return cTagsAssignment_5_1_1_1; }

		//Tag
		public RuleCall getTagsTagParserRuleCall_5_1_1_1_0() { return cTagsTagParserRuleCall_5_1_1_1_0; }

		//("," tags+=Tag)*
		public Group getGroup_5_1_1_2() { return cGroup_5_1_1_2; }

		//","
		public Keyword getCommaKeyword_5_1_1_2_0() { return cCommaKeyword_5_1_1_2_0; }

		//tags+=Tag
		public Assignment getTagsAssignment_5_1_1_2_1() { return cTagsAssignment_5_1_1_2_1; }

		//Tag
		public RuleCall getTagsTagParserRuleCall_5_1_1_2_1_0() { return cTagsTagParserRuleCall_5_1_1_2_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_5_2() { return cRightParenthesisKeyword_5_2; }
	}

	public class ReferenceValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ReferenceValue");
		private final Assignment cContainerAssignment = (Assignment)rule.eContents().get(1);
		private final CrossReference cContainerEObjectCrossReference_0 = (CrossReference)cContainerAssignment.eContents().get(0);
		private final RuleCall cContainerEObjectFQNParserRuleCall_0_1 = (RuleCall)cContainerEObjectCrossReference_0.eContents().get(1);
		
		//ReferenceValue:
		//	container=[ecore::EObject|FQN];
		public ParserRule getRule() { return rule; }

		//container=[ecore::EObject|FQN]
		public Assignment getContainerAssignment() { return cContainerAssignment; }

		//[ecore::EObject|FQN]
		public CrossReference getContainerEObjectCrossReference_0() { return cContainerEObjectCrossReference_0; }

		//FQN
		public RuleCall getContainerEObjectFQNParserRuleCall_0_1() { return cContainerEObjectFQNParserRuleCall_0_1; }
	}

	public class InstanceReferenceValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "InstanceReferenceValue");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cContextsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cContextsContextChainParserRuleCall_0_0 = (RuleCall)cContextsAssignment_0.eContents().get(0);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTargetAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cTargetEObjectCrossReference_2_0 = (CrossReference)cTargetAssignment_2.eContents().get(0);
		private final RuleCall cTargetEObjectFQNParserRuleCall_2_0_1 = (RuleCall)cTargetEObjectCrossReference_2_0.eContents().get(1);
		
		//InstanceReferenceValue:
		//	contexts=ContextChain "->" target=[ecore::EObject|FQN];
		public ParserRule getRule() { return rule; }

		//contexts=ContextChain "->" target=[ecore::EObject|FQN]
		public Group getGroup() { return cGroup; }

		//contexts=ContextChain
		public Assignment getContextsAssignment_0() { return cContextsAssignment_0; }

		//ContextChain
		public RuleCall getContextsContextChainParserRuleCall_0_0() { return cContextsContextChainParserRuleCall_0_0; }

		//"->"
		public Keyword getHyphenMinusGreaterThanSignKeyword_1() { return cHyphenMinusGreaterThanSignKeyword_1; }

		//target=[ecore::EObject|FQN]
		public Assignment getTargetAssignment_2() { return cTargetAssignment_2; }

		//[ecore::EObject|FQN]
		public CrossReference getTargetEObjectCrossReference_2_0() { return cTargetEObjectCrossReference_2_0; }

		//FQN
		public RuleCall getTargetEObjectFQNParserRuleCall_2_0_1() { return cTargetEObjectFQNParserRuleCall_2_0_1; }
	}

	public class ContextChainElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ContextChain");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cContextParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cContextChainPrevAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cCommaKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cObjectAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final CrossReference cObjectEObjectCrossReference_1_2_0 = (CrossReference)cObjectAssignment_1_2.eContents().get(0);
		private final RuleCall cObjectEObjectFQNParserRuleCall_1_2_0_1 = (RuleCall)cObjectEObjectCrossReference_1_2_0.eContents().get(1);
		
		//ContextChain returns AbstractContext:
		//	Context ({ContextChain.prev=current} "," object=[ecore::EObject|FQN])*;
		public ParserRule getRule() { return rule; }

		//Context ({ContextChain.prev=current} "," object=[ecore::EObject|FQN])*
		public Group getGroup() { return cGroup; }

		//Context
		public RuleCall getContextParserRuleCall_0() { return cContextParserRuleCall_0; }

		//({ContextChain.prev=current} "," object=[ecore::EObject|FQN])*
		public Group getGroup_1() { return cGroup_1; }

		//{ContextChain.prev=current}
		public Action getContextChainPrevAction_1_0() { return cContextChainPrevAction_1_0; }

		//","
		public Keyword getCommaKeyword_1_1() { return cCommaKeyword_1_1; }

		//object=[ecore::EObject|FQN]
		public Assignment getObjectAssignment_1_2() { return cObjectAssignment_1_2; }

		//[ecore::EObject|FQN]
		public CrossReference getObjectEObjectCrossReference_1_2_0() { return cObjectEObjectCrossReference_1_2_0; }

		//FQN
		public RuleCall getObjectEObjectFQNParserRuleCall_1_2_0_1() { return cObjectEObjectFQNParserRuleCall_1_2_0_1; }
	}

	public class ContextElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Context");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cContextAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cStartAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cStartEObjectCrossReference_1_0 = (CrossReference)cStartAssignment_1.eContents().get(0);
		private final RuleCall cStartEObjectFQNParserRuleCall_1_0_1 = (RuleCall)cStartEObjectCrossReference_1_0.eContents().get(1);
		
		//Context returns AbstractContext:
		//	{Context} start=[ecore::EObject|FQN];
		public ParserRule getRule() { return rule; }

		//{Context} start=[ecore::EObject|FQN]
		public Group getGroup() { return cGroup; }

		//{Context}
		public Action getContextAction_0() { return cContextAction_0; }

		//start=[ecore::EObject|FQN]
		public Assignment getStartAssignment_1() { return cStartAssignment_1; }

		//[ecore::EObject|FQN]
		public CrossReference getStartEObjectCrossReference_1_0() { return cStartEObjectCrossReference_1_0; }

		//FQN
		public RuleCall getStartEObjectFQNParserRuleCall_1_0_1() { return cStartEObjectFQNParserRuleCall_1_0_1; }
	}

	public class SimpleValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SimpleValue");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cStringValueParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cNumericValueParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cBooleanValueParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cEnumValueParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//SimpleValue:
		//	StringValue | NumericValue | BooleanValue | EnumValue;
		public ParserRule getRule() { return rule; }

		//StringValue | NumericValue | BooleanValue | EnumValue
		public Alternatives getAlternatives() { return cAlternatives; }

		//StringValue
		public RuleCall getStringValueParserRuleCall_0() { return cStringValueParserRuleCall_0; }

		//NumericValue
		public RuleCall getNumericValueParserRuleCall_1() { return cNumericValueParserRuleCall_1; }

		//BooleanValue
		public RuleCall getBooleanValueParserRuleCall_2() { return cBooleanValueParserRuleCall_2; }

		//EnumValue
		public RuleCall getEnumValueParserRuleCall_3() { return cEnumValueParserRuleCall_3; }
	}

	public class StringValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "StringValue");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueSTRINGTerminalRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//StringValue:
		//	value=STRING;
		public ParserRule getRule() { return rule; }

		//value=STRING
		public Assignment getValueAssignment() { return cValueAssignment; }

		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_0() { return cValueSTRINGTerminalRuleCall_0; }
	}

	public class EnumValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EnumValue");
		private final Assignment cLiteralAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cLiteralEIDParserRuleCall_0 = (RuleCall)cLiteralAssignment.eContents().get(0);
		
		//EnumValue:
		//	literal=EID;
		public ParserRule getRule() { return rule; }

		//literal=EID
		public Assignment getLiteralAssignment() { return cLiteralAssignment; }

		//EID
		public RuleCall getLiteralEIDParserRuleCall_0() { return cLiteralEIDParserRuleCall_0; }
	}

	public class EIDElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EID");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFullStopKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//EID hidden():
		//	"." ID;
		public ParserRule getRule() { return rule; }

		//"." ID
		public Group getGroup() { return cGroup; }

		//"."
		public Keyword getFullStopKeyword_0() { return cFullStopKeyword_0; }

		//ID
		public RuleCall getIDTerminalRuleCall_1() { return cIDTerminalRuleCall_1; }
	}

	public class BooleanValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BooleanValue");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueBooleanLiteralEnumRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//BooleanValue:
		//	value=BooleanLiteral;
		public ParserRule getRule() { return rule; }

		//value=BooleanLiteral
		public Assignment getValueAssignment() { return cValueAssignment; }

		//BooleanLiteral
		public RuleCall getValueBooleanLiteralEnumRuleCall_0() { return cValueBooleanLiteralEnumRuleCall_0; }
	}

	public class NumericValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NumericValue");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueNUMERICParserRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//NumericValue:
		//	value=NUMERIC;
		public ParserRule getRule() { return rule; }

		//value=NUMERIC
		public Assignment getValueAssignment() { return cValueAssignment; }

		//NUMERIC
		public RuleCall getValueNUMERICParserRuleCall_0() { return cValueNUMERICParserRuleCall_0; }
	}

	public class TagElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Tag");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cKeyAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cKeyKEYParserRuleCall_0_0 = (RuleCall)cKeyAssignment_0.eContents().get(0);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueVALUEParserRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		
		//Tag:
		//	key=KEY "->" value=VALUE;
		public ParserRule getRule() { return rule; }

		//key=KEY "->" value=VALUE
		public Group getGroup() { return cGroup; }

		//key=KEY
		public Assignment getKeyAssignment_0() { return cKeyAssignment_0; }

		//KEY
		public RuleCall getKeyKEYParserRuleCall_0_0() { return cKeyKEYParserRuleCall_0_0; }

		//"->"
		public Keyword getHyphenMinusGreaterThanSignKeyword_1() { return cHyphenMinusGreaterThanSignKeyword_1; }

		//value=VALUE
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }

		//VALUE
		public RuleCall getValueVALUEParserRuleCall_2_0() { return cValueVALUEParserRuleCall_2_0; }
	}

	public class VALUEElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "VALUE");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSTRINGTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cNUMERICParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final Keyword cTrueKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cFalseKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		
		//VALUE:
		//	STRING | ID | NUMERIC | "true" | "false";
		public ParserRule getRule() { return rule; }

		//STRING | ID | NUMERIC | "true" | "false"
		public Alternatives getAlternatives() { return cAlternatives; }

		//STRING
		public RuleCall getSTRINGTerminalRuleCall_0() { return cSTRINGTerminalRuleCall_0; }

		//ID
		public RuleCall getIDTerminalRuleCall_1() { return cIDTerminalRuleCall_1; }

		//NUMERIC
		public RuleCall getNUMERICParserRuleCall_2() { return cNUMERICParserRuleCall_2; }

		//"true"
		public Keyword getTrueKeyword_3() { return cTrueKeyword_3; }

		//"false"
		public Keyword getFalseKeyword_4() { return cFalseKeyword_4; }
	}

	public class KEYElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "KEY");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSTRINGTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cNUMERICParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final Keyword cTrueKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cFalseKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		
		//KEY:
		//	STRING | ID | NUMERIC | "true" | "false";
		public ParserRule getRule() { return rule; }

		//STRING | ID | NUMERIC | "true" | "false"
		public Alternatives getAlternatives() { return cAlternatives; }

		//STRING
		public RuleCall getSTRINGTerminalRuleCall_0() { return cSTRINGTerminalRuleCall_0; }

		//ID
		public RuleCall getIDTerminalRuleCall_1() { return cIDTerminalRuleCall_1; }

		//NUMERIC
		public RuleCall getNUMERICParserRuleCall_2() { return cNUMERICParserRuleCall_2; }

		//"true"
		public Keyword getTrueKeyword_3() { return cTrueKeyword_3; }

		//"false"
		public Keyword getFalseKeyword_4() { return cFalseKeyword_4; }
	}

	public class NUMERICElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NUMERIC");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cFullStopKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_2_1 = (RuleCall)cGroup_2.eContents().get(1);
		
		//NUMERIC returns ecore::EString:
		//	"-"? INT ("." INT)?;
		public ParserRule getRule() { return rule; }

		//"-"? INT ("." INT)?
		public Group getGroup() { return cGroup; }

		//"-"?
		public Keyword getHyphenMinusKeyword_0() { return cHyphenMinusKeyword_0; }

		//INT
		public RuleCall getINTTerminalRuleCall_1() { return cINTTerminalRuleCall_1; }

		//("." INT)?
		public Group getGroup_2() { return cGroup_2; }

		//"."
		public Keyword getFullStopKeyword_2_0() { return cFullStopKeyword_2_0; }

		//INT
		public RuleCall getINTTerminalRuleCall_2_1() { return cINTTerminalRuleCall_2_1; }
	}

	public class FQNElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FQN");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cSolidusKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//FQN hidden():
		//	ID ("/" ID)*;
		public ParserRule getRule() { return rule; }

		//ID ("/" ID)*
		public Group getGroup() { return cGroup; }

		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }

		//("/" ID)*
		public Group getGroup_1() { return cGroup_1; }

		//"/"
		public Keyword getSolidusKeyword_1_0() { return cSolidusKeyword_1_0; }

		//ID
		public RuleCall getIDTerminalRuleCall_1_1() { return cIDTerminalRuleCall_1_1; }
	}
	
	
	public class BooleanLiteralElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "BooleanLiteral");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cTrueEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cTrueTrueKeyword_0_0 = (Keyword)cTrueEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cFalseEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cFalseFalseKeyword_1_0 = (Keyword)cFalseEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum BooleanLiteral:
		//	true | false;
		public EnumRule getRule() { return rule; }

		//true | false
		public Alternatives getAlternatives() { return cAlternatives; }

		//true
		public EnumLiteralDeclaration getTrueEnumLiteralDeclaration_0() { return cTrueEnumLiteralDeclaration_0; }

		//"true"
		public Keyword getTrueTrueKeyword_0_0() { return cTrueTrueKeyword_0_0; }

		//false
		public EnumLiteralDeclaration getFalseEnumLiteralDeclaration_1() { return cFalseEnumLiteralDeclaration_1; }

		//"false"
		public Keyword getFalseFalseKeyword_1_0() { return cFalseFalseKeyword_1_0; }
	}
	
	private ModelElements pModel;
	private ModuleElements pModule;
	private ContainedElementElements pContainedElement;
	private ContainerElements pContainer;
	private ParameterElements pParameter;
	private ReferenceElements pReference;
	private InstanceReferenceElements pInstanceReference;
	private ReferenceValueElements pReferenceValue;
	private InstanceReferenceValueElements pInstanceReferenceValue;
	private ContextChainElements pContextChain;
	private ContextElements pContext;
	private SimpleValueElements pSimpleValue;
	private StringValueElements pStringValue;
	private EnumValueElements pEnumValue;
	private EIDElements pEID;
	private BooleanValueElements pBooleanValue;
	private BooleanLiteralElements unknownRuleBooleanLiteral;
	private NumericValueElements pNumericValue;
	private TagElements pTag;
	private VALUEElements pVALUE;
	private KEYElements pKEY;
	private NUMERICElements pNUMERIC;
	private FQNElements pFQN;
	
	private final Grammar grammar;

	private TerminalsGrammarAccess gaTerminals;

	@Inject
	public EcucValuesDslGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.artop.ecuc.autosar4x.dsl.values.EcucValuesDsl".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Model:
	//	("package" packageName=ID)? modules+=Module*;
	public ModelElements getModelAccess() {
		return (pModel != null) ? pModel : (pModel = new ModelElements());
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}

	//Module:
	//	{Module} "module" definition=[ecucpd::EcucModuleDef] (":" shortName=ID)? ("(" ("tags" tags+=Tag ("," tags+=Tag)*)?
	//	")")? "=" "{" container+=Container* "}";
	public ModuleElements getModuleAccess() {
		return (pModule != null) ? pModule : (pModule = new ModuleElements());
	}
	
	public ParserRule getModuleRule() {
		return getModuleAccess().getRule();
	}

	//ContainedElement:
	//	Container | Parameter | Reference | InstanceReference;
	public ContainedElementElements getContainedElementAccess() {
		return (pContainedElement != null) ? pContainedElement : (pContainedElement = new ContainedElementElements());
	}
	
	public ParserRule getContainedElementRule() {
		return getContainedElementAccess().getRule();
	}

	//Container:
	//	{Container} "container" definition=[ecucpd::EcucContainerDef] (":" shortName=ID)? ("(" (("index" index=INT)? &
	//	("tags" tags+=Tag ("," tags+=Tag)*)?) ")")? "=" "{" elements+=ContainedElement* "}";
	public ContainerElements getContainerAccess() {
		return (pContainer != null) ? pContainer : (pContainer = new ContainerElements());
	}
	
	public ParserRule getContainerRule() {
		return getContainerAccess().getRule();
	}

	//Parameter:
	//	{Parameter} "param" definition=[ecucpd::EcucParameterDef] "=" value=SimpleValue ("(" (("index" index=INT)? & ("tags"
	//	tags+=Tag ("," tags+=Tag)*)?) ")")?;
	public ParameterElements getParameterAccess() {
		return (pParameter != null) ? pParameter : (pParameter = new ParameterElements());
	}
	
	public ParserRule getParameterRule() {
		return getParameterAccess().getRule();
	}

	//Reference:
	//	{Reference} "ref" definition=[ecucpd::EcucAbstractReferenceDef] "=" value=ReferenceValue ("(" (("index" index=INT)? &
	//	("tags" tags+=Tag ("," tags+=Tag)*)?) ")")?;
	public ReferenceElements getReferenceAccess() {
		return (pReference != null) ? pReference : (pReference = new ReferenceElements());
	}
	
	public ParserRule getReferenceRule() {
		return getReferenceAccess().getRule();
	}

	//InstanceReference:
	//	{InstanceReference} "iref" definition=[ecucpd::EcucAbstractReferenceDef] "=" value=InstanceReferenceValue ("("
	//	(("index" index=INT)? & ("tags" tags+=Tag ("," tags+=Tag)*)?) ")")?;
	public InstanceReferenceElements getInstanceReferenceAccess() {
		return (pInstanceReference != null) ? pInstanceReference : (pInstanceReference = new InstanceReferenceElements());
	}
	
	public ParserRule getInstanceReferenceRule() {
		return getInstanceReferenceAccess().getRule();
	}

	//ReferenceValue:
	//	container=[ecore::EObject|FQN];
	public ReferenceValueElements getReferenceValueAccess() {
		return (pReferenceValue != null) ? pReferenceValue : (pReferenceValue = new ReferenceValueElements());
	}
	
	public ParserRule getReferenceValueRule() {
		return getReferenceValueAccess().getRule();
	}

	//InstanceReferenceValue:
	//	contexts=ContextChain "->" target=[ecore::EObject|FQN];
	public InstanceReferenceValueElements getInstanceReferenceValueAccess() {
		return (pInstanceReferenceValue != null) ? pInstanceReferenceValue : (pInstanceReferenceValue = new InstanceReferenceValueElements());
	}
	
	public ParserRule getInstanceReferenceValueRule() {
		return getInstanceReferenceValueAccess().getRule();
	}

	//ContextChain returns AbstractContext:
	//	Context ({ContextChain.prev=current} "," object=[ecore::EObject|FQN])*;
	public ContextChainElements getContextChainAccess() {
		return (pContextChain != null) ? pContextChain : (pContextChain = new ContextChainElements());
	}
	
	public ParserRule getContextChainRule() {
		return getContextChainAccess().getRule();
	}

	//Context returns AbstractContext:
	//	{Context} start=[ecore::EObject|FQN];
	public ContextElements getContextAccess() {
		return (pContext != null) ? pContext : (pContext = new ContextElements());
	}
	
	public ParserRule getContextRule() {
		return getContextAccess().getRule();
	}

	//SimpleValue:
	//	StringValue | NumericValue | BooleanValue | EnumValue;
	public SimpleValueElements getSimpleValueAccess() {
		return (pSimpleValue != null) ? pSimpleValue : (pSimpleValue = new SimpleValueElements());
	}
	
	public ParserRule getSimpleValueRule() {
		return getSimpleValueAccess().getRule();
	}

	//StringValue:
	//	value=STRING;
	public StringValueElements getStringValueAccess() {
		return (pStringValue != null) ? pStringValue : (pStringValue = new StringValueElements());
	}
	
	public ParserRule getStringValueRule() {
		return getStringValueAccess().getRule();
	}

	//EnumValue:
	//	literal=EID;
	public EnumValueElements getEnumValueAccess() {
		return (pEnumValue != null) ? pEnumValue : (pEnumValue = new EnumValueElements());
	}
	
	public ParserRule getEnumValueRule() {
		return getEnumValueAccess().getRule();
	}

	//EID hidden():
	//	"." ID;
	public EIDElements getEIDAccess() {
		return (pEID != null) ? pEID : (pEID = new EIDElements());
	}
	
	public ParserRule getEIDRule() {
		return getEIDAccess().getRule();
	}

	//BooleanValue:
	//	value=BooleanLiteral;
	public BooleanValueElements getBooleanValueAccess() {
		return (pBooleanValue != null) ? pBooleanValue : (pBooleanValue = new BooleanValueElements());
	}
	
	public ParserRule getBooleanValueRule() {
		return getBooleanValueAccess().getRule();
	}

	//enum BooleanLiteral:
	//	true | false;
	public BooleanLiteralElements getBooleanLiteralAccess() {
		return (unknownRuleBooleanLiteral != null) ? unknownRuleBooleanLiteral : (unknownRuleBooleanLiteral = new BooleanLiteralElements());
	}
	
	public EnumRule getBooleanLiteralRule() {
		return getBooleanLiteralAccess().getRule();
	}

	//NumericValue:
	//	value=NUMERIC;
	public NumericValueElements getNumericValueAccess() {
		return (pNumericValue != null) ? pNumericValue : (pNumericValue = new NumericValueElements());
	}
	
	public ParserRule getNumericValueRule() {
		return getNumericValueAccess().getRule();
	}

	//Tag:
	//	key=KEY "->" value=VALUE;
	public TagElements getTagAccess() {
		return (pTag != null) ? pTag : (pTag = new TagElements());
	}
	
	public ParserRule getTagRule() {
		return getTagAccess().getRule();
	}

	//VALUE:
	//	STRING | ID | NUMERIC | "true" | "false";
	public VALUEElements getVALUEAccess() {
		return (pVALUE != null) ? pVALUE : (pVALUE = new VALUEElements());
	}
	
	public ParserRule getVALUERule() {
		return getVALUEAccess().getRule();
	}

	//KEY:
	//	STRING | ID | NUMERIC | "true" | "false";
	public KEYElements getKEYAccess() {
		return (pKEY != null) ? pKEY : (pKEY = new KEYElements());
	}
	
	public ParserRule getKEYRule() {
		return getKEYAccess().getRule();
	}

	//NUMERIC returns ecore::EString:
	//	"-"? INT ("." INT)?;
	public NUMERICElements getNUMERICAccess() {
		return (pNUMERIC != null) ? pNUMERIC : (pNUMERIC = new NUMERICElements());
	}
	
	public ParserRule getNUMERICRule() {
		return getNUMERICAccess().getRule();
	}

	//FQN hidden():
	//	ID ("/" ID)*;
	public FQNElements getFQNAccess() {
		return (pFQN != null) ? pFQN : (pFQN = new FQNElements());
	}
	
	public ParserRule getFQNRule() {
		return getFQNAccess().getRule();
	}

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" |
	//	"n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
