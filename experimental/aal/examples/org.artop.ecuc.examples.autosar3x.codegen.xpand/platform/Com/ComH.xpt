«EXTENSION org::eclipse::xtend::util::stdlib::io»
«EXTENSION org::eclipse::xtend::util::stdlib::globalvar»
«EXTENSION extensions::common»
«EXTENSION extensions::com»

«DEFINE inclusions FOR ARRoot::Com -»
/*****************************************************************************/
/* INCLUSIONS                                                                */
/*****************************************************************************/
#include "ComStack_Types.h"
«ENDDEFINE»

«DEFINE symbolicName FOR ARRoot::Com -»
/*****************************************************************************/
/* SYMBOLIC NAMES                                                            */
/*****************************************************************************/
/* Signals symbolic names */«REM»
<%for (Com.gceSignalSort()){%>
#define <%_shortname%> <%gceHandleId()%>
<%}%>«ENDREM»
«FOREACH gceSignalSort() AS iter -»
#define «iter.shortName» «iter.gceHandleId()»
«ENDFOREACH -»
/* Group signals symbolic names */«REM»
<%for (Com.gceGroupSignalSort()){%>
#define <%_shortname%> <%gceHandleId()%>
<%}%>
«ENDREM»
«FOREACH gceGroupSignalSort() AS iter - »
#define «iter.shortName» «gceHandleId(iter)»
«ENDFOREACH -»
/* Signal groups symbolic names */«REM»
<%for (Com.gceSignalGroupSort()){%>
#define <%_shortname%> <%gceHandleId()%>
<%}%>
«ENDREM»
«FOREACH gceSignalGroupSort() AS iter -»
#define «iter.shortName» «gceHandleId(iter)»
«ENDFOREACH -»
/* IPdu groups symbolic names */«REM»
<%for (Com.gceIPDuGroupSort()){%>
#define <%_shortname%> <%gceHandleId()%>
<%}%>
«ENDREM»
«FOREACH gceIPDuGroupSort() AS iter -»
#define «iter.shortName» «iter.gceHandleId()»
«ENDFOREACH -»
/* Rx IPdus symbolic names */«REM»
<%for (Com.gceRxIPduSort()){%>
#define <%_shortname%> <%gceRxHandleId()%>
<%}%>
«ENDREM»
«FOREACH gceRxIPduSort() AS iter -»
#define «iter.shortName» «iter.gceRxHandleId()»
«ENDFOREACH -»
/* Tx IPdus symbolic names */«REM»
<%for (Com.gceTxIPdu()){%>
#define <%_shortname%> <%gceTxIPduHandleId()%>
<%}%>
«ENDREM»
«FOREACH gceTxIPdu() AS iter -»
#define «iter.shortName» «iter.gceTxIPduHandleId()»
«ENDFOREACH -»
«ENDDEFINE»

«DEFINE macros FOR ARRoot::Com -»
/*****************************************************************************/
/* DEFINITION OF MACROS                                                      */
/*****************************************************************************/
/* Configuration constants */
/* Preprocessor switch to enable/disable the API to read out the modules
   version information. Possible values : STD_ON / STD_OFF */«REM»
<%if (Com.ComGeneral.ComVersionInfoApi.isTrue){%>
#define COM_VERSION_INFO_API        STD_ON
<%}else{%>
#define COM_VERSION_INFO_API        STD_OFF
<%}%>
«ENDREM»
«IF ComGeneral.ComVersionInfoApi.value -»
#define COM_VERSION_INFO_API        STD_ON
«ELSE -»
#define COM_VERSION_INFO_API        STD_OFF
«ENDIF -»«REM»
<%if (Com.ComGeneral.ComConfigurationUseDet.isTrue){%>
#define COM_DEV_ERROR_DETECT        GENERAL_DEV_ERROR_DETECT
<%}else{%>
#define COM_DEV_ERROR_DETECT        GENERAL_DEV_ERROR_DETECT
<%}%>
«ENDREM»
#define COM_DEV_ERROR_DETECT        «IF ComGeneral.ComConfigurationUseDet.value»GENERAL_DEV_ERROR_DETECT«ELSE»GENERAL_DEV_ERROR_DETECT«ENDIF»
«REM»
#define COM_CONFIGURATION_ID        0x<%Com.gceConfigurationIdHexa()%>
«ENDREM»
#define COM_CONFIGURATION_ID        0x«gceConfigurationIdHexa()»
«REM»
#define COM_CONFIGURATION_ID        0x«this.gceConfigurationIdHexa()»
#define COM_CONFIGURATION_ID        0x«gceConfigurationIdHexa(this)»
«ENDREM»
#define COM_PRE_COMPILE             0
#define COM_LINK_TIME 	            1
#define COM_POST_BUILD 	            2
#define COM_CONFIG_VARIANT          COM_PRE_COMPILE

/* Macros for access to configuration parameters */
#define Com_iGetConfigurationId                             (COM_CONFIGURATION_ID)

#define Com_iGetRxIpdu_FirstTimeout(PduIndex)               (Com_RxIpduConfig[PduIndex].FirstTimeoutFactor)
#define Com_iGetRxIpdu_Timeout(PduIndex)                    (Com_RxIpduConfig[PduIndex].TimeoutFactor)
#define Com_iGetRxIpdu_FirstInIpduIdx(PduIndex)             (Com_RxIpduConfig[PduIndex].FirstElementInIpduIdx)
#define Com_iGetRxIpdu_NextInGroupIdx(PduIndex)             (Com_RxIpduConfig[PduIndex].NextIpduInGroupIdx)
#define Com_iGetRxIpdu_ValuePtr(PduIndex)                   (Com_RxIpduConfig[PduIndex].ValuePtr)
#define Com_iGetRxIpdu_Length(PduIndex)                     (Com_RxIpduConfig[PduIndex].Length)
#define Com_iGetRxIpdu_SgProcessing(PduIndex)               (Com_RxIpduConfig[PduIndex].SignalProcessing)
#define Com_iGetRxIpdu_FirstInIpduType(PduIndex)            (Com_RxIpduConfig[PduIndex].FirstElementInIpduType)

#define Com_iGetTxIpdu_FirstTimeout(PduIndex)               (Com_TxIpduConfig[PduIndex].FirstTimeoutFactor)
#define Com_iGetTxIpdu_Timeout(PduIndex)                    (Com_TxIpduConfig[PduIndex].TimeoutFactor)
#define Com_iGetTxIpdu_MDT(PduIndex)                        (Com_TxIpduConfig[PduIndex].MinimumDelayTimeFactor)
#define Com_iGetTxIpdu_TrModeIdx(PduIndex)                  (Com_TxIpduConfig[PduIndex].TransmissionModeIdx)
#define Com_iGetTxIpdu_FirstInIpduIdx(PduIndex)             (Com_TxIpduConfig[PduIndex].FirstElementInIpduIdx)
#define Com_iGetTxIpdu_ValuePtr(PduIndex)                   (Com_TxIpduConfig[PduIndex].ValuePtr)
#define Com_iGetTxIpdu_NextInGroupIdx(PduIndex)             (Com_TxIpduConfig[PduIndex].NextIpduInGroupIdx)
#define Com_iGetTxIpdu_DefaultValue(PduIndex)               (Com_TxIpduConfig[PduIndex].DefaultValue)
#define Com_iGetTxIpdu_Length(PduIndex)                     (Com_TxIpduConfig[PduIndex].Length)
#define Com_iGetTxIpdu_SgProcessing(PduIndex)               (Com_TxIpduConfig[PduIndex].SignalProcessing)
#define Com_iGetTxIpdu_TMSalwaysTRUE(PduIndex)              (Com_TxIpduConfig[PduIndex].TMSalwaysTRUE)
#define Com_iGetTxIpdu_FirstInIpduType(PduIndex)            (Com_TxIpduConfig[PduIndex].FirstElementInIpduType)

#define Com_iGetIpduGr_FirstInGroupIdx(PduGroupIndex)       (Com_IpduGroupConfig[PduGroupIndex].FirstElementInGroupIdx)
#define Com_iGetIpduGr_NextInGroupIdx(PduGroupIndex)        (Com_IpduGroupConfig[PduGroupIndex].NextIpduGroupInGroupIdx)
#define Com_iGetIpduGr_Direction(PduGroupIndex)             (Com_IpduGroupConfig[PduGroupIndex].Direction)
#define Com_iGetIpduGr_ElementType(PduGroupIndex)           (Com_IpduGroupConfig[PduGroupIndex].ElementType)

#define Com_iGetRxSg_OldValuePtr(SignalIndex)               (Com_RxSignalConfig[SignalIndex].OldValuePtr)
#define Com_iGetRxSg_InitValuePtr(SignalIndex)              (Com_RxSignalConfig[SignalIndex].InitValuePtr)
#define Com_iGetRxSg_BitPosition(SignalIndex)               (Com_RxSignalConfig[SignalIndex].BitPosition)
#define Com_iGetRxSg_UpdBitPosition(SignalIndex)            (Com_RxSignalConfig[SignalIndex].UpdateBitPosition)
#define Com_iGetRxSg_NextInIpduIdx(SignalIndex)             (Com_RxSignalConfig[SignalIndex].NextElementInIpduIdx)
#define Com_iGetRxSg_IpduIdx(SignalIndex)                   (Com_RxSignalConfig[SignalIndex].IpduIdx)
#define Com_iGetRxSg_IsGatewayed(SignalIndex)               (Com_RxSignalConfig[SignalIndex].IsGatewayed)

#define Com_iGetTxSg_OldValuePtr(SignalIndex)               (Com_TxSignalConfig[SignalIndex].OldValuePtr)
#define Com_iGetTxSg_InitValuePtr(SignalIndex)              (Com_TxSignalConfig[SignalIndex].InitValuePtr)
#define Com_iGetTxSg_BitPosition(SignalIndex)               (Com_TxSignalConfig[SignalIndex].BitPosition)
#define Com_iGetTxSg_UpdBitPosition(SignalIndex)            (Com_TxSignalConfig[SignalIndex].UpdateBitPosition)
#define Com_iGetTxSg_TrProperty(SignalIndex)                (Com_TxSignalConfig[SignalIndex].TransferProperty)
#define Com_iGetTxSg_NextInIpduIdx(SignalIndex)             (Com_TxSignalConfig[SignalIndex].NextElementInIpduIdx)
#define Com_iGetTxSg_IpduIdx(SignalIndex)                   (Com_TxSignalConfig[SignalIndex].IpduIdx)

#define Com_iGetRxSgGr_UpdBitPosition(SignalGroupIndex)     (Com_RxSignalGroupConfig[SignalGroupIndex].UpdateBitPosition)
#define Com_iGetRxSgGr_NextInIpduIdx(SignalGroupIndex)      (Com_RxSignalGroupConfig[SignalGroupIndex].NextElementInIpduIdx)
#define Com_iGetRxSgGr_NextInIpduType(SignalGroupIndex)     (Com_RxSignalGroupConfig[SignalGroupIndex].NextElementInIpduType)
#define Com_iGetRxSgGr_IpduIdx(SignalGroupIndex)            (Com_RxSignalGroupConfig[SignalGroupIndex].IpduIdx)
#define Com_iGetRxSgGr_IsGatewayed(SignalGroupIndex)        (Com_RxSignalGroupConfig[SignalGroupIndex].IsGatewayed)

#define Com_iGetTxSgGr_UpdBitPosition(SignalGroupIndex)     (Com_TxSignalGroupConfig[SignalGroupIndex].UpdateBitPosition)
#define Com_iGetTxSgGr_TrProperty(SignalGroupIndex)         (Com_TxSignalGroupConfig[SignalGroupIndex].TransferProperty)
#define Com_iGetTxSgGr_NextInIpduIdx(SignalGroupIndex)      (Com_TxSignalGroupConfig[SignalGroupIndex].NextElementInIpduIdx)
#define Com_iGetTxSgGr_NextInIpduType(SignalGroupIndex)     (Com_TxSignalGroupConfig[SignalGroupIndex].NextElementInIpduType)
#define Com_iGetTxSgGr_IpduIdx(SignalGroupIndex)            (Com_TxSignalGroupConfig[SignalGroupIndex].IpduIdx)

#define Com_iGetRxGrSg_OldValuePtr(SignalIndex)             (Com_RxGroupSignalConfig[SignalIndex].OldValuePtr)
#define Com_iGetRxGrSg_InitValuePtr(SignalIndex)            (Com_RxGroupSignalConfig[SignalIndex].InitValuePtr)
#define Com_iGetRxGrSg_BitPosition(SignalIndex)             (Com_RxGroupSignalConfig[SignalIndex].BitPosition)
#define Com_iGetRxGrSg_IsGatewayed(SignalIndex)             (Com_RxGroupSignalConfig[SignalIndex].IsGatewayed)

#define Com_iGetTxGrSg_OldValuePtr(SignalIndex)             (Com_TxGroupSignalConfig[SignalIndex].OldValuePtr)
#define Com_iGetTxGrSg_InitValuePtr(SignalIndex)            (Com_TxGroupSignalConfig[SignalIndex].InitValuePtr)
#define Com_iGetTxGrSg_BitPosition(SignalIndex)             (Com_TxGroupSignalConfig[SignalIndex].BitPosition)

#define Com_iGetSignalRouteTable                            Com_SignalRoute
#define Com_iGetSignalGroupRouteTable                       Com_SignalGroupRoute
#define Com_iGetGroupSignalRouteTable                       Com_GroupSignalRoute
#define Com_iGetTransmissionModeTable                       Com_TransmissionMode

/* Autosar release version abstraction macros */«REM»
<%gceReleaseAbstraction()%>
«ENDREM»
«EXPAND ComStatic::gceReleaseAbstraction -»
/* Macro for access to RAM info */
#define Com_iTxIpdu_MDTimer(IpduIndex)                      (Com_iTxIPduMDTimer[Com_TxIpduConfig[IpduIndex].TimerIndex[3]])
#define Com_iTxIpdu_DeadlineTimer(IpduIndex)                (Com_iTxIPduDeadlineTimer[Com_TxIpduConfig[IpduIndex].TimerIndex[0]])
#define Com_iTxIpdu_NextPeriodicTimer(IpduIndex)            (Com_iTxIPduPeriodicTimer[Com_TxIpduConfig[IpduIndex].TimerIndex[2]])
#define Com_iTxIpdu_NxtDirectSendTimer(IpduIndex)           (Com_iTxIPduDirectTimer[Com_TxIpduConfig[IpduIndex].TimerIndex[1]])
#define Com_iTxIpdu_RepetNumber(IpduIndex)                  (Com_iTxIPduRepetNumber[Com_TxIpduConfig[IpduIndex].TimerIndex[1]])
#define Com_iTxIpdu_MDTNextIdx(IpduIndex)                   (Com_iTxIPduMDTNextIdx[Com_TxIpduConfig[IpduIndex].TimerIndex[3]])
#define Com_iTxIpdu_DeadlineNextIdx(IpduIndex)              (Com_iTxIPduDeadlineNextIdx[Com_TxIpduConfig[IpduIndex].TimerIndex[0]])
#define Com_iTxIpdu_PeriodicNextIdx(IpduIndex)              (Com_iTxIPduPeriodicNextIdx[Com_TxIpduConfig[IpduIndex].TimerIndex[2]])
#define Com_iTxIpdu_DirectNextIdx(IpduIndex)                (Com_iTxIPduDirectNextIdx[Com_TxIpduConfig[IpduIndex].TimerIndex[1]])
#define Com_iTxIpdu_NextConfirmIpduIdx(IpduIndex)           (Com_iTxIpduNextConfirmIpduIdx[IpduIndex])
#define Com_iTxIpdu_GetTransmitCycle(IpduIndex)             (((Com_iTxIPduTransmitCycle[((IpduIndex)>>3)])>>((IpduIndex)&0x07))&0x01)
#define Com_iTxIpdu_SetTransmitCycle(IpduIndex)             (Com_iTxIPduTransmitCycle[((IpduIndex)>>3)] = (uint8)((Com_iTxIPduTransmitCycle[((IpduIndex)>>3)])|((uint8)(0x01<<((uint8)((IpduIndex)&0x07))))))
#define Com_iTxIpdu_TransmitCycle                           (Com_iTxIPduTransmitCycle)

#define Com_iRxIpdu_DeadlineTimer(IpduIndex)                (Com_iRxIPduDeadlineTimer[Com_RxIpduConfig[IpduIndex].DeadlineTimerIndex])
#define Com_iRxIpdu_NextDeadlineIdx(IpduIndex)              (Com_iRxIPduDeadlineNextIdx[Com_RxIpduConfig[IpduIndex].DeadlineTimerIndex])
#define Com_iRxIpdu_PrevDeadlineIdx(IpduIndex)              (Com_iRxIPduDeadlinePreviousIdx[Com_RxIpduConfig[IpduIndex].DeadlineTimerIndex])
#define Com_iRxIpdu_NextReceivedIdx(IpduIndex)              (Com_iRxIpduNextReceivedIdx[IpduIndex])

#define Com_iRxSg_DeadlineTimer(SignalIndex)                (Com_iRxSgDeadlineTimer[Com_RxSignalConfig[SignalIndex].DeadlineTimerIndex])
#define Com_iRxSg_NextDeadlineIdx(SignalIndex)              (Com_iRxSgDeadlineNextIdx[Com_RxSignalConfig[SignalIndex].DeadlineTimerIndex])
#define Com_iRxSg_PrevDeadlineIdx(SignalIndex)              (Com_iRxSgDeadlinePreviousIdx[Com_RxSignalConfig[SignalIndex].DeadlineTimerIndex])
#define Com_iRxSg_NextRoutingIdx(SignalIndex)               (Com_iRxSgNextRoutingIdx[Com_RxSignalConfig[SignalIndex].RoutingListIndex])
#define Com_iRxSg_GetValuePtrIsInit(SignalIndex)            (((Com_iCurrentRxSgValuePtrIsInit[((SignalIndex)>>3)])>>((SignalIndex)&0x07))&0x01)
#define Com_iRxSg_SetValuePtrIsInit(SignalIndex)            (Com_iCurrentRxSgValuePtrIsInit[((SignalIndex)>>3)] |= ((uint8)(0x01<<((uint8)((SignalIndex)&0x07)))))
#define Com_iRxSg_SetValuePtrIsNormal(SignalIndex)          (Com_iCurrentRxSgValuePtrIsInit[((SignalIndex)>>3)] &= ((uint8)(~((uint8)(0x01<<((uint8)((SignalIndex)&0x07)))))))

#define Com_iTxSg_GetFilterResult(SignalIndex)              (((Com_iTxSgFilterResult[((SignalIndex)>>3)])>>((SignalIndex)&0x07))&0x01)
#define Com_iTxSg_SetFilterResult(SignalIndex, Value)       (Com_iTxSgFilterResult[((SignalIndex)>>3)] = ((Com_iTxSgFilterResult[((SignalIndex)>>3)])&((uint8)(~(0x01U<<((SignalIndex)&0x07U))))) + ((Value)<<((SignalIndex)&0x07U)))

#define Com_iRxSgGr_DeadlineTimer(SignalGroupIndex)         (Com_iRxSgGrDeadlineTimer[Com_RxSignalGroupConfig[SignalGroupIndex].DeadlineTimerIndex])
#define Com_iRxSgGr_NextDeadlineIdx(SignalGroupIndex)       (Com_iRxSgGrDeadlineNextIdx[Com_RxSignalGroupConfig[SignalGroupIndex].DeadlineTimerIndex])
#define Com_iRxSgGr_PrevDeadlineIdx(SignalGroupIndex)       (Com_iRxSgGrDeadlinePreviousIdx[Com_RxSignalGroupConfig[SignalGroupIndex].DeadlineTimerIndex])
#define Com_iRxSgGr_NextRoutingIdx(SignalGroupIndex)        (Com_iRxSgGrNextRoutingIdx[Com_RxSignalGroupConfig[SignalGroupIndex].RoutingListIndex])

#define Com_iRxGrSg_NextRoutingIdx(SignalIndex)             (Com_iRxGrSgNextRoutingIdx[Com_RxGroupSignalConfig[SignalIndex].RoutingListIndex])
#define Com_iRxGrSg_GetValuePtrIsInit(SignalIndex)          (((Com_iCurrentRxGrSgValuePtrIsInit[((SignalIndex)>>3)])>>((SignalIndex)&0x07))&0x01)
#define Com_iRxGrSg_SetValuePtrIsInit(SignalIndex)          (Com_iCurrentRxGrSgValuePtrIsInit[((SignalIndex)>>3)] |= ((uint8)(0x01<<((uint8)((SignalIndex)&0x07)))))
#define Com_iRxGrSg_SetValuePtrIsNormal(SignalIndex)        (Com_iCurrentRxGrSgValuePtrIsInit[((SignalIndex)>>3)] &= ((uint8)(~(0x01U<<((SignalIndex)&0x07U)))))

#define Com_iTxGrSg_GetFilterResult(SignalIndex)            (((Com_iTxGrSgFilterResult[((SignalIndex)>>3)])>>((SignalIndex)&0x07))&0x01)
#define Com_iTxGrSg_SetFilterResult(SignalIndex, Value)     (Com_iTxGrSgFilterResult[((SignalIndex)>>3)] = ((Com_iTxGrSgFilterResult[((SignalIndex)>>3)])&((uint8)(~(0x01U<<((SignalIndex)&0x07U))))) + ((Value)<<((SignalIndex)&0x07U)))

#define Com_iFilterIdx_FilterOccurence(FilterIndex)         (Com_iFilterOccurence[Com_FilterConfig[FilterIndex].OccurenceIdx])

/* Code optimization defines */«REM»
<%if (varGet("RxIPduNumber") == 0){%>
#define COM_RX_IPDU_SUPPORT             STD_OFF
<%}else{%>
#define COM_RX_IPDU_SUPPORT             STD_ON
<%}%>
«ENDREM»
«IF gceGetRxIPduNumber() == 0 -»
#define COM_RX_IPDU_SUPPORT             STD_OFF
«ELSE -»
#define COM_RX_IPDU_SUPPORT             STD_ON
«ENDIF -»«REM»
<%if (varGet("TxIPduNumber") == 0){%>
#define COM_TX_IPDU_SUPPORT             STD_OFF
<%}else{%>
#define COM_TX_IPDU_SUPPORT             STD_ON
<%}%>
«ENDREM»#define COM_TX_IPDU_SUPPORT             «IF intVarGet("TxIPduNumber") == 0 -»STD_OFF«ELSE -»STD_ON«ENDIF -»
«REM»
<%if (varGet("RxSignalNumber") == 0){%>
#define COM_RX_SIGNAL_SUPPORT           STD_OFF
<%}else{%>
#define COM_RX_SIGNAL_SUPPORT           STD_ON
<%}%>
«ENDREM»
#define COM_RX_SIGNAL_SUPPORT           «IF intVarGet("RxSignalNumber") == 0 -»STD_OFF«ELSE -»STD_ON«ENDIF -»
«REM»
<%if (varGet("TxSignalNumber") == 0){%>
#define COM_TX_SIGNAL_SUPPORT           STD_OFF
<%}else{%>
#define COM_TX_SIGNAL_SUPPORT           STD_ON
<%}%>
«ENDREM»
#define COM_TX_SIGNAL_SUPPORT           «IF intVarGet("TxSignalNumber") == 0 -»STD_OFF«ELSE -»STD_ON«ENDIF -»
«REM»
<%if (varGet("RxSignalGroupNumber") == 0){%>
#define COM_RX_SIGNAL_GROUP_SUPPORT     STD_OFF
<%}else{%>
#define COM_RX_SIGNAL_GROUP_SUPPORT     STD_ON
<%}%>
«ENDREM»
#define COM_RX_SIGNAL_GROUP_SUPPORT     «IF intVarGet("RxSignalGroupNumber") == 0 -»STD_OFF«ELSE -»STD_ON«ENDIF -»
«REM»
<%if (varGet("TxSignalGroupNumber") == 0){%>
#define COM_TX_SIGNAL_GROUP_SUPPORT     STD_OFF
<%}else{%>
#define COM_TX_SIGNAL_GROUP_SUPPORT     STD_ON
<%}%>
«ENDREM»
#define COM_TX_SIGNAL_GROUP_SUPPORT     «IF intVarGet("TxSignalGroupNumber") == 0 -»STD_OFF«ELSE -»STD_ON«ENDIF -»
«REM»
<%if (varGet("RxSignalFilterNumber") == 0){%>
#define COM_RX_SIGNAL_FILTERING         STD_OFF
<%}else{%>
#define COM_RX_SIGNAL_FILTERING         STD_ON
<%}%>
«ENDREM»
#define COM_RX_SIGNAL_FILTERING         «IF intVarGet("RxSignalFilterNumber") == 0 -»STD_OFF«ELSE -»STD_ON«ENDIF -»
«REM»
<%if (varGet("TxSignalFilterNumber") == 0){%>
#define COM_TX_SIGNAL_FILTERING         STD_OFF
<%}else{%>
#define COM_TX_SIGNAL_FILTERING         STD_ON
<%}%>
«ENDREM»
#define COM_TX_SIGNAL_FILTERING         «IF intVarGet("TxSignalFilterNumber") == 0 -»STD_OFF«ELSE -»STD_ON«ENDIF -»
«REM»
<%if (varGet("TxGroupSignalFilterNumber") == 0){%>
#define COM_GROUP_SIGNAL_FILTERING      STD_OFF
<%}else{%>
#define COM_GROUP_SIGNAL_FILTERING      STD_ON
<%}%>
«ENDREM»
#define COM_GROUP_SIGNAL_FILTERING      «IF intVarGet("TxGroupSignalFilterNumber") == 0 -»STD_OFF«ELSE -»STD_ON«ENDIF -»
«REM»
<%if (varGet("RxSignalFilterOccNumber") == 0){%>
#define COM_RX_SIGNAL_FILTER_OCC        STD_OFF
<%}else{%>
#define COM_RX_SIGNAL_FILTER_OCC        STD_ON
<%}%>
«ENDREM»
#define COM_RX_SIGNAL_FILTER_OCC        «IF intVarGet("RxSignalFilterOccNumber") == 0 -»STD_OFF«ELSE -»STD_ON«ENDIF -»
«REM»
<%if (varGet("TxSignalFilterOccNumber") == 0){%>
#define COM_TX_SIGNAL_FILTER_OCC        STD_OFF
<%}else{%>
#define COM_TX_SIGNAL_FILTER_OCC        STD_ON
<%}%>
«ENDREM»
#define COM_TX_SIGNAL_FILTER_OCC        «IF intVarGet("TxSignalFilterOccNumber") == 0 -»STD_OFF«ELSE -»STD_ON«ENDIF -»
«REM»
<%if (varGet("TxGroupSignalFilterOccNumber") == 0){%>
#define COM_GROUP_SIGNAL_FILTER_OCC     STD_OFF
<%}else{%>
#define COM_GROUP_SIGNAL_FILTER_OCC     STD_ON
<%}%>
«ENDREM»
#define COM_GROUP_SIGNAL_FILTER_OCC     «IF intVarGet("TxGroupSignalFilterOccNumber") == 0 -»STD_OFF«ELSE -»STD_ON«ENDIF -»
«REM»
<%if ((varGet("TxSignalFilterNumber")+varGet("TxGroupSignalFilterNumber")) == 0){%>
#define COM_TMS                         STD_OFF
<%}else{%>
#define COM_TMS                         STD_ON
<%}%>
«ENDREM»
#define COM_TMS                         «IF (intVarGet("TxGroupSignalFilterOccNumber") + intVarGet("TxGroupSignalFilterNumber")) == 0 -»STD_OFF«ELSE -»STD_ON«ENDIF -»
«REM»
<%if (varGet("SignalRouteNumber") == 0){%>
#define COM_SIGNAL_ROUTING              STD_OFF
<%}else{%>
#define COM_SIGNAL_ROUTING              STD_ON
<%}%>
«ENDREM»
#define COM_SIGNAL_ROUTING              «IF intVarGet("SignalRouteNumber") == 0 -»STD_OFF«ELSE -»STD_ON«ENDIF -»
«REM»
<%if (varGet("SignalGroupRouteNumber") == 0){%>
#define COM_SIGNAL_GROUP_ROUTING        STD_OFF
<%}else{%>
#define COM_SIGNAL_GROUP_ROUTING        STD_ON
<%}%>
«ENDREM»
#define COM_SIGNAL_GROUP_ROUTING        «IF intVarGet("SignalGroupRouteNumber") == 0 -»STD_OFF«ELSE -»STD_ON«ENDIF -»
«REM»
<%if (varGet("GroupSignalRouteNumber") == 0){%>
#define COM_GROUP_SIGNAL_ROUTING        STD_OFF
<%}else{%>
#define COM_GROUP_SIGNAL_ROUTING        STD_ON
<%}%>
«ENDREM»
#define COM_GROUP_SIGNAL_ROUTING        «IF intVarGet("GroupSignalRouteNumber") == 0 -»STD_OFF«ELSE -»STD_ON«ENDIF -»
«REM»
<%if (varGet("RxIPduDeadlineNumber") == 0){%>
#define COM_RX_IPDU_DEADLINE            STD_OFF
<%}else{%>
#define COM_RX_IPDU_DEADLINE            STD_ON
<%}%>
«ENDREM»
#define COM_RX_IPDU_DEADLINE            «IF intVarGet("RxIPduDeadlineNumber") == 0 -»STD_OFF«ELSE -»STD_ON«ENDIF -»
«REM»
<%if (varGet("TxIPduDeadlineNumber") == 0){%>
#define COM_TX_IPDU_DEADLINE            STD_OFF
<%}else{%>
#define COM_TX_IPDU_DEADLINE            STD_ON
<%}%>
«ENDREM»
#define COM_TX_IPDU_DEADLINE            «IF intVarGet("TxIPduDeadlineNumber") == 0 -»STD_OFF«ELSE -»STD_ON«ENDIF -»
«REM»
<%if (varGet("TxIPduDirectTimerNumber") == 0){%>
#define COM_TX_IPDU_DIRECT              STD_OFF
<%}else{%>
#define COM_TX_IPDU_DIRECT              STD_ON
<%}%>
«ENDREM»
#define COM_TX_IPDU_DIRECT              «IF intVarGet("TxIPduDirectTimerNumber") == 0 -»STD_OFF«ELSE -»STD_ON«ENDIF -»
«REM»
<%if (varGet("TxIPduPeriodicTimerNumber") == 0){%>
#define COM_TX_IPDU_PERIODIC            STD_OFF
<%}else{%>
#define COM_TX_IPDU_PERIODIC            STD_ON
<%}%>
«ENDREM»
#define COM_TX_IPDU_PERIODIC            «IF intVarGet("TxIPduPeriodicTimerNumber") == 0 -»STD_OFF«ELSE -»STD_ON«ENDIF -»
«REM»
<%if (varGet("TxIPduMDTimerNumber") == 0){%>
#define COM_TX_IPDU_MDT                 STD_OFF
<%}else{%>
#define COM_TX_IPDU_MDT                 STD_ON
<%}%>
«ENDREM»
#define COM_TX_IPDU_MDT                 «IF intVarGet("TxIPduMDTimerNumber") == 0 -»STD_OFF«ELSE -»STD_ON«ENDIF -»
«REM»
<%if (varGet("RxSgDeadlineNumber") == 0){%>
#define COM_RX_SIGNAL_DEADLINE          STD_OFF
<%}else{%>
#define COM_RX_SIGNAL_DEADLINE          STD_ON
<%}%>
«ENDREM»
#define COM_RX_SIGNAL_DEADLINE          «IF intVarGet("RxSgDeadlineNumber") == 0 -»STD_OFF«ELSE -»STD_ON«ENDIF -»
«REM»
<%if (varGet("RxSgGrDeadlineNumber") == 0){%>
#define COM_RX_SIGNAL_GROUP_DEADLINE    STD_OFF
<%}else{%>
#define COM_RX_SIGNAL_GROUP_DEADLINE    STD_ON
<%}%>
«ENDREM»
#define COM_RX_SIGNAL_GROUP_DEADLINE    «IF intVarGet("RxSgGrDeadlineNumber") == 0 -»STD_OFF«ELSE -»STD_ON«ENDIF -»

/* Containers number */«REM»
#define Com_RxSignalNumber              <%varGet("RxSignalNumber")%>
#define Com_TxSignalNumber              <%varGet("TxSignalNumber")%>
#define Com_RxGroupSignalNumber         <%varGet("RxGroupSignalNumber")%>
#define Com_TxGroupSignalNumber         <%varGet("TxGroupSignalNumber")%>
#define Com_RxSignalGroupNumber         <%varGet("RxSignalGroupNumber")%>
#define Com_TxSignalGroupNumber         <%varGet("TxSignalGroupNumber")%>
#define Com_RxIpduNumber                <%varGet("RxIPduNumber")%>
#define Com_TxIpduNumber                <%varGet("TxIPduNumber")%>
«ENDREM»
#define Com_RxSignalNumber              «intVarGet("RxSignalNumber")»
#define Com_TxSignalNumber              «intVarGet("TxSignalNumber")»
#define Com_RxGroupSignalNumber         «intVarGet("RxGroupSignalNumber")»
#define Com_TxGroupSignalNumber         «intVarGet("TxGroupSignalNumber")»
#define Com_RxSignalGroupNumber         «intVarGet("RxSignalGroupNumber")»
#define Com_TxSignalGroupNumber         «intVarGet("TxSignalGroupNumber")»
#define Com_RxIpduNumber                «intVarGet("RxIPduNumber")»
#define Com_TxIpduNumber                «intVarGet("TxIPduNumber")»«REM»
<%if (varGet("SignalRouteNumber") > 0){%>
#define Com_SignalRouteNumber           <%varGet("SignalRouteNumber")%>
<%}%>
«ENDREM»
«IF varGet("SignalRouteNumber") > 0 -»
#define Com_SignalRouteNumber           «intVarGet("SignalRouteNumber")»
«ENDIF -»
«REM»
<%if (varGet("SignalGroupRouteNumber") > 0){%>
#define Com_SignalGroupRouteNumber      <%varGet("SignalGroupRouteNumber")%>
<%}%>
«ENDREM»
«IF varGet("SignalGroupRouteNumber") > 0 -»
#define Com_SignalGroupRouteNumber      «intVarGet("SignalGroupRouteNumber")»
«ENDIF -»«REM»
<%if (varGet("GroupSignalRouteNumber") > 0){%>
#define Com_GroupSignalRouteNumber      <%varGet("GroupSignalRouteNumber")%>
<%}%>
«ENDREM»
«IF varGet("GroupSignalRouteNumber") > 0 -»
#define Com_GroupSignalRouteNumber      «intVarGet("GroupSignalRouteNumber")»
«ENDIF -»«REM»
<%if (varGet("AllFilterOccNumber") > 0){%>
#define Com_FilterOccurenceNumber       <%varGet("AllFilterOccNumber")%>
<%}%>
«ENDREM»
«IF varGet("AllFilterOccNumber") > 0 -»
#define Com_FilterOccurenceNumber       «intVarGet("AllFilterOccNumber")»
«ENDIF -»«REM»
<%if (Com.ComGeneral.ComConfigurationUseDet.isTrue){%>
#define Com_SignalIdMax                 <%varGet("AllSignalNumber")%>
#define Com_SignalGroupIdMax            <%varGet("AllSignalGroupNumber")%>
#define Com_IpduGroupIdMax              <%varGet("IPduGroupNumber")%>
<%}%>
«ENDREM»
«IF ComGeneral.ComConfigurationUseDet.value -»
#define Com_SignalIdMax                 «intVarGet("AllSignalNumber")»
#define Com_SignalGroupIdMax            «intVarGet("AllSignalGroupNumber")»
#define Com_IpduGroupIdMax              «intVarGet("IPduGroupNumber")»
«ENDIF -»

/* Definition of module macros */
/* Get Index */
#define Com_iGetSignalIndex(SignalId)               (Com_iSignalIndexById[SignalId])
#define Com_iGetSignalDirection(SignalId)           (((Com_iSignalDirectionById[((SignalId)>>3)])>>(SignalId&0x07))&0x01)«REM»
<%if (varGet("AllSignalGroupNumber") > 0){%>
	<%if (varGet("MaxSingleSignalIndex") > 0){%>
#define Com_iGetSignalGrouping(SignalId)            (((Com_iSignalGroupingById[((SignalId)>>3)])>>(SignalId&0x07))&0x01)
	<%}else{%>
#define Com_iGetSignalGrouping(SignalId)            (COM_GROUP_SIGNAL)
	<%}%>
<%}else{%>
#define Com_iGetSignalGrouping(SignalId)            (COM_SIGNAL)
<%}%>
«ENDREM»
«IF intVarGet("AllSignalGroupNumber") > 0 -»
	«IF intVarGet("MaxSingleSignalIndex") > 0 -»
#define Com_iGetSignalGrouping(SignalId)            (((Com_iSignalGroupingById[((SignalId)>>3)])>>(SignalId&0x07))&0x01)
	«ELSE -»
#define Com_iGetSignalGrouping(SignalId)            (COM_GROUP_SIGNAL)
	«ENDIF -»
«ELSE -»
#define Com_iGetSignalGrouping(SignalId)            (COM_SIGNAL)
«ENDIF -»
«REM»
<%if (varGet("AllSignalGroupNumber") > 0){%>
#define Com_iGetSignalGroupDirection(SignalGroupId) (((Com_iSignalGroupDirectionById[((SignalGroupId)>>3)])>>(SignalGroupId&0x07))&0x01)
#define Com_iGetSignalGroupIndex(SignalGroupId)     (Com_iSignalGroupIndexById[SignalGroupId])
<%}%>
«ENDREM»
«IF intVarGet("AllSignalGroupNumber") > 0 -»
#define Com_iGetSignalGroupDirection(SignalGroupId) (((Com_iSignalGroupDirectionById[((SignalGroupId)>>3)])>>(SignalGroupId&0x07))&0x01)
#define Com_iGetSignalGroupIndex(SignalGroupId)     (Com_iSignalGroupIndexById[SignalGroupId])
«ENDIF -»
#define Com_iGetIpduGroupIndex(IpduGroupId)         (IpduGroupId)
#define Com_iGetRxIpduIndex(IpduId)                 ((Com_IPduIndexType)(IpduId))
«REM»
<%if (varGet("TxIPduNumber") > 0){%>
#define COM_IGETTXIPDUINDEX_FUNCTION                STD_ON
<%}else{%>
#define COM_IGETTXIPDUINDEX_FUNCTION                STD_OFF
<%}%>
«ENDREM»
«IF intVarGet("TxIPduNumber") > 0 -»
#define COM_IGETTXIPDUINDEX_FUNCTION                STD_ON
«ELSE -»
#define COM_IGETTXIPDUINDEX_FUNCTION                STD_OFF
«ENDIF -»
/* Get Id */
#define Com_iGetRxIpduId(IpduIndex)                 (IpduIndex)
#define Com_iGetTxIpduId(IpduIndex)                 (Com_TxIpduConfig[IpduIndex].HandleId)
/* Definition of module constants */
/* Max length of Ipdu */
#define COM_IPDU_MAX_LENGTH				254
/* constants for update bit management */
#define COM_MAX_UPDATE_BIT_POSITION     2039
#define COM_NO_UPDATE_BIT               2040
/* constants for chained lists */
#define COM_RX_IPDU_INDEX_NUMBER        3
#define COM_TX_IPDU_INDEX_NUMBER        9
#define COM_RX_SIGNAL_INDEX_NUMBER      3

/* Definition of type constants */
/* Ipdu Signal Processing Type */
#define COM_IMMEDIATE                   0
#define COM_DEFERED                     1
/* Ipdu Group Property Type */
#define COM_SENT                        0
#define COM_RECEIVED                    1
/* Ipdu Group Element Type */
#define COM_IPDU                        0
#define COM_IPDU_GROUP                  1
/* Signal Endianness Type */
#define COM_BIG_ENDIAN                  0
#define COM_LITTLE_ENDIAN               1
#define COM_OPAQUE                      2
/* Rx Data Timeout Substitution Action Type */
#define COM_NO_REPLACE                  0
#define COM_REPLACE                     1
/* Data Invalid Action Type */
#define COM_NOTIFY                      0
#define COM_REPLACE_DATA                1
/* Signal Transfer Property Type */
#define COM_TRIGGERED                   0
#define COM_PENDING                     1
/* Ipdu Element Type */
#define COM_SIGNAL                      0
#define COM_SIGNAL_GROUP                1
/* Com_iSignalGroupingById table constant */
#define COM_GROUP_SIGNAL                1
/* Transmission Mode Type */
#define COM_DIRECT                      0
#define COM_PERIODIC                    1
#define COM_MIXED                       2
#define COM_NONE                        3
/* Filter Algorithm Type */
#define COM_ALWAYS                      0
#define COM_NEVER                       1
#define COM_MASKED_NEW_EQUALS_X         2
#define COM_MASKED_NEW_DIFFERS_X        3
#define COM_MSK_NEW_DIFFERS_MSK_OLD     4
#define COM_NEW_IS_WITHIN               5
#define COM_NEW_IS_OUTSIDE              6
#define COM_ONE_EVERY_N                 7
«ENDDEFINE»

«DEFINE gceDefinitionOfTypes FOR ARRoot::Com»
/*****************************************************************************/
/* DEFINITION OF TYPES                                                       */
/*****************************************************************************/

«REM»
<%if (varGet("AllSignalNumber") < 256){%>
typedef uint8  Com_SignalIdType;
<%}else{%>
    <%if (varGet("AllSignalNumber") < 65536){%>
typedef uint16 Com_SignalIdType;
    <%}else{%>
typedef uint32 Com_SignalIdType;
    <%}%>
<%}%>
«ENDREM»
«IF intVarGet("AllSignalNumber") < 256 -»
typedef uint8  Com_SignalIdType;
«ELSEIF intVarGet("AllSignalNumber") < 65536 -»
typedef uint16 Com_SignalIdType;
«ELSE»
typedef uint32 Com_SignalIdType;
«ENDIF»

«REM»
<%if (varGet("AllSignalGroupNumber") < 256){%>
typedef uint8  Com_SignalGroupIdType;
<%}else{%>
    <%if (varGet("AllSignalGroupNumber") < 65536){%>
typedef uint16 Com_SignalGroupIdType;
    <%}else{%>
typedef uint32 Com_SignalGroupIdType;
    <%}%>
<%}%>
«ENDREM»
«IF intVarGet("AllSignalGroupNumber") < 256 -»
typedef uint8  Com_SignalGroupIdType;
«ELSEIF intVarGet("AllSignalGroupNumber") < 65536 -»
typedef uint16 Com_SignalGroupIdType;
«ELSE»
typedef uint32 Com_SignalGroupIdType;
«ENDIF»

typedef uint8  Com_PduGroupIdType;«REM»<%-- Number of Ipdu group is limited to 32 --%>«ENDREM»
#define COM_IPDU_GROUP_OUT_IDX          0xFF

«REM»
<%if (varGet("MaxSingleSignalIndex") < 255){%>
typedef uint8  Com_SingleSignalIndexType;
#define COM_SINGLE_SIGNAL_OUT_IDX       0xFF
<%}else{%>
    <%if (varGet("MaxSingleSignalIndex") < 65535){%>
typedef uint16 Com_SingleSignalIndexType;
#define COM_SINGLE_SIGNAL_OUT_IDX       0xFFFF
    <%}else{%>
typedef uint32 Com_SingleSignalIndexType;
#define COM_SINGLE_SIGNAL_OUT_IDX       0xFFFFFFFF
    <%}%>
<%}%>
«ENDREM»
«IF intVarGet("MaxSingleSignalIndex") < 255 -»
typedef uint8  Com_SingleSignalIndexType;
#define COM_SINGLE_SIGNAL_OUT_IDX       0xFF
«ELSEIF intVarGet("MaxSingleSignalIndex") < 65535 -»
typedef uint16 Com_SingleSignalIndexType;
#define COM_SINGLE_SIGNAL_OUT_IDX       0xFFFF
«ELSE»
typedef uint32 Com_SingleSignalIndexType;
#define COM_SINGLE_SIGNAL_OUT_IDX       0xFFFFFFFF
«ENDIF»

«REM»
<%if (varGet("MaxGroupSignalIndex") < 255){%>
typedef uint8  Com_GroupSignalIndexType;
#define COM_GROUP_SIGNAL_OUT_IDX        0xFF
<%}else{%>
    <%if (varGet("MaxGroupSignalIndex") < 65535){%>
typedef uint16 Com_GroupSignalIndexType;
#define COM_GROUP_SIGNAL_OUT_IDX        0xFFFF
    <%}else{%>
typedef uint32 Com_GroupSignalIndexType;
#define COM_GROUP_SIGNAL_OUT_IDX        0xFFFFFFFF
    <%}%>
<%}%>
«ENDREM»
«IF intVarGet("MaxGroupSignalIndex") < 255 -»
typedef uint8  Com_GroupSignalIndexType;
#define COM_GROUP_SIGNAL_OUT_IDX        0xFF
«ELSEIF intVarGet("MaxGroupSignalIndex") < 65535 -»
typedef uint16 Com_GroupSignalIndexType;
#define COM_GROUP_SIGNAL_OUT_IDX        0xFFFF
«ELSE»
typedef uint32 Com_GroupSignalIndexType;
#define COM_GROUP_SIGNAL_OUT_IDX        0xFFFFFFFF
«ENDIF»

«REM»
<%if (varGet("MaxAllSignalIndex") < 255){%>
typedef uint8  Com_AllSignalIndexType;
#define COM_ALL_SIGNAL_OUT_IDX          0xFF
<%}else{%>
    <%if (varGet("MaxAllSignalIndex") < 65535){%>
typedef uint16 Com_AllSignalIndexType;
#define COM_ALL_SIGNAL_OUT_IDX          0xFFFF
    <%}else{%>
typedef uint32 Com_AllSignalIndexType;
#define COM_ALL_SIGNAL_OUT_IDX          0xFFFFFFFF
    <%}%>
<%}%>
«ENDREM»
«IF intVarGet("MaxAllSignalIndex") < 255 -»
typedef uint8  Com_AllSignalIndexType;
#define COM_ALL_SIGNAL_OUT_IDX          0xFF
«ELSEIF intVarGet("MaxAllSignalIndex") < 65535 -»
typedef uint16 Com_AllSignalIndexType;
#define COM_ALL_SIGNAL_OUT_IDX          0xFFFF
«ELSE»
typedef uint32 Com_AllSignalIndexType;
#define COM_ALL_SIGNAL_OUT_IDX          0xFFFFFFFF
«ENDIF»

«REM»
<%if (varGet("MaxSignalGroupIndex") < 255){%>
typedef uint8  Com_SignalGroupIndexType;
#define COM_SIGNAL_GROUP_OUT_IDX        0xFF
<%}else{%>
    <%if (varGet("MaxSignalGroupIndex") < 65535){%>
typedef uint16 Com_SignalGroupIndexType;
#define COM_SIGNAL_GROUP_OUT_IDX        0xFFFF
    <%}else{%>
typedef uint32 Com_SignalGroupIndexType;
#define COM_SIGNAL_GROUP_OUT_IDX        0xFFFFFFFF
    <%}%>
<%}%>
«ENDREM»
«IF intVarGet("MaxSignalGroupIndex") < 255 -»
typedef uint8  Com_SignalGroupIndexType;
#define COM_SIGNAL_GROUP_OUT_IDX        0xFF
«ELSEIF intVarGet("MaxSignalGroupIndex") < 65535 -»
typedef uint16 Com_SignalGroupIndexType;
#define COM_SIGNAL_GROUP_OUT_IDX        0xFFFF
«ELSE»
typedef uint32 Com_SignalGroupIndexType;
#define COM_SIGNAL_GROUP_OUT_IDX        0xFFFFFFFF
«ENDIF»

«REM»
<%if (varGet("MaxNetworkSignalIndex") < 255){%>
typedef uint8  Com_NetworkSignalIndexType;
#define COM_NETWORK_SIGNAL_OUT_IDX      0xFF
<%}else{%>
    <%if (varGet("MaxNetworkSignalIndex") < 65535){%>
typedef uint16 Com_NetworkSignalIndexType;
#define COM_NETWORK_SIGNAL_OUT_IDX      0xFFFF
    <%}else{%>
typedef uint32 Com_NetworkSignalIndexType;
#define COM_NETWORK_SIGNAL_OUT_IDX      0xFFFFFFFF
    <%}%>
<%}%>
«ENDREM»
«IF intVarGet("MaxNetworkSignalIndex") < 255 -»
typedef uint8  Com_NetworkSignalIndexType;
#define COM_NETWORK_SIGNAL_OUT_IDX      0xFF
«ELSEIF intVarGet("MaxNetworkSignalIndex") < 65535 -»
typedef uint16 Com_NetworkSignalIndexType;
#define COM_NETWORK_SIGNAL_OUT_IDX      0xFFFF
«ELSE -»
typedef uint32 Com_NetworkSignalIndexType;
#define COM_NETWORK_SIGNAL_OUT_IDX      0xFFFFFFFF
«ENDIF»

«REM»
<%if (varGet("TMnumber") < 255){%>
typedef uint8  Com_TransmissionModeIndexType;
#define COM_TR_MODE_OUT_IDX             0xFF
<%}else{%>
    <%if (varGet("TMnumber") < 65535){%>
typedef uint16 Com_TransmissionModeIndexType;
#define COM_TR_MODE_OUT_IDX             0xFFFF
    <%}else{%>
typedef uint32 Com_TransmissionModeIndexType;
#define COM_TR_MODE_OUT_IDX             0xFFFFFFFF
    <%}%>
<%}%>
«ENDREM»
«IF intVarGet("TMnumber") < 255 -»
typedef uint8  Com_TransmissionModeIndexType;
#define COM_TR_MODE_OUT_IDX             0xFF
«ELSEIF intVarGet("TMnumber") < 65535 -»
typedef uint16 Com_TransmissionModeIndexType;
#define COM_TR_MODE_OUT_IDX             0xFFFF
«ELSE -»
typedef uint32 Com_TransmissionModeIndexType;
#define COM_TR_MODE_OUT_IDX             0xFFFFFFFF
«ENDIF»

«REM»
<%if (varGet("FilterNumber") < 255){%>
typedef uint8  Com_FilterIndexType;
#define COM_FILTER_OUT_IDX              0xFF
<%}else{%>
    <%if (varGet("FilterNumber") < 65535){%>
typedef uint16 Com_FilterIndexType;
#define COM_FILTER_OUT_IDX              0xFFFF
    <%}else{%>
typedef uint32 Com_FilterIndexType;
#define COM_FILTER_OUT_IDX              0xFFFFFFFF
    <%}%>
<%}%>
«ENDREM»
«IF intVarGet("FilterNumber") < 255 -»
typedef uint8  Com_FilterIndexType;
#define COM_FILTER_OUT_IDX              0xFF
«ELSEIF intVarGet("FilterNumber") < 65535 -»
typedef uint16 Com_FilterIndexType;
#define COM_FILTER_OUT_IDX              0xFFFF
«ELSE -»
typedef uint32 Com_FilterIndexType;
#define COM_FILTER_OUT_IDX              0xFFFFFFFF
«ENDIF»

«REM»
<%if (varGet("MaxIpduIndex") < 255){%>
typedef uint8  Com_IPduIndexType;
#define COM_IPDU_OUT_IDX                0xFF
<%}else{%>
    <%if (varGet("MaxIpduIndex") < 65535){%>
typedef uint16 Com_IPduIndexType;
#define COM_IPDU_OUT_IDX                0xFFFF
    <%}else{%>
typedef uint32 Com_IPduIndexType;
#define COM_IPDU_OUT_IDX                0xFFFFFFFF
    <%}%>    
<%}%>
«ENDREM»
«IF intVarGet("MaxIpduIndex") < 255 -»
typedef uint8  Com_IPduIndexType;
#define COM_IPDU_OUT_IDX                0xFF
«ELSEIF intVarGet("MaxIpduIndex") < 65535 -»
typedef uint16 Com_IPduIndexType;
#define COM_IPDU_OUT_IDX                0xFFFF
«ELSE -»
typedef uint32 Com_IPduIndexType;
#define COM_IPDU_OUT_IDX                0xFFFFFFFF
«ENDIF»

«REM»
typedef struct Com_FilterType
{
  VAR(uint<%varGet("FilterMaxValue1Bits")%>, TYPEDEF)   Mask_Period_Max;
  VAR(uint<%varGet("FilterMaxValue2Bits")%>, TYPEDEF)   X_Offset_Min;
    <%if (varGet("AllFilterOccNumber") > 0){%>
    	<%if (varGet("AllFilterOccNumber") < 256){%>
  VAR(uint8, TYPEDEF)   OccurenceIdx;
    	<%}else{%>
	        <%if (varGet("AllFilterOccNumber") < 65536){%>
  VAR(uint16, TYPEDEF)  OccurenceIdx;
        	<%}else{%>
  VAR(uint32, TYPEDEF)  OccurenceIdx;
    	    <%}%>
	    <%}%>
    <%}%>
  VAR(uint8, TYPEDEF)   Algorithm;
} Com_FilterType;
«ENDREM»
typedef struct Com_FilterType
{
  VAR(uint«varGet("FilterMaxValue1Bits")», TYPEDEF)   Mask_Period_Max;
  VAR(uint«varGet("FilterMaxValue2Bits")», TYPEDEF)   X_Offset_Min;
«IF intVarGet("AllFilterOccNumber") > 0 -»
	«IF intVarGet("AllFilterOccNumber") < 256 -»
  VAR(uint8, TYPEDEF)   OccurenceIdx;
	«ELSEIF intVarGet("AllFilterOccNumber") < 65536 -»
  VAR(uint16, TYPEDEF)  OccurenceIdx;
	«ELSE -»
  VAR(uint32, TYPEDEF)  OccurenceIdx;
    «ENDIF -»
«ENDIF»
  VAR(uint8, TYPEDEF)   Algorithm;
} Com_FilterType;

typedef struct Com_SignalRouteType
{
  VAR(Com_SingleSignalIndexType, TYPEDEF) SourceIdx;
  VAR(Com_SingleSignalIndexType, TYPEDEF) DestIdx;
} Com_SignalRouteType;

typedef struct Com_SignalGroupRouteType
{
  VAR(Com_SignalGroupIndexType, TYPEDEF) SourceIdx;
  VAR(Com_SignalGroupIndexType, TYPEDEF) DestIdx;
} Com_SignalGroupRouteType;

typedef struct Com_GroupSignalRouteType
{
  VAR(Com_GroupSignalIndexType, TYPEDEF) SourceIdx;
  VAR(Com_GroupSignalIndexType, TYPEDEF) DestIdx;
} Com_GroupSignalRouteType;

«REM»
<%if (varGet("TMnumber") > 0){%>
typedef struct Com_TransmissionModeType
{
    <%if (varGet("MaxTimePeriodFactorValue") < 256){%>
  VAR(uint8, TYPEDEF)   TimePeriodFactor;
    <%}else{%>
        <%if (varGet("MaxTimePeriodFactorValue") < 65536){%>
  VAR(uint16, TYPEDEF)  TimePeriodFactor;
        <%}else{%>
  VAR(uint32, TYPEDEF)  TimePeriodFactor;
        <%}%>
    <%}%>
    <%if (varGet("MaxTimeOffsetFactorValue") < 256){%>
  VAR(uint8, TYPEDEF)   TimeOffsetFactor;
    <%}else{%>
        <%if (varGet("MaxTimeOffsetFactorValue") < 65536){%>
  VAR(uint16, TYPEDEF)  TimeOffsetFactor;
        <%}else{%>
  VAR(uint32, TYPEDEF)  TimeOffsetFactor;
        <%}%>
    <%}%>
    <%if (varGet("MaxRepetitionPeriodFactorValue") < 256){%>
  VAR(uint8, TYPEDEF)   RepetitionPeriodFactor;
    <%}else{%>
        <%if (varGet("MaxRepetitionPeriodFactorValue") < 65536){%>
  VAR(uint16, TYPEDEF)  RepetitionPeriodFactor;
        <%}else{%>
  VAR(uint32, TYPEDEF)  RepetitionPeriodFactor;
        <%}%>
    <%}%>
  VAR(uint8, TYPEDEF)   NumberOfRepetitions;
  VAR(uint8, TYPEDEF)   Mode;
} Com_TransmissionModeType;
<%}%>
«ENDREM»
«IF intVarGet("TMnumber") > 0 -»
typedef struct Com_TransmissionModeType
{
	«IF intVarGet("MaxTimePeriodFactorValue") < 256 -»
  VAR(uint8, TYPEDEF)   TimePeriodFactor;
    «ELSEIF intVarGet("MaxTimePeriodFactorValue") < 65536 -»
  VAR(uint16, TYPEDEF)  TimePeriodFactor;
    «ELSE -»
  VAR(uint32, TYPEDEF)  TimePeriodFactor;
    «ENDIF»
    «IF intVarGet("MaxTimeOffsetFactorValue") < 256»
  VAR(uint8, TYPEDEF)   TimeOffsetFactor;
    «ELSEIF intVarGet("MaxTimeOffsetFactorValue") < 65536»
  VAR(uint16, TYPEDEF)  TimeOffsetFactor;
    «ELSE»
  VAR(uint32, TYPEDEF)  TimeOffsetFactor;
    «ENDIF»
    «IF intVarGet("MaxRepetitionPeriodFactorValue") < 256»
  VAR(uint8, TYPEDEF)   RepetitionPeriodFactor;
    «ELSEIF intVarGet("MaxRepetitionPeriodFactorValue") < 65536»
  VAR(uint16, TYPEDEF)  RepetitionPeriodFactor;
	«ELSE»
  VAR(uint32, TYPEDEF)  RepetitionPeriodFactor;
    «ENDIF»
  VAR(uint8, TYPEDEF)   NumberOfRepetitions;
  VAR(uint8, TYPEDEF)   Mode;
} Com_TransmissionModeType;
«ENDIF»


/******* I-PDU *******/

«REM»
typedef struct Com_RxIpduConfigType
{
  P2VAR(uint8, TYPEDEF, AUTOSAR_COMSTACKDATA) ValuePtr;
  VAR(uint<%varGet("MaxRxIPduDeadlineTimerBits")%>, TYPEDEF)                         FirstTimeoutFactor;
  VAR(uint<%varGet("MaxRxIPduDeadlineTimerBits")%>, TYPEDEF)                         TimeoutFactor;
  VAR(Com_NetworkSignalIndexType, TYPEDEF)    FirstElementInIpduIdx;
  VAR(Com_IPduIndexType, TYPEDEF)             NextIpduInGroupIdx;
  VAR(Com_IPduIndexType, TYPEDEF)             DeadlineTimerIndex;
  VAR(uint8, TYPEDEF)                         Length; /* in bytes */
  VAR(uint8, TYPEDEF)                         SignalProcessing        : 1;
  VAR(uint8, TYPEDEF)                         FirstElementInIpduType  : 1;
  VAR(uint8, TYPEDEF)                         Unused                  : 6;
} Com_RxIpduConfigType;
«ENDREM»
typedef struct Com_RxIpduConfigType
{
  P2VAR(uint8, TYPEDEF, AUTOSAR_COMSTACKDATA) ValuePtr;
  VAR(uint«intVarGet("MaxRxIPduDeadlineTimerBits")», TYPEDEF)                         FirstTimeoutFactor;
  VAR(uint«intVarGet("MaxRxIPduDeadlineTimerBits")», TYPEDEF)                         TimeoutFactor;
  VAR(Com_NetworkSignalIndexType, TYPEDEF)    FirstElementInIpduIdx;
  VAR(Com_IPduIndexType, TYPEDEF)             NextIpduInGroupIdx;
  VAR(Com_IPduIndexType, TYPEDEF)             DeadlineTimerIndex;
  VAR(uint8, TYPEDEF)                         Length; /* in bytes */
  VAR(uint8, TYPEDEF)                         SignalProcessing        : 1;
  VAR(uint8, TYPEDEF)                         FirstElementInIpduType  : 1;
  VAR(uint8, TYPEDEF)                         Unused                  : 6;
} Com_RxIpduConfigType;

«REM»
typedef struct Com_TxIpduConfigType
{
  P2VAR(uint8, TYPEDEF, AUTOSAR_COMSTACKDATA) ValuePtr;
  VAR(uint<%varGet("MaxTxIPduDeadlineTimerBits")%>, TYPEDEF)                         FirstTimeoutFactor;
  VAR(uint<%varGet("MaxTxIPduDeadlineTimerBits")%>, TYPEDEF)                         TimeoutFactor;
    <%if (varGet("MaxMDTValue") < 256){%>
  VAR(uint8, TYPEDEF)                         MinimumDelayTimeFactor;
    <%}else{%>
        <%if (varGet("MaxMDTValue") < 65536){%>
  VAR(uint16, TYPEDEF)                        MinimumDelayTimeFactor;
        <%}else{%>
  VAR(uint32, TYPEDEF)                        MinimumDelayTimeFactor;
        <%}%>
    <%}%>
    <%if ((varGet("TxSignalFilterNumber")+varGet("TxGroupSignalFilterNumber")) > 0){%>
  VAR(Com_TransmissionModeIndexType, TYPEDEF) TransmissionModeIdx[2];
    <%}else{%>
  VAR(Com_TransmissionModeIndexType, TYPEDEF) TransmissionModeIdx;
    <%}%>
  VAR(Com_NetworkSignalIndexType, TYPEDEF)    FirstElementInIpduIdx;
  VAR(Com_IPduIndexType, TYPEDEF)             NextIpduInGroupIdx;
  VAR(Com_IPduIndexType, TYPEDEF)             TimerIndex[4];
  VAR(PduIdType, TYPEDEF)                     HandleId;
  VAR(uint8, TYPEDEF)                         DefaultValue;
  VAR(uint8, TYPEDEF)                         Length; /* in bytes */
  VAR(uint8, TYPEDEF)                         SignalProcessing        : 1;
                                          /* if no signal Mk or a Mk signals F_ALWAYS : */
  VAR(uint8, TYPEDEF)                         TMSalwaysTRUE           : 1;
  VAR(uint8, TYPEDEF)                         FirstElementInIpduType  : 1;
  VAR(uint8, TYPEDEF)                         Unused                  : 4;
} Com_TxIpduConfigType;
«ENDREM»
typedef struct Com_TxIpduConfigType
{
  P2VAR(uint8, TYPEDEF, AUTOSAR_COMSTACKDATA) ValuePtr;
  VAR(uint«intVarGet("MaxTxIPduDeadlineTimerBits")», TYPEDEF)                         FirstTimeoutFactor;
  VAR(uint«intVarGet("MaxTxIPduDeadlineTimerBits")», TYPEDEF)                         TimeoutFactor;
	«IF intVarGet("MaxMDTValue") < 256»
  VAR(uint8, TYPEDEF)                         MinimumDelayTimeFactor;
    «ELSEIF intVarGet("MaxMDTValue") < 65536»
  VAR(uint16, TYPEDEF)                        MinimumDelayTimeFactor;
    «ELSE»
  VAR(uint32, TYPEDEF)                        MinimumDelayTimeFactor;
    «ENDIF»
    «IF (intVarGet("TxSignalFilterNumber") + intVarGet("TxGroupSignalFilterNumber")) > 0»
  VAR(Com_TransmissionModeIndexType, TYPEDEF) TransmissionModeIdx[2];
    «ELSE»
  VAR(Com_TransmissionModeIndexType, TYPEDEF) TransmissionModeIdx;
    «ENDIF»
  VAR(Com_NetworkSignalIndexType, TYPEDEF)    FirstElementInIpduIdx;
  VAR(Com_IPduIndexType, TYPEDEF)             NextIpduInGroupIdx;
  VAR(Com_IPduIndexType, TYPEDEF)             TimerIndex[4];
  VAR(PduIdType, TYPEDEF)                     HandleId;
  VAR(uint8, TYPEDEF)                         DefaultValue;
  VAR(uint8, TYPEDEF)                         Length; /* in bytes */
  VAR(uint8, TYPEDEF)                         SignalProcessing        : 1;
                                          /* if no signal Mk or a Mk signals F_ALWAYS : */
  VAR(uint8, TYPEDEF)                         TMSalwaysTRUE           : 1;
  VAR(uint8, TYPEDEF)                         FirstElementInIpduType  : 1;
  VAR(uint8, TYPEDEF)                         Unused                  : 4;
} Com_TxIpduConfigType;

typedef struct Com_RxIpduInfoType
{
  VAR(uint8, TYPEDEF)             IpduWritingStatus         : 2;
  VAR(uint8, TYPEDEF)             DeadlineMonitoringEnabled : 1;
  VAR(uint8, TYPEDEF)             IpduGroupRunning          : 1;
  VAR(uint8, TYPEDEF)             Unused                    : 4;
} Com_RxIpduInfoType;

typedef struct Com_TxIpduInfoType
{
  VAR(uint8, TYPEDEF)             DeadlineMonitoringEnabled : 1;
  VAR(uint8, TYPEDEF)             IpduGroupRunning          : 1;
  VAR(uint8, TYPEDEF)             Triggered                 : 1;
  VAR(uint8, TYPEDEF)             TMS                       : 1;
  VAR(uint8, TYPEDEF)             DeadlineTimerRunning      : 1;
  VAR(uint8, TYPEDEF)             MDTimerRunning            : 1;
  VAR(uint8, TYPEDEF)             DirectTimerRunning        : 1;
  VAR(uint8, TYPEDEF)             PeriodicTimerRunning      : 1;
} Com_TxIpduInfoType;

typedef struct Com_IpduGroupConfigType
{
  VAR(Com_IPduIndexType, TYPEDEF)   FirstElementInGroupIdx;
  VAR(Com_PduGroupIdType, TYPEDEF)  NextIpduGroupInGroupIdx;
  VAR(uint8, TYPEDEF)               Direction   : 1;
  VAR(uint8, TYPEDEF)               ElementType : 1;
  VAR(uint8, TYPEDEF)               Unused      : 6;
} Com_IpduGroupConfigType;


/******* Signal *******/

«REM»
<%if (varGet("RxSignalNumber") > 0){%>
typedef struct Com_RxSignalConfigType
{
  P2CONST(void, TYPEDEF, COM_CONST)         DataInvalidValuePtr;
  P2CONST(void, TYPEDEF, COM_CONST)         InitValuePtr;
  P2VAR(void, TYPEDEF, COM_VAR_NOINIT)      OldValuePtr;
  VAR(uint<%varGet("MaxRxSgDeadlineTimerBits")%>, TYPEDEF)                       FirstTimeoutFactor;
  VAR(uint<%varGet("MaxRxSgDeadlineTimerBits")%>, TYPEDEF)                       TimeoutFactor;
  VAR(Com_NetworkSignalIndexType, TYPEDEF)  NextElementInIpduIdx;
  VAR(Com_SingleSignalIndexType, TYPEDEF)   DeadlineTimerIndex;
  VAR(Com_SingleSignalIndexType, TYPEDEF)   RoutingListIndex;
  <%gceRxSgCfgType_Cbks()%>
  VAR(Com_IPduIndexType, TYPEDEF)           IpduIdx;
<%if (varGet("RxSignalFilterNumber") > 0){%>
  VAR(Com_FilterIndexType, TYPEDEF)         FilterIdx;
<%}%>
  VAR(uint16, TYPEDEF)                      UpdateBitPosition;
  VAR(uint32, TYPEDEF)                      BitPosition            : 11;
  VAR(uint32, TYPEDEF)                      ByteLength             : 4;
  VAR(uint32, TYPEDEF)                      DataInvalidAction      : 1;
  VAR(uint32, TYPEDEF)                      BitSize                : 7;
  VAR(uint32, TYPEDEF)                      Endianness             : 2;
  VAR(uint32, TYPEDEF)                      RxDataTimeoutAction    : 1;
  VAR(uint32, TYPEDEF)                      NegativeType           : 1;
  VAR(uint32, TYPEDEF)                      IsGatewayed            : 1;
  VAR(uint32, TYPEDEF)                      IsBytesArray           : 1;
  VAR(uint32, TYPEDEF)                      Unused                 : 3;
} Com_RxSignalConfigType;
<%}%>
«ENDREM»
«IF intVarGet("RxSignalNumber") > 0»
typedef struct Com_RxSignalConfigType
{
  P2CONST(void, TYPEDEF, COM_CONST)         DataInvalidValuePtr;
  P2CONST(void, TYPEDEF, COM_CONST)         InitValuePtr;
  P2VAR(void, TYPEDEF, COM_VAR_NOINIT)      OldValuePtr;
  VAR(uint«intVarGet("MaxRxSgDeadlineTimerBits")», TYPEDEF)                       FirstTimeoutFactor;
  VAR(uint«intVarGet("MaxRxSgDeadlineTimerBits")», TYPEDEF)                       TimeoutFactor;
  VAR(Com_NetworkSignalIndexType, TYPEDEF)  NextElementInIpduIdx;
  VAR(Com_SingleSignalIndexType, TYPEDEF)   DeadlineTimerIndex;
  VAR(Com_SingleSignalIndexType, TYPEDEF)   RoutingListIndex;
  «EXPAND gceTxSgGrCfgType_Cbks»
  VAR(Com_IPduIndexType, TYPEDEF)           IpduIdx;
	«IF intVarGet("RxSignalFilterNumber") > 0»
  VAR(Com_FilterIndexType, TYPEDEF)         FilterIdx;
	«ENDIF»
  VAR(uint16, TYPEDEF)                      UpdateBitPosition;
  VAR(uint32, TYPEDEF)                      BitPosition            : 11;
  VAR(uint32, TYPEDEF)                      ByteLength             : 4;
  VAR(uint32, TYPEDEF)                      DataInvalidAction      : 1;
  VAR(uint32, TYPEDEF)                      BitSize                : 7;
  VAR(uint32, TYPEDEF)                      Endianness             : 2;
  VAR(uint32, TYPEDEF)                      RxDataTimeoutAction    : 1;
  VAR(uint32, TYPEDEF)                      NegativeType           : 1;
  VAR(uint32, TYPEDEF)                      IsGatewayed            : 1;
  VAR(uint32, TYPEDEF)                      IsBytesArray           : 1;
  VAR(uint32, TYPEDEF)                      Unused                 : 3;
} Com_RxSignalConfigType;
«ENDIF»

«REM»
<%if (varGet("TxSignalNumber") > 0){%>
typedef struct Com_TxSignalConfigType
{
  P2CONST(void, TYPEDEF, COM_CONST)         DataInvalidValuePtr;
  P2CONST(void, TYPEDEF, COM_CONST)         InitValuePtr;
  P2VAR(void, TYPEDEF, COM_VAR_NOINIT)      OldValuePtr;
  VAR(Com_NetworkSignalIndexType, TYPEDEF)  NextElementInIpduIdx;
  <%gceTxSgCfgType_Cbks()%>
  VAR(Com_IPduIndexType, TYPEDEF)           IpduIdx;
<%if (varGet("TxSignalFilterNumber") > 0){%>
  VAR(Com_FilterIndexType, TYPEDEF)         FilterIdx;
<%}%>
  VAR(uint16, TYPEDEF)                      UpdateBitPosition;
  VAR(uint16, TYPEDEF)                      BitPosition;
  VAR(uint16, TYPEDEF)                      BitSize                : 7;
  VAR(uint16, TYPEDEF)                      ByteLength             : 4;
  VAR(uint16, TYPEDEF)                      Endianness             : 2;
  VAR(uint16, TYPEDEF)                      TransferProperty       : 1;
  VAR(uint16, TYPEDEF)                      NegativeType           : 1;
  VAR(uint16, TYPEDEF)                      IsBytesArray           : 1;
} Com_TxSignalConfigType;
<%}%>
«ENDREM»
«IF intVarGet("TxSignalNumber") > 0»
typedef struct Com_TxSignalConfigType
{
  P2CONST(void, TYPEDEF, COM_CONST)         DataInvalidValuePtr;
  P2CONST(void, TYPEDEF, COM_CONST)         InitValuePtr;
  P2VAR(void, TYPEDEF, COM_VAR_NOINIT)      OldValuePtr;
  VAR(Com_NetworkSignalIndexType, TYPEDEF)  NextElementInIpduIdx;
  «EXPAND gceTxSgGrCfgType_Cbks»
  VAR(Com_IPduIndexType, TYPEDEF)           IpduIdx;
	«IF intVarGet("TxSignalFilterNumber") > 0»
  VAR(Com_FilterIndexType, TYPEDEF)         FilterIdx;
	«ENDIF»
  VAR(uint16, TYPEDEF)                      UpdateBitPosition;
  VAR(uint16, TYPEDEF)                      BitPosition;
  VAR(uint16, TYPEDEF)                      BitSize                : 7;
  VAR(uint16, TYPEDEF)                      ByteLength             : 4;
  VAR(uint16, TYPEDEF)                      Endianness             : 2;
  VAR(uint16, TYPEDEF)                      TransferProperty       : 1;
  VAR(uint16, TYPEDEF)                      NegativeType           : 1;
  VAR(uint16, TYPEDEF)                      IsBytesArray           : 1;
} Com_TxSignalConfigType;
«ENDIF»

«REM»
<%if (varGet("RxSignalGroupNumber") > 0){%>
typedef struct Com_RxSignalGroupConfigType
{
  VAR(uint16, TYPEDEF)                      UpdateBitPosition               : 11;
  VAR(uint16, TYPEDEF)                      DataInvalidAction               : 2;
  VAR(uint16, TYPEDEF)                      RxDataTimeoutAction             : 1;
  VAR(uint16, TYPEDEF)                      NextElementInIpduType           : 1;
  VAR(uint16, TYPEDEF)                      IsGatewayed                     : 1;
  VAR(uint<%varGet("MaxRxSgGrDeadlineTimerBits")%>, TYPEDEF)                       FirstTimeoutFactor;
  VAR(uint<%varGet("MaxRxSgGrDeadlineTimerBits")%>, TYPEDEF)                       TimeoutFactor;
  VAR(Com_NetworkSignalIndexType, TYPEDEF)  NextElementInIpduIdx;
  VAR(Com_SignalGroupIndexType, TYPEDEF)    DeadlineTimerIndex;
  VAR(Com_SignalGroupIndexType, TYPEDEF)    RoutingListIndex;
  VAR(Com_GroupSignalIndexType, TYPEDEF)    FirstSignalInGroupIdx;
  VAR(Com_IPduIndexType, TYPEDEF)           IpduIdx;
  <%gceRxSgGrCfgType_Cbks()%>
} Com_RxSignalGroupConfigType;
<%}%>
«ENDREM»
«IF intVarGet("RxSignalGroupNumber") > 0»
typedef struct Com_RxSignalGroupConfigType
{
  VAR(uint16, TYPEDEF)                      UpdateBitPosition               : 11;
  VAR(uint16, TYPEDEF)                      DataInvalidAction               : 2;
  VAR(uint16, TYPEDEF)                      RxDataTimeoutAction             : 1;
  VAR(uint16, TYPEDEF)                      NextElementInIpduType           : 1;
  VAR(uint16, TYPEDEF)                      IsGatewayed                     : 1;
  VAR(uint«intVarGet("MaxRxSgGrDeadlineTimerBits")», TYPEDEF)                       FirstTimeoutFactor;
  VAR(uint«intVarGet("MaxRxSgGrDeadlineTimerBits")», TYPEDEF)                       TimeoutFactor;
  VAR(Com_NetworkSignalIndexType, TYPEDEF)  NextElementInIpduIdx;
  VAR(Com_SignalGroupIndexType, TYPEDEF)    DeadlineTimerIndex;
  VAR(Com_SignalGroupIndexType, TYPEDEF)    RoutingListIndex;
  VAR(Com_GroupSignalIndexType, TYPEDEF)    FirstSignalInGroupIdx;
  VAR(Com_IPduIndexType, TYPEDEF)           IpduIdx;
  «EXPAND gceTxSgGrCfgType_Cbks»
} Com_RxSignalGroupConfigType;
«ENDIF»

«REM»
<%if (varGet("TxSignalGroupNumber") > 0){%>
typedef struct Com_TxSignalGroupConfigType
{
  VAR(uint16, TYPEDEF)                      UpdateBitPosition               : 11;
  VAR(uint16, TYPEDEF)                      TransferProperty                : 1;
  VAR(uint16, TYPEDEF)                      NextElementInIpduType           : 1;
  VAR(uint16, TYPEDEF)                      Unused                          : 3;
  VAR(Com_NetworkSignalIndexType, TYPEDEF)  NextElementInIpduIdx;
  VAR(Com_GroupSignalIndexType, TYPEDEF)    FirstSignalInGroupIdx;
  VAR(Com_IPduIndexType, TYPEDEF)           IpduIdx;
  <%gceTxSgGrCfgType_Cbks()%>
} Com_TxSignalGroupConfigType;
<%}%>
«ENDREM»
«IF intVarGet("TxSignalGroupNumber") > 0»
typedef struct Com_TxSignalGroupConfigType
{
  VAR(uint16, TYPEDEF)                      UpdateBitPosition               : 11;
  VAR(uint16, TYPEDEF)                      TransferProperty                : 1;
  VAR(uint16, TYPEDEF)                      NextElementInIpduType           : 1;
  VAR(uint16, TYPEDEF)                      Unused                          : 3;
  VAR(Com_NetworkSignalIndexType, TYPEDEF)  NextElementInIpduIdx;
  VAR(Com_GroupSignalIndexType, TYPEDEF)    FirstSignalInGroupIdx;
  VAR(Com_IPduIndexType, TYPEDEF)           IpduIdx;
  «EXPAND gceTxSgGrCfgType_Cbks»
} Com_TxSignalGroupConfigType;
«ENDIF»

typedef struct Com_RxGroupSignalConfigType
{
  P2FUNC(void, RTE_APPL_CODE,               InvalidNotificationCallback)(void);
  P2CONST(void, TYPEDEF, COM_CONST)         DataInvalidValuePtr;
  P2CONST(void, TYPEDEF, COM_CONST)         InitValuePtr;
  P2VAR(void, TYPEDEF, COM_VAR_NOINIT)      OldValuePtr;
  VAR(Com_GroupSignalIndexType, TYPEDEF)    NextSignalInGroupIdx;
  VAR(Com_GroupSignalIndexType, TYPEDEF)    RoutingListIndex;
  VAR(Com_SignalGroupIndexType, TYPEDEF)    GroupIdx;
  VAR(uint32, TYPEDEF)                      BitPosition  : 11;
  VAR(uint32, TYPEDEF)                      ByteLength   : 4;
  VAR(uint32, TYPEDEF)                      NegativeType : 1;
  VAR(uint32, TYPEDEF)                      BitSize      : 7;
  VAR(uint32, TYPEDEF)                      Endianness   : 2;
  VAR(uint32, TYPEDEF)                      IsGatewayed  : 1;
  VAR(uint32, TYPEDEF)                      IsBytesArray : 1;
  VAR(uint32, TYPEDEF)                      Unused       : 5;
} Com_RxGroupSignalConfigType;

«REM»
typedef struct Com_TxGroupSignalConfigType
{
  P2CONST(void, TYPEDEF, COM_CONST)         DataInvalidValuePtr;
  P2CONST(void, TYPEDEF, COM_CONST)         InitValuePtr;
  P2VAR(void, TYPEDEF, COM_VAR_NOINIT)      OldValuePtr;
  VAR(Com_GroupSignalIndexType, TYPEDEF)    NextSignalInGroupIdx;
  VAR(Com_SignalGroupIndexType, TYPEDEF)    GroupIdx;
<%if (varGet("TxGroupSignalFilterNumber") > 0){%>
  VAR(Com_FilterIndexType, TYPEDEF)         FilterIdx;
<%}%>
  VAR(uint32, TYPEDEF)                      BitPosition  : 11;
  VAR(uint32, TYPEDEF)                      ByteLength   : 4;
  VAR(uint32, TYPEDEF)                      NegativeType : 1;
  VAR(uint32, TYPEDEF)                      BitSize      : 7;
  VAR(uint32, TYPEDEF)                      Endianness   : 2;
  VAR(uint32, TYPEDEF)                      IsBytesArray : 1;
  VAR(uint32, TYPEDEF)                      Unused       : 6;
} Com_TxGroupSignalConfigType;
«ENDREM»
typedef struct Com_TxGroupSignalConfigType
{
  P2CONST(void, TYPEDEF, COM_CONST)         DataInvalidValuePtr;
  P2CONST(void, TYPEDEF, COM_CONST)         InitValuePtr;
  P2VAR(void, TYPEDEF, COM_VAR_NOINIT)      OldValuePtr;
  VAR(Com_GroupSignalIndexType, TYPEDEF)    NextSignalInGroupIdx;
  VAR(Com_SignalGroupIndexType, TYPEDEF)    GroupIdx;
«IF intVarGet("TxGroupSignalFilterNumber") > 0»
  VAR(Com_FilterIndexType, TYPEDEF)         FilterIdx;
«ENDIF»
  VAR(uint32, TYPEDEF)                      BitPosition  : 11;
  VAR(uint32, TYPEDEF)                      ByteLength   : 4;
  VAR(uint32, TYPEDEF)                      NegativeType : 1;
  VAR(uint32, TYPEDEF)                      BitSize      : 7;
  VAR(uint32, TYPEDEF)                      Endianness   : 2;
  VAR(uint32, TYPEDEF)                      IsBytesArray : 1;
  VAR(uint32, TYPEDEF)                      Unused       : 6;
} Com_TxGroupSignalConfigType;

/* Com_ConfigType not used in link-time variant */
typedef uint8 Com_ConfigType;

typedef P2FUNC(boolean, RTE_APPL_CODE, Com_IpduCalloutTableType)(
  CONST(PduIdType, TYPEDEF)                     ID,
  P2CONST(uint8, TYPEDEF, AUTOSAR_COMSTACKDATA) ipduD
);

«REM»
<%if (varGet("RxSignalNumber") > 0){%>
typedef P2FUNC(void, RTE_APPL_CODE, Com_RxSignalCfgTimeoutNotificationCbkType)(void); 
typedef P2FUNC(void, RTE_APPL_CODE, Com_RxSignalCfgInvalidNotificationCbkType)(void); 
typedef P2FUNC(void, RTE_APPL_CODE, Com_RxSignalCfgNotificationCbkType)(void); 
<%}%>
«ENDREM»
«IF intVarGet("RxSignalNumber") > 0»
typedef P2FUNC(void, RTE_APPL_CODE, Com_RxSignalCfgTimeoutNotificationCbkType)(void); 
typedef P2FUNC(void, RTE_APPL_CODE, Com_RxSignalCfgInvalidNotificationCbkType)(void); 
typedef P2FUNC(void, RTE_APPL_CODE, Com_RxSignalCfgNotificationCbkType)(void); 
«ENDIF»

«REM»
<%if (varGet("TxSignalNumber") > 0){%>
typedef P2FUNC(void, RTE_APPL_CODE, Com_TxSignalCfgErrorNotificationCbkType)(void); 
typedef P2FUNC(void, RTE_APPL_CODE, Com_TxSignalCfgTimeoutNotificationCbkType)(void); 
typedef P2FUNC(void, RTE_APPL_CODE, Com_TxSignalCfgNotificationCbkType)(void); 
<%}%>
«ENDREM»
«IF intVarGet("TxSignalNumber") > 0»
typedef P2FUNC(void, RTE_APPL_CODE, Com_TxSignalCfgErrorNotificationCbkType)(void); 
typedef P2FUNC(void, RTE_APPL_CODE, Com_TxSignalCfgTimeoutNotificationCbkType)(void); 
typedef P2FUNC(void, RTE_APPL_CODE, Com_TxSignalCfgNotificationCbkType)(void); 
«ENDIF»

«REM»
<%if (varGet("TxSignalGroupNumber") > 0){%>
typedef P2FUNC(void, RTE_APPL_CODE, Com_TxSignalGroupCfgErrorNotificationCbkType)(void); 
typedef P2FUNC(void, RTE_APPL_CODE, Com_TxSignalGroupCfgTimeoutNotificationCbkType)(void); 
typedef P2FUNC(void, RTE_APPL_CODE, Com_TxSignalGroupCfgNotificationCbkType)(void); 
<%}%>
«ENDREM»
«IF intVarGet("TxSignalGroupNumber") > 0»
typedef P2FUNC(void, RTE_APPL_CODE, Com_TxSignalGroupCfgErrorNotificationCbkType)(void); 
typedef P2FUNC(void, RTE_APPL_CODE, Com_TxSignalGroupCfgTimeoutNotificationCbkType)(void); 
typedef P2FUNC(void, RTE_APPL_CODE, Com_TxSignalGroupCfgNotificationCbkType)(void); 
«ENDIF»

«REM»
<%if (varGet("RxSignalGroupNumber") > 0){%>
typedef P2FUNC(void, RTE_APPL_CODE, Com_RxSignalGroupCfgTimeoutNotificationCbkType)(void); 
typedef P2FUNC(void, RTE_APPL_CODE, Com_RxSignalGroupCfgInvalidNotificationCbkType)(void); 
typedef P2FUNC(void, RTE_APPL_CODE, Com_RxSignalGroupCfgNotificationCbkType)(void); 
<%}%>
«ENDREM»
«IF intVarGet("RxSignalGroupNumber") > 0»
typedef P2FUNC(void, RTE_APPL_CODE, Com_RxSignalGroupCfgTimeoutNotificationCbkType)(void); 
typedef P2FUNC(void, RTE_APPL_CODE, Com_RxSignalGroupCfgInvalidNotificationCbkType)(void); 
typedef P2FUNC(void, RTE_APPL_CODE, Com_RxSignalGroupCfgNotificationCbkType)(void); 
«ENDIF»

«ENDDEFINE»


«DEFINE gceDeclarationsOfConfigurationsConstants FOR ARRoot::Com»
/*****************************************************************************/
/* DECLARATION OF CONFIGURATION CONSTANTS                                    */
/*****************************************************************************/
#define COM_START_SEC_CONST_UNSPECIFIED
#include "MemMap.h"
«REM»
<%if (varGet("RxIPduNumber") > 0){%>
extern CONST(Com_RxIpduConfigType,COM_CONST)        Com_RxIpduConfig[];
<%}%>
«ENDREM»
«IF intVarGet("RxIPduNumber") > 0»
extern CONST(Com_RxIpduConfigType,COM_CONST)        Com_RxIpduConfig[];
«ENDIF»

«REM»
<%if (varGet("TxIPduNumber") > 0){%>
extern CONST(Com_TxIpduConfigType,COM_CONST)        Com_TxIpduConfig[];
<%}%>
«ENDREM»
«IF intVarGet("TxIPduNumber") > 0»
extern CONST(Com_TxIpduConfigType,COM_CONST)        Com_TxIpduConfig[];
«ENDIF»

«REM»
extern CONST(Com_IpduGroupConfigType,COM_CONST)     Com_IpduGroupConfig[];
<%if (varGet("RxSignalNumber") > 0){%>
extern CONST(Com_RxSignalCfgTimeoutNotificationCbkType, COM_CONST) Com_RxSignalCfgTimeoutNotificationCbk[<%varGet("RxSignalTimeoutNotificationCbkCounter")%>];
extern CONST(Com_RxSignalCfgInvalidNotificationCbkType, COM_CONST) Com_RxSignalCfgInvalidNotificationCbk[<%varGet("RxSignalInvalidNotificationCbkCounter")%>];
extern CONST(Com_RxSignalCfgNotificationCbkType, COM_CONST)        Com_RxSignalCfgNotificationCbk[<%varGet("RxSignalNotificationCbkCounter")%>];
extern CONST(Com_RxSignalConfigType,COM_CONST)      Com_RxSignalConfig[];
<%}%>
«ENDREM»
extern CONST(Com_IpduGroupConfigType,COM_CONST)     Com_IpduGroupConfig[];
«IF intVarGet("RxSignalNumber") > 0»
extern CONST(Com_RxSignalCfgTimeoutNotificationCbkType, COM_CONST) Com_RxSignalCfgTimeoutNotificationCbk[«varGet("RxSignalTimeoutNotificationCbkCounter")»];
extern CONST(Com_RxSignalCfgInvalidNotificationCbkType, COM_CONST) Com_RxSignalCfgInvalidNotificationCbk[«varGet("RxSignalInvalidNotificationCbkCounter")»];
extern CONST(Com_RxSignalCfgNotificationCbkType, COM_CONST)        Com_RxSignalCfgNotificationCbk[«varGet("RxSignalNotificationCbkCounter")»];
extern CONST(Com_RxSignalConfigType,COM_CONST)      Com_RxSignalConfig[];
«ENDIF»

«REM»
<%if (varGet("TxSignalNumber") > 0){%>
extern CONST(Com_TxSignalCfgErrorNotificationCbkType, COM_CONST)   Com_TxSignalCfgErrorNotificationCbk[<%varGet("TxSignalErrorNotificationCbkCounter")%>];
extern CONST(Com_TxSignalCfgTimeoutNotificationCbkType, COM_CONST) Com_TxSignalCfgTimeoutNotificationCbk[<%varGet("TxSignalTimeoutNotificationCbkCounter")%>];
extern CONST(Com_TxSignalCfgNotificationCbkType, COM_CONST)        Com_TxSignalCfgNotificationCbk[<%varGet("TxSignalNotificationCbkCounter")%>];
extern CONST(Com_TxSignalConfigType,COM_CONST)      Com_TxSignalConfig[];
<%}%>
«ENDREM»
«IF intVarGet("TxSignalNumber") > 0»
extern CONST(Com_TxSignalCfgErrorNotificationCbkType, COM_CONST)   Com_TxSignalCfgErrorNotificationCbk[«varGet("TxSignalErrorNotificationCbkCounter")»];
extern CONST(Com_TxSignalCfgTimeoutNotificationCbkType, COM_CONST) Com_TxSignalCfgTimeoutNotificationCbk[«varGet("TxSignalTimeoutNotificationCbkCounter")»];
extern CONST(Com_TxSignalCfgNotificationCbkType, COM_CONST)        Com_TxSignalCfgNotificationCbk[«varGet("TxSignalNotificationCbkCounter")»];
extern CONST(Com_TxSignalConfigType,COM_CONST)      Com_TxSignalConfig[];
«ENDIF»

«REM»
<%if (varGet("RxSignalGroupNumber") > 0){%>
extern CONST(Com_RxSignalGroupCfgTimeoutNotificationCbkType, COM_CONST) Com_RxSignalGroupCfgTimeoutNotificationCbk[<%varGet("RxSignalGroupTimeoutNotificationCbkCounter")%>];
extern CONST(Com_RxSignalGroupCfgInvalidNotificationCbkType, COM_CONST)   Com_RxSignalGroupCfgInvalidNotificationCbk[<%varGet("RxSignalGroupInvalidNotificationCbkCounter")%>];
extern CONST(Com_RxSignalGroupCfgNotificationCbkType, COM_CONST)        Com_RxSignalGroupCfgNotificationCbk[<%varGet("RxSignalGroupNotificationCbkCounter")%>];
extern CONST(Com_RxSignalGroupConfigType,COM_CONST) Com_RxSignalGroupConfig[];
<%}%>
«ENDREM»
«IF intVarGet("RxSignalGroupNumber") > 0»
extern CONST(Com_RxSignalGroupCfgTimeoutNotificationCbkType, COM_CONST) Com_RxSignalGroupCfgTimeoutNotificationCbk[«varGet("RxSignalGroupTimeoutNotificationCbkCounter")»];
extern CONST(Com_RxSignalGroupCfgInvalidNotificationCbkType, COM_CONST)   Com_RxSignalGroupCfgInvalidNotificationCbk[«varGet("RxSignalGroupInvalidNotificationCbkCounter")»];
extern CONST(Com_RxSignalGroupCfgNotificationCbkType, COM_CONST)        Com_RxSignalGroupCfgNotificationCbk[«varGet("RxSignalGroupNotificationCbkCounter")»];
extern CONST(Com_RxSignalGroupConfigType,COM_CONST) Com_RxSignalGroupConfig[];
«ENDIF»

«REM»
<%if (varGet("TxSignalGroupNumber") > 0){%>
extern CONST(Com_TxSignalGroupCfgErrorNotificationCbkType, COM_CONST)   Com_TxSignalGroupCfgErrorNotificationCbk[<%varGet("TxSignalGroupErrorNotificationCbkCounter")%>];
extern CONST(Com_TxSignalGroupCfgTimeoutNotificationCbkType, COM_CONST) Com_TxSignalGroupCfgTimeoutNotificationCbk[<%varGet("TxSignalGroupTimeoutNotificationCbkCounter")%>];
extern CONST(Com_TxSignalGroupCfgNotificationCbkType, COM_CONST)        Com_TxSignalGroupCfgNotificationCbk[<%varGet("TxSignalGroupNotificationCbkCounter")%>];
extern CONST(Com_TxSignalGroupConfigType,COM_CONST) Com_TxSignalGroupConfig[];
<%}%>
«ENDREM»
«IF intVarGet("TxSignalGroupNumber") > 0»
extern CONST(Com_TxSignalGroupCfgErrorNotificationCbkType, COM_CONST)   Com_TxSignalGroupCfgErrorNotificationCbk[«varGet("TxSignalGroupErrorNotificationCbkCounter")»];
extern CONST(Com_TxSignalGroupCfgTimeoutNotificationCbkType, COM_CONST) Com_TxSignalGroupCfgTimeoutNotificationCbk[«varGet("TxSignalGroupTimeoutNotificationCbkCounter")»];
extern CONST(Com_TxSignalGroupCfgNotificationCbkType, COM_CONST)        Com_TxSignalGroupCfgNotificationCbk[«varGet("TxSignalGroupNotificationCbkCounter")»];
extern CONST(Com_TxSignalGroupConfigType,COM_CONST) Com_TxSignalGroupConfig[];
«ENDIF»

«REM»
<%if (varGet("RxGroupSignalNumber") > 0){%>
extern CONST(Com_RxGroupSignalConfigType,COM_CONST) Com_RxGroupSignalConfig[];
<%}%>
«ENDREM»
«IF intVarGet("RxGroupSignalNumber") > 0»
extern CONST(Com_RxGroupSignalConfigType,COM_CONST) Com_RxGroupSignalConfig[];
«ENDIF»

«REM»
<%if (varGet("TxGroupSignalNumber") > 0){%>
extern CONST(Com_TxGroupSignalConfigType,COM_CONST) Com_TxGroupSignalConfig[];
<%}%>
«ENDREM»
«IF intVarGet("TxGroupSignalNumber") > 0»
extern CONST(Com_TxGroupSignalConfigType,COM_CONST) Com_TxGroupSignalConfig[];
«ENDIF»

«REM»
<%if (varGet("FilterNumber") > 0){%>
extern CONST(Com_FilterType,COM_CONST)              Com_FilterConfig[];
<%}%>
«ENDREM»
«IF intVarGet("FilterNumber") > 0»
extern CONST(Com_FilterType,COM_CONST)              Com_FilterConfig[];
«ENDIF»

«REM»
<%if (varGet("SignalRouteNumber") > 0){%>
extern CONST(Com_SignalRouteType,COM_CONST)         Com_SignalRoute[];
<%}%>
«ENDREM»
«IF intVarGet("SignalRouteNumber") > 0»
extern CONST(Com_SignalRouteType,COM_CONST)         Com_SignalRoute[];
«ENDIF»

«REM»
<%if (varGet("SignalGroupRouteNumber") > 0){%>
extern CONST(Com_SignalGroupRouteType,COM_CONST)    Com_SignalGroupRoute[];
<%}%>
«ENDREM»

«REM»
<%if (varGet("GroupSignalRouteNumber") > 0){%>
extern CONST(Com_GroupSignalRouteType,COM_CONST)    Com_GroupSignalRoute[];
<%}%>
«ENDREM»
«IF intVarGet("GroupSignalRouteNumber") > 0»
extern CONST(Com_GroupSignalRouteType,COM_CONST)    Com_GroupSignalRoute[];
«ENDIF»

«REM»
<%if (varGet("TMnumber") > 0){%>
extern CONST(Com_TransmissionModeType,COM_CONST)    Com_TransmissionMode[];
<%}%>
«ENDREM»
«IF intVarGet("TMnumber") > 0»
extern CONST(Com_TransmissionModeType,COM_CONST)    Com_TransmissionMode[];
«ENDIF»

«REM»
<%if (varGet("RxIPduNumber") > 0){%>
extern CONST(Com_IpduCalloutTableType,COM_CONST)    Com_RxIpduCalloutTable[];
<%}%>
«ENDREM»
«IF intVarGet("RxIPduNumber") > 0»
extern CONST(Com_IpduCalloutTableType,COM_CONST)    Com_RxIpduCalloutTable[];
«ENDIF»

«REM»
<%if (varGet("TxIPduNumber") > 0){%>
extern CONST(Com_IpduCalloutTableType,COM_CONST)    Com_TxIpduCalloutTable[];
<%}%>
«ENDREM»
«IF intVarGet("TxIPduNumber") > 0»
extern CONST(Com_IpduCalloutTableType,COM_CONST)    Com_TxIpduCalloutTable[];
«ENDIF»

extern CONST(Com_AllSignalIndexType, COM_CONST)     Com_iSignalIndexById[];

«REM»
<%if (varGet("AllSignalGroupNumber") > 0){%>
extern CONST(Com_SignalGroupIndexType, COM_CONST)   Com_iSignalGroupIndexById[];
<%}%>
«ENDREM»
«IF intVarGet("AllSignalGroupNumber") > 0»
extern CONST(Com_SignalGroupIndexType, COM_CONST)   Com_iSignalGroupIndexById[];
«ENDIF»
#define COM_STOP_SEC_CONST_UNSPECIFIED
#include "MemMap.h"

«REM»
<%if (Com.ComGeneral.ComConfigurationUseDet.isTrue){%>
#define COM_START_SEC_CONST_8BIT
#include "MemMap.h"
extern CONST(uint8, COM_CONST)                      Com_iSignalDirectionById[];
<%if (varGet("AllSignalGroupNumber") > 0){%>
extern CONST(uint8, COM_CONST)                      Com_iSignalGroupingById[];
extern CONST(uint8, COM_CONST)                      Com_iSignalGroupDirectionById[];
<%}%>
#define COM_STOP_SEC_CONST_8BIT
#include "MemMap.h"
<%}%>
«ENDREM»
«IF ComGeneral.ComConfigurationUseDet.value»
#define COM_START_SEC_CONST_8BIT
#include "MemMap.h"
extern CONST(uint8, COM_CONST)                      Com_iSignalDirectionById[];
	«IF intVarGet("AllSignalGroupNumber") > 0»
extern CONST(uint8, COM_CONST)                      Com_iSignalGroupingById[];
extern CONST(uint8, COM_CONST)                      Com_iSignalGroupDirectionById[];
	«ENDIF»
#define COM_STOP_SEC_CONST_8BIT
#include "MemMap.h"
«ENDIF»

«ENDDEFINE»


«DEFINE gceDeclarationsOfConfigurationsDepedent FOR ARRoot::Com»
/*****************************************************************************/
/* DECLARATION OF CONFIGURATION DEPENDENT VARIABLES OF MODULE                */
/*****************************************************************************/
«REM»
#define COM_START_SEC_VAR_NOINIT_UNSPECIFIED
#include "MemMap.h"
<%if (varGet("RxIPduNumber") > 0){%>
extern VAR(Com_RxIpduInfoType, COM_VAR_NOINIT)       Com_RxIpduInfo[];
<%}%>
<%if (varGet("TxIPduNumber") > 0){%>
extern VAR(Com_TxIpduInfoType, COM_VAR_NOINIT)       Com_TxIpduInfo[];
<%}%>
#define COM_STOP_SEC_VAR_NOINIT_UNSPECIFIED
#include "MemMap.h"
<%if (varGet("TxIPduNumber") > 0){%>
#define COM_START_SEC_VAR_NOINIT_8BIT
#include "MemMap.h"
extern VAR(uint8, COM_VAR_NOINIT) Com_iTxIPduTransmitCycle[];
#define COM_STOP_SEC_VAR_NOINIT_8BIT
#include "MemMap.h"
<%}%>
«ENDREM»
#define COM_START_SEC_VAR_NOINIT_UNSPECIFIED
#include "MemMap.h"
«IF intVarGet("RxIPduNumber") > 0»
extern VAR(Com_RxIpduInfoType, COM_VAR_NOINIT)       Com_RxIpduInfo[];
«ENDIF»
«IF intVarGet("TxIPduNumber") > 0»
extern VAR(Com_TxIpduInfoType, COM_VAR_NOINIT)       Com_TxIpduInfo[];
«ENDIF»
#define COM_STOP_SEC_VAR_NOINIT_UNSPECIFIED
#include "MemMap.h"
«IF intVarGet("TxIPduNumber") > 0»
#define COM_START_SEC_VAR_NOINIT_8BIT
#include "MemMap.h"
extern VAR(uint8, COM_VAR_NOINIT) Com_iTxIPduTransmitCycle[];
#define COM_STOP_SEC_VAR_NOINIT_8BIT
#include "MemMap.h"
«ENDIF»

«REM»
<%if (varGet("FilterOccurenceIdxNumber") > 0){%>
#define COM_START_SEC_VAR_NOINIT_<%varGet("MaxFilterOccurenceValueBits")%>BIT
#include "MemMap.h"
extern VAR(uint<%varGet("MaxFilterOccurenceValueBits")%>, COM_VAR_NOINIT) Com_iFilterOccurence[];
#define COM_STOP_SEC_VAR_NOINIT_<%varGet("MaxFilterOccurenceValueBits")%>BIT
#include "MemMap.h"
<%}%>
«ENDREM»
«IF intVarGet("FilterOccurenceIdxNumber") > 0»
#define COM_START_SEC_VAR_NOINIT_<%varGet("MaxFilterOccurenceValueBits")%>BIT
#include "MemMap.h"
extern VAR(uint<%varGet("MaxFilterOccurenceValueBits")%>, COM_VAR_NOINIT) Com_iFilterOccurence[];
#define COM_STOP_SEC_VAR_NOINIT_<%varGet("MaxFilterOccurenceValueBits")%>BIT
#include "MemMap.h"
«ENDIF»

«REM»
#define COM_START_SEC_VAR_NOINIT_<%varGet("MaxIpduIndexBits")%>BIT
#include "MemMap.h"
<%if (varGet("RxIPduNumber") > 0){%>
extern VAR(uint<%varGet("MaxIpduIndexBits")%>, COM_VAR_NOINIT) Com_iRxIpduNextReceivedIdx[];
<%}%>
<%if (varGet("TxIPduNumber") > 0){%>
extern VAR(uint<%varGet("MaxIpduIndexBits")%>, COM_VAR_NOINIT) Com_iTxIpduNextConfirmIpduIdx[];
<%}%>
#define COM_STOP_SEC_VAR_NOINIT_<%varGet("MaxIpduIndexBits")%>BIT
#include "MemMap.h"
«ENDREM»
#define COM_START_SEC_VAR_NOINIT_«varGet("MaxIpduIndexBits")»BIT
#include "MemMap.h"
«IF intVarGet("RxIPduNumber") > 0»
extern VAR(uint«varGet("MaxIpduIndexBits")», COM_VAR_NOINIT) Com_iRxIpduNextReceivedIdx[];
«ENDIF»
«IF intVarGet("TxIPduNumber") > 0»
extern VAR(uint«varGet("MaxIpduIndexBits")», COM_VAR_NOINIT) Com_iTxIpduNextConfirmIpduIdx[];
«ENDIF»
#define COM_STOP_SEC_VAR_NOINIT_«varGet("MaxIpduIndexBits")»BIT
#include "MemMap.h"

«REM»
#define COM_START_SEC_VAR_NOINIT_8BIT
#include "MemMap.h"
<%if (varGet("TxSignalFilterNumber") > 0){%>
extern VAR(uint8, COM_VAR_NOINIT) Com_iTxSgFilterResult[];
<%}%>
<%if (varGet("TxGroupSignalFilterNumber") > 0){%>
extern VAR(uint8, COM_VAR_NOINIT) Com_iTxGrSgFilterResult[];
<%}%>
<%if (varGet("RxSignalNumber") > 0){%>
extern VAR(uint8, COM_VAR_NOINIT) Com_iCurrentRxSgValuePtrIsInit[];
<%}%>
<%if (varGet("RxGroupSignalNumber") > 0){%>
extern VAR(uint8, COM_VAR_NOINIT) Com_iCurrentRxGrSgValuePtrIsInit[];
<%}%>
#define COM_STOP_SEC_VAR_NOINIT_8BIT
#include "MemMap.h"
«ENDREM»
#define COM_START_SEC_VAR_NOINIT_8BIT
#include "MemMap.h"
«IF intVarGet("TxSignalFilterNumber") > 0»
extern VAR(uint8, COM_VAR_NOINIT) Com_iTxSgFilterResult[];
«ENDIF»
«IF intVarGet("TxGroupSignalFilterNumber") > 0»
extern VAR(uint8, COM_VAR_NOINIT) Com_iTxGrSgFilterResult[];
«ENDIF»
«IF intVarGet("RxSignalNumber") > 0»
extern VAR(uint8, COM_VAR_NOINIT) Com_iCurrentRxSgValuePtrIsInit[];
«ENDIF»
«IF intVarGet("RxGroupSignalNumber") > 0»
extern VAR(uint8, COM_VAR_NOINIT) Com_iCurrentRxGrSgValuePtrIsInit[];
«ENDIF»
#define COM_STOP_SEC_VAR_NOINIT_8BIT
#include "MemMap.h"

«REM»
<%if (varGet("RxIPduDeadlineNumber") > 0){%>
/* Rx IPdu deadline monitoring */
#define COM_START_SEC_VAR_NOINIT_<%varGet("MaxRxIPduDeadlineTimerBits")%>BIT
#include "MemMap.h"
extern VAR(uint<%varGet("MaxRxIPduDeadlineTimerBits")%>, COM_VAR_NOINIT) Com_iRxIPduDeadlineTimer[];
#define COM_STOP_SEC_VAR_NOINIT_<%varGet("MaxRxIPduDeadlineTimerBits")%>BIT
#include "MemMap.h"
#define COM_START_SEC_VAR_NOINIT_<%varGet("MaxIpduIndexBits")%>BIT
#include "MemMap.h"
extern VAR(uint<%varGet("MaxIpduIndexBits")%>, COM_VAR_NOINIT) Com_iRxIPduDeadlineNextIdx[];
extern VAR(uint<%varGet("MaxIpduIndexBits")%>, COM_VAR_NOINIT) Com_iRxIPduDeadlinePreviousIdx[];
#define COM_STOP_SEC_VAR_NOINIT_<%varGet("MaxIpduIndexBits")%>BIT
#include "MemMap.h"
#define COM_START_SEC_CONST_UNSPECIFIED
#include "MemMap.h"
extern CONST(Com_IPduIndexType, COM_CONST)	Com_iRxIPduDeadlineNumber;
#define COM_STOP_SEC_CONST_UNSPECIFIED
#include "MemMap.h"
<%}%>
«ENDREM»
«IF intVarGet("RxIPduDeadlineNumber") > 0»
/* Rx IPdu deadline monitoring */
#define COM_START_SEC_VAR_NOINIT_«intVarGet("MaxRxIPduDeadlineTimerBits")»BIT
#include "MemMap.h"
extern VAR(uint«intVarGet("MaxRxIPduDeadlineTimerBits")», COM_VAR_NOINIT) Com_iRxIPduDeadlineTimer[];
#define COM_STOP_SEC_VAR_NOINIT_«intVarGet("MaxRxIPduDeadlineTimerBits")»BIT
#include "MemMap.h"
#define COM_START_SEC_VAR_NOINIT_«intVarGet("MaxIpduIndexBits")»BIT
#include "MemMap.h"
extern VAR(uint«intVarGet("MaxIpduIndexBits")», COM_VAR_NOINIT) Com_iRxIPduDeadlineNextIdx[];
extern VAR(uint«intVarGet("MaxIpduIndexBits")», COM_VAR_NOINIT) Com_iRxIPduDeadlinePreviousIdx[];
#define COM_STOP_SEC_VAR_NOINIT_«intVarGet("MaxIpduIndexBits")»BIT
#include "MemMap.h"
#define COM_START_SEC_CONST_UNSPECIFIED
#include "MemMap.h"
extern CONST(Com_IPduIndexType, COM_CONST)	Com_iRxIPduDeadlineNumber;
#define COM_STOP_SEC_CONST_UNSPECIFIED
#include "MemMap.h"
«ENDIF»

«REM»
<%if (varGet("TxIPduDeadlineNumber") > 0){%>
/* Tx IPdu deadline monitoring */
#define COM_START_SEC_VAR_NOINIT_<%varGet("MaxTxIPduDeadlineTimerBits")%>BIT
#include "MemMap.h"
typedef uint<%varGet("MaxTxIPduDeadlineTimerBits")%> Com_TxIPduDeadlineTimerType;
extern VAR(Com_TxIPduDeadlineTimerType, COM_VAR_NOINIT) Com_iTxIPduDeadlineTimer[];
#define COM_STOP_SEC_VAR_NOINIT_<%varGet("MaxTxIPduDeadlineTimerBits")%>BIT
#include "MemMap.h"
#define COM_START_SEC_VAR_NOINIT_<%varGet("MaxIpduIndexBits")%>BIT
#include "MemMap.h"
extern VAR(uint<%varGet("MaxIpduIndexBits")%>, COM_VAR_NOINIT) Com_iTxIPduDeadlineNextIdx[];
#define COM_STOP_SEC_VAR_NOINIT_<%varGet("MaxIpduIndexBits")%>BIT
#include "MemMap.h"
#define COM_START_SEC_CONST_UNSPECIFIED
#include "MemMap.h"
extern CONST(Com_IPduIndexType, COM_CONST)	Com_iTxIPduDeadlineNumber;
#define COM_STOP_SEC_CONST_UNSPECIFIED
#include "MemMap.h"
<%}%>
«ENDREM»
«IF intVarGet("TxIPduDeadlineNumber") > 0»
/* Tx IPdu deadline monitoring */
#define COM_START_SEC_VAR_NOINIT_«intVarGet("MaxTxIPduDeadlineTimerBits")»BIT
#include "MemMap.h"
typedef uint«intVarGet("MaxTxIPduDeadlineTimerBits")» Com_TxIPduDeadlineTimerType;
extern VAR(Com_TxIPduDeadlineTimerType, COM_VAR_NOINIT) Com_iTxIPduDeadlineTimer[];
#define COM_STOP_SEC_VAR_NOINIT_«intVarGet("MaxTxIPduDeadlineTimerBits")»BIT
#include "MemMap.h"
#define COM_START_SEC_VAR_NOINIT_«intVarGet("MaxIpduIndexBits")»BIT
#include "MemMap.h"
extern VAR(uint«intVarGet("MaxIpduIndexBits")», COM_VAR_NOINIT) Com_iTxIPduDeadlineNextIdx[];
#define COM_STOP_SEC_VAR_NOINIT_«intVarGet("MaxIpduIndexBits")»BIT
#include "MemMap.h"
#define COM_START_SEC_CONST_UNSPECIFIED
#include "MemMap.h"
extern CONST(Com_IPduIndexType, COM_CONST)	Com_iTxIPduDeadlineNumber;
#define COM_STOP_SEC_CONST_UNSPECIFIED
#include "MemMap.h"
«ENDIF»

«REM»
<%if (varGet("TxIPduDirectTimerNumber") > 0){%>
/* Tx IPdu direct transmission monitoring */
#define COM_START_SEC_VAR_NOINIT_<%varGet("MaxTxIPduDirectTimerBits")%>BIT
#include "MemMap.h"
typedef uint<%varGet("MaxTxIPduDirectTimerBits")%> Com_DirectSendTimerType;
extern VAR(Com_DirectSendTimerType, COM_VAR_NOINIT) Com_iTxIPduDirectTimer[];
#define COM_STOP_SEC_VAR_NOINIT_<%varGet("MaxTxIPduDirectTimerBits")%>BIT
#include "MemMap.h"
#define COM_START_SEC_VAR_NOINIT_8BIT
#include "MemMap.h"
extern VAR(uint8, COM_VAR_NOINIT) Com_iTxIPduRepetNumber[];
#define COM_STOP_SEC_VAR_NOINIT_8BIT
#include "MemMap.h"
#define COM_START_SEC_VAR_NOINIT_<%varGet("MaxIpduIndexBits")%>BIT
#include "MemMap.h"
extern VAR(uint<%varGet("MaxIpduIndexBits")%>, COM_VAR_NOINIT) Com_iTxIPduDirectNextIdx[];
#define COM_STOP_SEC_VAR_NOINIT_<%varGet("MaxIpduIndexBits")%>BIT
#include "MemMap.h"
#define COM_START_SEC_CONST_UNSPECIFIED
#include "MemMap.h"
extern CONST(Com_IPduIndexType, COM_CONST)	Com_iTxIPduDirectTimerNumber;
#define COM_STOP_SEC_CONST_UNSPECIFIED
#include "MemMap.h"
<%}%>
«ENDREM»
«IF intVarGet("TxIPduDirectTimerNumber") > 0»
/* Tx IPdu direct transmission monitoring */
#define COM_START_SEC_VAR_NOINIT_«intVarGet("MaxTxIPduDirectTimerBits")»BIT
#include "MemMap.h"
typedef uint«intVarGet("MaxTxIPduDirectTimerBits")» Com_DirectSendTimerType;
extern VAR(Com_DirectSendTimerType, COM_VAR_NOINIT) Com_iTxIPduDirectTimer[];
#define COM_STOP_SEC_VAR_NOINIT_«intVarGet("MaxTxIPduDirectTimerBits")»BIT
#include "MemMap.h"
#define COM_START_SEC_VAR_NOINIT_8BIT
#include "MemMap.h"
extern VAR(uint8, COM_VAR_NOINIT) Com_iTxIPduRepetNumber[];
#define COM_STOP_SEC_VAR_NOINIT_8BIT
#include "MemMap.h"
#define COM_START_SEC_VAR_NOINIT_«intVarGet("MaxIpduIndexBits")»BIT
#include "MemMap.h"
extern VAR(uint«intVarGet("MaxIpduIndexBits")», COM_VAR_NOINIT) Com_iTxIPduDirectNextIdx[];
#define COM_STOP_SEC_VAR_NOINIT_«intVarGet("MaxIpduIndexBits")»BIT
#include "MemMap.h"
#define COM_START_SEC_CONST_UNSPECIFIED
#include "MemMap.h"
extern CONST(Com_IPduIndexType, COM_CONST)	Com_iTxIPduDirectTimerNumber;
#define COM_STOP_SEC_CONST_UNSPECIFIED
#include "MemMap.h"
«ENDIF»

«REM»
<%if (varGet("TxIPduPeriodicTimerNumber") > 0){%>
/* Tx IPdu periodic transmission monitoring */
#define COM_START_SEC_VAR_NOINIT_<%varGet("MaxTxIPduPeriodicTimerBits")%>BIT
#include "MemMap.h"
typedef uint<%varGet("MaxTxIPduPeriodicTimerBits")%> Com_PeriodicTimerType;
extern VAR(Com_PeriodicTimerType, COM_VAR_NOINIT) Com_iTxIPduPeriodicTimer[];
#define COM_STOP_SEC_VAR_NOINIT_<%varGet("MaxTxIPduPeriodicTimerBits")%>BIT
#include "MemMap.h"
#define COM_START_SEC_VAR_NOINIT_<%varGet("MaxIpduIndexBits")%>BIT
#include "MemMap.h"
extern VAR(uint<%varGet("MaxIpduIndexBits")%>, COM_VAR_NOINIT) Com_iTxIPduPeriodicNextIdx[];
#define COM_STOP_SEC_VAR_NOINIT_<%varGet("MaxIpduIndexBits")%>BIT
#include "MemMap.h"
#define COM_START_SEC_CONST_UNSPECIFIED
#include "MemMap.h"
extern CONST(Com_IPduIndexType, COM_CONST)	Com_iTxIPduPeriodicTimerNumber;
#define COM_STOP_SEC_CONST_UNSPECIFIED
#include "MemMap.h"
<%}%>
«ENDREM»
«IF intVarGet("TxIPduPeriodicTimerNumber") > 0»
/* Tx IPdu periodic transmission monitoring */
#define COM_START_SEC_VAR_NOINIT_«intVarGet("MaxTxIPduPeriodicTimerBits")»BIT
#include "MemMap.h"
typedef uint«intVarGet("MaxTxIPduPeriodicTimerBits")» Com_PeriodicTimerType;
extern VAR(Com_PeriodicTimerType, COM_VAR_NOINIT) Com_iTxIPduPeriodicTimer[];
#define COM_STOP_SEC_VAR_NOINIT_«intVarGet("MaxTxIPduPeriodicTimerBits")»BIT
#include "MemMap.h"
#define COM_START_SEC_VAR_NOINIT_«intVarGet("MaxIpduIndexBits")»BIT
#include "MemMap.h"
extern VAR(uint«intVarGet("MaxIpduIndexBits")», COM_VAR_NOINIT) Com_iTxIPduPeriodicNextIdx[];
#define COM_STOP_SEC_VAR_NOINIT_«intVarGet("MaxIpduIndexBits")»BIT
#include "MemMap.h"
#define COM_START_SEC_CONST_UNSPECIFIED
#include "MemMap.h"
extern CONST(Com_IPduIndexType, COM_CONST)	Com_iTxIPduPeriodicTimerNumber;
#define COM_STOP_SEC_CONST_UNSPECIFIED
#include "MemMap.h"
«ENDIF»

«REM»
<%if (varGet("TxIPduMDTimerNumber") > 0){%>
/* Tx IPdu MDT monitoring */
#define COM_START_SEC_VAR_NOINIT_<%varGet("MaxTxIPduMDTimerBits")%>BIT
#include "MemMap.h"
typedef uint<%varGet("MaxTxIPduMDTimerBits")%> Com_MDTimerType;
extern VAR(Com_MDTimerType, COM_VAR_NOINIT) Com_iTxIPduMDTimer[];
#define COM_STOP_SEC_VAR_NOINIT_<%varGet("MaxTxIPduMDTimerBits")%>BIT
#include "MemMap.h"
#define COM_START_SEC_VAR_NOINIT_<%varGet("MaxIpduIndexBits")%>BIT
#include "MemMap.h"
extern VAR(uint<%varGet("MaxIpduIndexBits")%>, COM_VAR_NOINIT) Com_iTxIPduMDTNextIdx[];
#define COM_STOP_SEC_VAR_NOINIT_<%varGet("MaxIpduIndexBits")%>BIT
#include "MemMap.h"
#define COM_START_SEC_CONST_UNSPECIFIED
#include "MemMap.h"
extern CONST(Com_IPduIndexType, COM_CONST)	Com_iTxIPduMDTimerNumber;
#define COM_STOP_SEC_CONST_UNSPECIFIED
#include "MemMap.h"
<%}%>
«ENDREM»
«IF intVarGet("TxIPduMDTimerNumber") > 0»
/* Tx IPdu MDT monitoring */
#define COM_START_SEC_VAR_NOINIT_«varGet("MaxTxIPduMDTimerBits")»BIT
#include "MemMap.h"
typedef uint«varGet("MaxTxIPduMDTimerBits")» Com_MDTimerType;
extern VAR(Com_MDTimerType, COM_VAR_NOINIT) Com_iTxIPduMDTimer[];
#define COM_STOP_SEC_VAR_NOINIT_«varGet("MaxTxIPduMDTimerBits")»BIT
#include "MemMap.h"
#define COM_START_SEC_VAR_NOINIT_«varGet("MaxIpduIndexBits")»BIT
#include "MemMap.h"
extern VAR(uint«varGet("MaxIpduIndexBits")», COM_VAR_NOINIT) Com_iTxIPduMDTNextIdx[];
#define COM_STOP_SEC_VAR_NOINIT_«varGet("MaxIpduIndexBits")»BIT
#include "MemMap.h"
#define COM_START_SEC_CONST_UNSPECIFIED
#include "MemMap.h"
extern CONST(Com_IPduIndexType, COM_CONST)	Com_iTxIPduMDTimerNumber;
#define COM_STOP_SEC_CONST_UNSPECIFIED
#include "MemMap.h"
«ENDIF»

«REM»
<%if (varGet("RxSgDeadlineNumber") > 0){%>
/* Signal deadline monitoring */
#define COM_START_SEC_VAR_NOINIT_<%varGet("MaxRxSgDeadlineTimerBits")%>BIT
#include "MemMap.h"
extern VAR(uint<%varGet("MaxRxSgDeadlineTimerBits")%>, COM_VAR_NOINIT) Com_iRxSgDeadlineTimer[];
#define COM_STOP_SEC_VAR_NOINIT_<%varGet("MaxRxSgDeadlineTimerBits")%>BIT
#include "MemMap.h"
#define COM_START_SEC_VAR_NOINIT_<%varGet("MaxSingleSignalIndexBits")%>BIT
#include "MemMap.h"
extern VAR(uint<%varGet("MaxSingleSignalIndexBits")%>, COM_VAR_NOINIT) Com_iRxSgDeadlineNextIdx[];
extern VAR(uint<%varGet("MaxSingleSignalIndexBits")%>, COM_VAR_NOINIT) Com_iRxSgDeadlinePreviousIdx[];
#define COM_STOP_SEC_VAR_NOINIT_<%varGet("MaxSingleSignalIndexBits")%>BIT
#include "MemMap.h"
#define COM_START_SEC_CONST_UNSPECIFIED
#include "MemMap.h"
extern CONST(Com_SingleSignalIndexType, COM_CONST)	Com_iRxSgDeadlineNumber;
#define COM_STOP_SEC_CONST_UNSPECIFIED
#include "MemMap.h"
<%}%>
«ENDREM»
«IF intVarGet("RxSgDeadlineNumber") > 0»
/* Signal deadline monitoring */
#define COM_START_SEC_VAR_NOINIT_«varGet("MaxRxSgDeadlineTimerBits")»BIT
#include "MemMap.h"
extern VAR(uint«varGet("MaxRxSgDeadlineTimerBits")», COM_VAR_NOINIT) Com_iRxSgDeadlineTimer[];
#define COM_STOP_SEC_VAR_NOINIT_<%varGet("MaxRxSgDeadlineTimerBits")»BIT
#include "MemMap.h"
#define COM_START_SEC_VAR_NOINIT_<%varGet("MaxSingleSignalIndexBits")»BIT
#include "MemMap.h"
extern VAR(uint«varGet("MaxSingleSignalIndexBits")», COM_VAR_NOINIT) Com_iRxSgDeadlineNextIdx[];
extern VAR(uint«varGet("MaxSingleSignalIndexBits")», COM_VAR_NOINIT) Com_iRxSgDeadlinePreviousIdx[];
#define COM_STOP_SEC_VAR_NOINIT_«varGet("MaxSingleSignalIndexBits")»BIT
#include "MemMap.h"
#define COM_START_SEC_CONST_UNSPECIFIED
#include "MemMap.h"
extern CONST(Com_SingleSignalIndexType, COM_CONST)	Com_iRxSgDeadlineNumber;
#define COM_STOP_SEC_CONST_UNSPECIFIED
#include "MemMap.h"
«ENDIF»

«REM»
<%if (varGet("RxSgGrDeadlineNumber") > 0){%>
/* Signal Group deadline monitoring */
#define COM_START_SEC_VAR_NOINIT_<%varGet("MaxRxSgGrDeadlineTimerBits")%>BIT
#include "MemMap.h"
extern VAR(uint<%varGet("MaxRxSgGrDeadlineTimerBits")%>, COM_VAR_NOINIT) Com_iRxSgGrDeadlineTimer[];
#define COM_STOP_SEC_VAR_NOINIT_<%varGet("MaxRxSgGrDeadlineTimerBits")%>BIT
#include "MemMap.h"
#define COM_START_SEC_VAR_NOINIT_<%varGet("MaxSignalGroupIndexBits")%>BIT
#include "MemMap.h"
extern VAR(uint<%varGet("MaxSignalGroupIndexBits")%>, COM_VAR_NOINIT) Com_iRxSgGrDeadlineNextIdx[];
extern VAR(uint<%varGet("MaxSignalGroupIndexBits")%>, COM_VAR_NOINIT) Com_iRxSgGrDeadlinePreviousIdx[];
#define COM_STOP_SEC_VAR_NOINIT_<%varGet("MaxSignalGroupIndexBits")%>BIT
#include "MemMap.h"
#define COM_START_SEC_CONST_UNSPECIFIED
#include "MemMap.h"
extern CONST(Com_SignalGroupIndexType, COM_CONST)	Com_iRxSgGrDeadlineNumber;
#define COM_STOP_SEC_CONST_UNSPECIFIED
#include "MemMap.h"
<%}%>
«ENDREM»
«IF intVarGet("RxSgGrDeadlineNumber") > 0»
/* Signal Group deadline monitoring */
#define COM_START_SEC_VAR_NOINIT_«varGet("MaxRxSgGrDeadlineTimerBits")»BIT
#include "MemMap.h"
extern VAR(uint«varGet("MaxRxSgGrDeadlineTimerBits")», COM_VAR_NOINIT) Com_iRxSgGrDeadlineTimer[];
#define COM_STOP_SEC_VAR_NOINIT_«varGet("MaxRxSgGrDeadlineTimerBits")»BIT
#include "MemMap.h"
#define COM_START_SEC_VAR_NOINIT_«varGet("MaxSignalGroupIndexBits")»BIT
#include "MemMap.h"
extern VAR(uint«varGet("MaxSignalGroupIndexBits")», COM_VAR_NOINIT) Com_iRxSgGrDeadlineNextIdx[];
extern VAR(uint«varGet("MaxSignalGroupIndexBits")», COM_VAR_NOINIT) Com_iRxSgGrDeadlinePreviousIdx[];
#define COM_STOP_SEC_VAR_NOINIT_«varGet("MaxSignalGroupIndexBits")»BIT
#include "MemMap.h"
#define COM_START_SEC_CONST_UNSPECIFIED
#include "MemMap.h"
extern CONST(Com_SignalGroupIndexType, COM_CONST)	Com_iRxSgGrDeadlineNumber;
#define COM_STOP_SEC_CONST_UNSPECIFIED
#include "MemMap.h"
«ENDIF»


/* Routing Lists */
«REM»
<%if (varGet("RxSgRoutingListIdxNumber") > 0){%>
#define COM_START_SEC_VAR_NOINIT_<%varGet("MaxSingleSignalIndexBits")%>BIT
#include "MemMap.h"
extern VAR(uint<%varGet("MaxSingleSignalIndexBits")%>, COM_VAR_NOINIT) Com_iRxSgNextRoutingIdx[];
#define COM_STOP_SEC_VAR_NOINIT_<%varGet("MaxSingleSignalIndexBits")%>BIT
#include "MemMap.h"
#define COM_START_SEC_CONST_UNSPECIFIED
#include "MemMap.h"
extern CONST(Com_SingleSignalIndexType, COM_CONST)	Com_iRxSgRoutingListIdxNumber;
#define COM_STOP_SEC_CONST_UNSPECIFIED
#include "MemMap.h"
<%}%>
«ENDREM»
«IF intVarGet("RxSgRoutingListIdxNumber") > 0»
#define COM_START_SEC_VAR_NOINIT_«varGet("MaxSingleSignalIndexBits")»BIT
#include "MemMap.h"
extern VAR(uint«varGet("MaxSingleSignalIndexBits")», COM_VAR_NOINIT) Com_iRxSgNextRoutingIdx[];
#define COM_STOP_SEC_VAR_NOINIT_«varGet("MaxSingleSignalIndexBits")»BIT
#include "MemMap.h"
#define COM_START_SEC_CONST_UNSPECIFIED
#include "MemMap.h"
extern CONST(Com_SingleSignalIndexType, COM_CONST)	Com_iRxSgRoutingListIdxNumber;
#define COM_STOP_SEC_CONST_UNSPECIFIED
#include "MemMap.h"
«ENDIF»

«REM»
<%if (varGet("RxSgGrRoutingListIdxNumber") > 0){%>
#define COM_START_SEC_VAR_NOINIT_<%varGet("MaxSignalGroupIndexBits")%>BIT
#include "MemMap.h"
extern VAR(uint<%varGet("MaxSignalGroupIndexBits")%>, COM_VAR_NOINIT) Com_iRxSgGrNextRoutingIdx[];
#define COM_STOP_SEC_VAR_NOINIT_<%varGet("MaxSignalGroupIndexBits")%>BIT
#include "MemMap.h"
#define COM_START_SEC_CONST_UNSPECIFIED
#include "MemMap.h"
extern CONST(Com_SignalGroupIndexType, COM_CONST)	Com_iRxSgGrRoutingListIdxNumber;
#define COM_STOP_SEC_CONST_UNSPECIFIED
#include "MemMap.h"
<%}%>
«ENDREM»
«IF intVarGet("RxSgGrRoutingListIdxNumber") > 0»
#define COM_START_SEC_VAR_NOINIT_«varGet("MaxSignalGroupIndexBits")»BIT
#include "MemMap.h"
extern VAR(uint«varGet("MaxSignalGroupIndexBits")», COM_VAR_NOINIT) Com_iRxSgGrNextRoutingIdx[];
#define COM_STOP_SEC_VAR_NOINIT_«varGet("MaxSignalGroupIndexBits")»BIT
#include "MemMap.h"
#define COM_START_SEC_CONST_UNSPECIFIED
#include "MemMap.h"
extern CONST(Com_SignalGroupIndexType, COM_CONST)	Com_iRxSgGrRoutingListIdxNumber;
#define COM_STOP_SEC_CONST_UNSPECIFIED
#include "MemMap.h"
«ENDIF»

«REM»
<%if (varGet("RxGrSgRoutingListIdxNumber") > 0){%>
#define COM_START_SEC_VAR_NOINIT_<%varGet("MaxGroupSignalIndexBits")%>BIT
#include "MemMap.h"
extern VAR(uint<%varGet("MaxGroupSignalIndexBits")%>, COM_VAR_NOINIT) Com_iRxGrSgNextRoutingIdx[];
#define COM_STOP_SEC_VAR_NOINIT_<%varGet("MaxGroupSignalIndexBits")%>BIT
#include "MemMap.h"
#define COM_START_SEC_CONST_UNSPECIFIED
#include "MemMap.h"
extern CONST(Com_GroupSignalIndexType, COM_CONST)	Com_iRxGrSgRoutingListIdxNumber;
#define COM_STOP_SEC_CONST_UNSPECIFIED
#include "MemMap.h"
<%}%>
«ENDREM»
«IF intVarGet("RxGrSgRoutingListIdxNumber") > 0»
#define COM_START_SEC_VAR_NOINIT_«varGet("MaxGroupSignalIndexBits")»BIT
#include "MemMap.h"
extern VAR(uint«varGet("MaxGroupSignalIndexBits")», COM_VAR_NOINIT) Com_iRxGrSgNextRoutingIdx[];
#define COM_STOP_SEC_VAR_NOINIT_«varGet("MaxGroupSignalIndexBits")»BIT
#include "MemMap.h"
#define COM_START_SEC_CONST_UNSPECIFIED
#include "MemMap.h"
extern CONST(Com_GroupSignalIndexType, COM_CONST)	Com_iRxGrSgRoutingListIdxNumber;
#define COM_STOP_SEC_CONST_UNSPECIFIED
#include "MemMap.h"
«ENDIF»

«ENDDEFINE»


«REM»
<%script type="autosar.objects" name="gceTxSgGrCfgType_Cbks" post="trim()"%>
VAR(<%if (varGet("TxSignalGroupErrorNotificationCbkCounter")-1 < 256){%>uint8 <%}else{%>uint16<%}%>, TYPEDEF)                      ErrorNotificationCbkIdx;
VAR(<%if (varGet("TxSignalGroupTimeoutNotificationCbkCounter")-1 < 256){%>uint8 <%}else{%>uint16<%}%>, TYPEDEF)                      TimeoutNotificationCbkIdx;
VAR(<%if (varGet("TxSignalGroupNotificationCbkCounter")-1 < 256){%>uint8 <%}else{%>uint16<%}%>, TYPEDEF)                      NotificationCbkIdx;
«ENDREM»
«DEFINE gceTxSgGrCfgType_Cbks FOR ARRoot::Com»
VAR(«IF (intVarGet("TxSignalGroupErrorNotificationCbkCounter")-1) < 256»uint8«ELSE»uint16«ENDIF», TYPEDEF)                      ErrorNotificationCbkIdx;
VAR(«IF (intVarGet("TxSignalGroupTimeoutNotificationCbkCounter")-1) < 256»uint8«ELSE»uint16«ENDIF», TYPEDEF)                      TimeoutNotificationCbkIdx;
VAR(«IF (intVarGet("TxSignalGroupNotificationCbkCounter")-1) < 256»uint8«ELSE»uint16«ENDIF», TYPEDEF)                      NotificationCbkIdx;
«ENDDEFINE»
