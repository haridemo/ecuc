«EXTENSION org::eclipse::xtend::util::stdlib::io»
«EXTENSION org::eclipse::xtend::util::stdlib::globalvar»
«EXTENSION extensions::common»
«EXTENSION extensions::com»
«EXTENSION extensions::stack»

«DEFINE inclusions FOR ARRoot::Com -»
/*****************************************************************************/
/* INCLUSIONS                                                                */
/*****************************************************************************/
#include "ComStack_Types.h"
#include "Com_Cfg.h"
#include "Com_Cbk.h"
«REM»
<%for (Com.ComGeneral.ComRteCbkIncludeFile[isConfig()]){%>
#include "<%value%>"
<%}%>
«ENDREM»
«FOREACH ComGeneral.ComRteCbkIncludeFiles AS file -»
#include "«file.value»"
«ENDFOREACH -»

«ENDDEFINE»


«DEFINE configurationDependentData FOR ARRoot::Com -»
/*****************************************************************************/
/* DEFINITION OF CONFIGURATION DEPENDENT DATA                                */
/*****************************************************************************/
#define COM_START_SEC_VAR_NOINIT_BOOLEAN
#include "MemMap.h"
/* Signal Value */
«REM»
<%for (Com.gceSignalSort()){%>
	<%if (ComSignalType.isBOOLEAN){%>
STATIC VAR(boolean, COM_VAR_NOINIT)  Com_SignalValue<%i()%>;
	<%}%>
<%}%>
«ENDREM»
«FOREACH gceSignalSort() AS iter ITERATOR i -»
	«IF iter.ComSignalType.isBOOLEAN() -»
STATIC VAR(boolean, COM_VAR_NOINIT)  Com_SignalValue«i.counter0»;	
	«ENDIF -»
«ENDFOREACH -»
«REM»
<%for (Com.gceGroupSignalSort()){%>
	<%if (ComSignalType.isBOOLEAN){%>
STATIC VAR(boolean, COM_VAR_NOINIT)  Com_GroupSignalValue<%i()%>;
	<%}%>
<%}%>
«ENDREM»
«FOREACH gceGroupSignalSort() AS iter ITERATOR i -»
	«IF iter.ComSignalType.isBOOLEAN() -»
STATIC VAR(boolean, COM_VAR_NOINIT)  Com_GroupSignalValue«i.counter0»;	
	«ENDIF -»
«ENDFOREACH -»
#define COM_STOP_SEC_VAR_NOINIT_BOOLEAN
#include "MemMap.h"


#define COM_START_SEC_CONST_BOOLEAN
#include "MemMap.h"
/* Signal Init Values */
«REM»<%gceBooleanInitValues()%>«ENDREM»
«EXPAND ComStatic::gceBooleanInitValues -»

/* Signal Invalid Values */
«REM»<%gceBooleanInvalidValues()%>«ENDREM»
«EXPAND ComStatic::gceBooleanInvalidValues -»
#define COM_STOP_SEC_CONST_BOOLEAN
#include "MemMap.h"

#define AUTOSAR_START_COMSTACKDATA_8BIT
#include "MemMap.h"
/* Ipdu Values */
«REM»
<%for (Com.gceRxIPduSort()){%>
STATIC VAR(uint8, AUTOSAR_COMSTACKDATA)  Com_RxIpduValue<%i()%>[<%gceIPduLength()%>];
<%}%>
«ENDREM»
«FOREACH gceRxIPduSort() AS rxIPdu ITERATOR i -»
STATIC VAR(uint8, AUTOSAR_COMSTACKDATA)  Com_RxIpduValue«i.counter0»[«rxIPdu.gceIPduLength()»];
«ENDFOREACH -»
«REM»
<%for (Com.gceTxIPdu()){%>
STATIC VAR(uint8, AUTOSAR_COMSTACKDATA)  Com_TxIpduValue<%i()%>[<%gceIPduLength()%>];
<%}%>
«ENDREM»
«REM» WARNING: Is it not gceTxIPduSort instaed of gceTxIPdu «ENDREM»
«FOREACH gceTxIPdu() AS txIPdu ITERATOR i -»
STATIC VAR(uint8, AUTOSAR_COMSTACKDATA)  Com_TxIpduValue«i.counter0»[«txIPdu.gceIPduLength()»];
«ENDFOREACH -»
#define AUTOSAR_STOP_COMSTACKDATA_8BIT
#include "MemMap.h"

#define COM_START_SEC_VAR_NOINIT_8BIT
#include "MemMap.h"
/* Signal Value */
«REM»
<%for (Com.gceSignalSort()){%>
    <%if (ComSignalType.isUINT8){%>
STATIC VAR(uint8, COM_VAR_NOINIT)    Com_SignalValue<%i()%>;
    <%}%>        
    <%if (ComSignalType.isSINT8){%>
STATIC VAR(sint8, COM_VAR_NOINIT)    Com_SignalValue<%i()%>;
    <%}%>        
    <%if (ComSignalType.isUINT8_N){%>
STATIC VAR(uint8, COM_VAR_NOINIT)    Com_SignalValue<%i()%>[<%ComSignalLength.value%>];
    <%}%>        
<%}%>
«ENDREM»
«FOREACH gceSignalSort() AS signal ITERATOR i -»
	«IF signal.ComSignalType.isUINT8() -»
STATIC VAR(uint8, COM_VAR_NOINIT)    Com_SignalValue«i.counter0»;
    «ELSEIF signal.ComSignalType.isSINT8() -»
STATIC VAR(sint8, COM_VAR_NOINIT)    Com_SignalValue«i.counter0»;
    «ELSEIF signal.ComSignalType.isUINT8_N() -»
STATIC VAR(uint8, COM_VAR_NOINIT)    Com_SignalValue«i.counter0»[«signal.ComSignalLength.value»];
    «ENDIF -»  
«ENDFOREACH -»
«REM»
<%for (Com.gceGroupSignalSort()){%>
    <%if (ComSignalType.isUINT8){%>
STATIC VAR(uint8, COM_VAR_NOINIT)    Com_GroupSignalValue<%i()%>;
    <%}%>        
    <%if (ComSignalType.isSINT8){%>
STATIC VAR(sint8, COM_VAR_NOINIT)    Com_GroupSignalValue<%i()%>;
    <%}%>        
    <%if (ComSignalType.isUINT8_N){%>
STATIC VAR(uint8, COM_VAR_NOINIT)    Com_GroupSignalValue<%i()%>[<%ComSignalLength.value%>];
    <%}%>        
<%}%>
«ENDREM»
«FOREACH gceGroupSignalSort() AS signal ITERATOR i -»
	«IF signal.ComSignalType.isUINT8() -»
STATIC VAR(uint8, COM_VAR_NOINIT)    Com_GroupSignalValue«i.counter0»;
    «ELSEIF signal.ComSignalType.isSINT8() -»
STATIC VAR(sint8, COM_VAR_NOINIT)    Com_GroupSignalValue«i.counter0»;
    «ELSEIF signal.ComSignalType.isUINT8_N() -»
STATIC VAR(uint8, COM_VAR_NOINIT)    Com_GroupSignalValue«i.counter0»[«signal.ComSignalLength.value»];
    «ENDIF -»  
«ENDFOREACH -»
#define COM_STOP_SEC_VAR_NOINIT_8BIT
#include "MemMap.h"

#define COM_START_SEC_CONST_8BIT
#include "MemMap.h"
/* Signal Init Values */
«REM» <%gce8BitsInitValues()%> «ENDREM»
«EXPAND ComStatic::gce8BitsInitValues -»

/* Signal Invalid Values */
«REM» <%gce8BitsInvalidValues()%> «ENDREM»
«EXPAND ComStatic::gce8BitsInvalidValues -»
#define COM_STOP_SEC_CONST_8BIT
#include "MemMap.h"

#define COM_START_SEC_VAR_NOINIT_16BIT
#include "MemMap.h"
/* Signal Value */
«REM»
<%for (Com.gceSignalSort()){%>
    <%if (ComSignalType.isUINT16){%>
STATIC VAR(uint16, COM_VAR_NOINIT) Com_SignalValue<%i()%>;
    <%}%>        
    <%if (ComSignalType.isSINT16){%>
STATIC VAR(sint16, COM_VAR_NOINIT) Com_SignalValue<%i()%>;
    <%}%>        
<%}%>
«ENDREM»
«FOREACH gceSignalSort() AS signal ITERATOR i -»
    «IF signal.ComSignalType.isUINT16() -»
STATIC VAR(uint16, COM_VAR_NOINIT) Com_SignalValue«i.counter0»;
    «ELSEIF signal.ComSignalType.isSINT16() -»
STATIC VAR(sint16, COM_VAR_NOINIT) Com_SignalValue«i.counter0»;
    «ENDIF -»          
«ENDFOREACH -»
«REM»
<%for (Com.gceGroupSignalSort()){%>
    <%if (ComSignalType.isUINT16){%>
STATIC VAR(uint16, COM_VAR_NOINIT) Com_GroupSignalValue<%i()%>;
    <%}%>        
    <%if (ComSignalType.isSINT16){%>
STATIC VAR(sint16, COM_VAR_NOINIT) Com_GroupSignalValue<%i()%>;
    <%}%>        
<%}%>
«ENDREM»
«FOREACH gceGroupSignalSort() AS groupSignal ITERATOR i -»
    «IF groupSignal.ComSignalType.isUINT16() -»
STATIC VAR(uint16, COM_VAR_NOINIT) Com_GroupSignalValue«i.counter0»;
    «ELSEIF groupSignal.ComSignalType.isSINT16() -»
STATIC VAR(sint16, COM_VAR_NOINIT) Com_GroupSignalValue«i.counter0»;
    «ENDIF -»          
«ENDFOREACH -»
#define COM_STOP_SEC_VAR_NOINIT_16BIT
#include "MemMap.h"

#define COM_START_SEC_VAR_NOINIT_32BIT
#include "MemMap.h"
/* Signal Value */
«REM»
<%for (Com.gceSignalSort()){%>
    <%if (ComSignalType.isUINT32){%>
STATIC VAR(uint32, COM_VAR_NOINIT) Com_SignalValue<%i()%>;
    <%}%>        
    <%if (ComSignalType.isSINT32){%>
STATIC VAR(sint32, COM_VAR_NOINIT) Com_SignalValue<%i()%>;
    <%}%>        
<%}%>
«ENDREM»
«FOREACH gceSignalSort() AS signal ITERATOR i -»
    «IF signal.ComSignalType.isUINT32() -»
STATIC VAR(uint32, COM_VAR_NOINIT) Com_SignalValue«i.counter0»;
    «ELSEIF signal.ComSignalType.isSINT32() -»
STATIC VAR(sint32, COM_VAR_NOINIT) Com_SignalValue«i.counter0»;
    «ENDIF -»          
«ENDFOREACH -»
«REM»
<%for (Com.gceGroupSignalSort()){%>
    <%if (ComSignalType.isUINT32){%>
STATIC VAR(uint32, COM_VAR_NOINIT) Com_GroupSignalValue<%i()%>;
    <%}%>        
    <%if (ComSignalType.isSINT32){%>
STATIC VAR(sint32, COM_VAR_NOINIT) Com_GroupSignalValue<%i()%>;
    <%}%>        
<%}%>
«ENDREM»
«FOREACH gceGroupSignalSort() AS groupSignal ITERATOR i -»
    «IF groupSignal.ComSignalType.isUINT32() -»
STATIC VAR(uint32, COM_VAR_NOINIT) Com_GroupSignalValue«i.counter0»;
    «ELSEIF groupSignal.ComSignalType.isSINT32() -»
STATIC VAR(sint32, COM_VAR_NOINIT) Com_GroupSignalValue«i.counter0»;
    «ENDIF -»          
«ENDFOREACH -»
#define COM_STOP_SEC_VAR_NOINIT_32BIT
#include "MemMap.h"


#define COM_START_SEC_CONST_16BIT
#include "MemMap.h"
/* Signal Init Value */
«REM»<%gce16BitsInitValues()%>«ENDREM»
«EXPAND ComStatic::gce16BitsInitValues -»
/* Signal Invalid Values */
«REM»<%gce16BitsInvalidValues()%>«ENDREM»
«EXPAND ComStatic::gce16BitsInvalidValues -»
#define COM_STOP_SEC_CONST_16BIT
#include "MemMap.h"

#define COM_START_SEC_CONST_32BIT
#include "MemMap.h"
/* Signal Init Value */
«REM»<%gce32BitsInitValues()%>«ENDREM»
«EXPAND ComStatic::gce32BitsInitValues -»
/* Signal Invalid Values */
«REM»<%gce32BitsInvalidValues()%>«ENDREM»
«EXPAND ComStatic::gce32BitsInvalidValues -»
#define COM_STOP_SEC_CONST_32BIT
#include "MemMap.h"
«ENDDEFINE»



«DEFINE definitionOfConfiguration FOR ARRoot::Com -»
/*****************************************************************************/
/* DEFINITION OF CONFIGURATION                                               */
/*****************************************************************************/
#define COM_START_SEC_CONST_UNSPECIFIED
#include "MemMap.h"
/* Ipdu configuration table */
«REM»
<%if (varGet("RxIPduNumber") > 0){%>
CONST(Com_RxIpduConfigType,COM_CONST) Com_RxIpduConfig[<%varGet("RxIPduNumber")%>] =
{
<%for (Com.gceRxIPduSort()){%>
    /* Ipdu <%gceRxHandleId()%> : <%_shortname%> */
  {<%--
  --%><%self().nPush()%><%varSet("CurrentIndex", i()).empty()%>
    /*ValuePtr*/                    Com_RxIpduValue<%i()%>,
    /*FirstTimeoutFactor*/          <%gceRxIPduFirstTimeoutFactor()%>,
    /*TimeoutFactor*/               <%gceRxIPduTimeoutFactor()%>,
    /*FirstElementInIpduIdx*/       <%gceRxIPduFirstElementInIPduIdx()%>,
    /*NextIpduInGroupIdx*/          <%gceRxIPduNextIpduInGroupIdx()%>,
    /*DeadlineTimerIndex*/          <%gceRxIPduDeadlineTimerIndex()%>,
    /*Length*/                      <%gceIPduLength()%>,
    /*SignalProcessing*/            <%gceRxIPduSignalProcessing()%>,
    /*FirstElementInIpduType*/      <%gceRxIPduFirstElementInIpduType()%>,
    /*Unused*/                      0
  }<%if (i() != (varGet("RxIPduNumber")-1)){%>,<%}%><%nPop()%>
<%}%>
};
<%}%>
«ENDREM»
«IF intVarGet("RxIPduNumber") > 0 -»
CONST(Com_RxIpduConfigType,COM_CONST) Com_RxIpduConfig[«varGet("RxIPduNumber")»] =
{
	«FOREACH gceRxIPduSort() AS ipdu ITERATOR i SEPARATOR ',' -»
  /* Ipdu «ipdu.gceRxHandleId()»: «ipdu.shortName» */
  {

    /*ValuePtr*/                    Com_RxIpduValue«i.counter0»,
    /*FirstTimeoutFactor*/          «ipdu.gceRxIPduFirstTimeoutFactor()»,
    /*TimeoutFactor*/               «ipdu.gceRxIPduTimeoutFactor()»,
    /*FirstElementInIpduIdx*/       «ipdu.gceRxIPduFirstElementInIPduIdx()»,
    /*NextIpduInGroupIdx*/          «ipdu.gceRxIPduNextIpduInGroupIdx()»,
    /*DeadlineTimerIndex*/          «ipdu.gceRxIPduDeadlineTimerIndex()»,
    /*Length*/                      «ipdu.gceIPduLength()»,
    /*SignalProcessing*/            «ipdu.gceRxIPduSignalProcessing()»,
    /*FirstElementInIpduType*/      «ipdu.gceRxIPduFirstElementInIpduType()»,
    /*Unused*/                      0
  }
	«ENDFOREACH -»
};
«ENDIF -»
«REM»
<%if (varGet("TxIPduNumber") > 0){%>
CONST(Com_TxIpduConfigType,COM_CONST) Com_TxIpduConfig[<%varGet("TxIPduNumber")%>] =
{
<%for (Com.gceTxIPdu()){%>
    /* Ipdu TX : <%_shortname%> */
  {<%--
    --%><%self().nPush()%><%varSet("CurrentIndex", i()).empty()%>
    /*ValuePtr*/                    Com_TxIpduValue<%i()%>,
    /*FirstTimeoutFactor*/          <%gceTxIPduFirstTimeoutFactor()%>,
    /*TimeoutFactor*/               <%gceTxIPduTimeoutFactor()%>,
    /*MinimumDelayTimeFactor*/      <%gceTxIPduMinimumDelayTimeFactor()%>,
<%if ((varGet("TxSignalFilterNumber")+varGet("TxGroupSignalFilterNumber")) != 0){%>
    /*TransmissionModeIdx[2]*/
    {
      <%gceTxIPduTransmissionModeFalseIdx()%>,
      <%gceTxIPduTransmissionModeTrueIdx()%>
    },
<%}else{%>
    /*TransmissionModeIdx*/         <%gceTxIPduTransmissionModeTrueIdx()%>,
<%}%>
    /*FirstElementInIpduIdx*/       <%gceTxIPduFirstElementInIpduIdx()%>,
    /*NextIpduInGroupIdx*/          <%gceTxIPduNextIpduInGroupIdx()%>,
    /*TimerIndex[4]*/
    {
      <%gceTxIPduTimerIndexDeadline()%>,
      <%gceTxIPduTimerIndexDirect()%>,
      <%gceTxIPduTimerIndexPeriodic()%>,
      <%gceTxIPduTimerIndexMDT()%>
    },
    /*HandleId*/                    <%gceTxIPduHandleId()%>,
    /*DefaultValue*/                <%gceTxIPduDefaultValue()%>,
    /*Length*/                      <%gceIPduLength()%>,
    /*SignalProcessing*/            <%gceTxIPduSignalProcessing()%>,
    /*TMSalwaysTRUE*/               <%gceTxIPduTMSalwaysTRUE()%>,
    /*FirstElementInIpduType*/      <%gceTxIPduFirstElementInIpduType()%>,
    /*Unused*/                      0
  }<%if (i() != (varGet("TxIPduNumber")-1)){%>,<%}%><%nPop()%>
<%}%>
};
<%}%>
«ENDREM»
«IF varGet("TxIPduNumber") > 0 -»
CONST(Com_TxIpduConfigType,COM_CONST) Com_TxIpduConfig[«varGet("TxIPduNumber")»] =
{
	«FOREACH gceTxIPdu() AS ipdu ITERATOR i SEPARATOR ',' -»
  /* Ipdu TX : «ipdu.shortName» */
  {
    /*ValuePtr*/                    Com_TxIpduValue«i.counter0»,
    /*FirstTimeoutFactor*/          «ipdu.gceTxIPduFirstTimeoutFactor()»,
    /*TimeoutFactor*/               «ipdu.gceTxIPduTimeoutFactor()»,
    /*MinimumDelayTimeFactor*/      «ipdu.gceTxIPduMinimumDelayTimeFactor()»,
		«IF ((intVarGet("TxSignalFilterNumber")+intVarGet("TxGroupSignalFilterNumber")) != 0) -»
    /*TransmissionModeIdx[2]*/
    {
      «ipdu.gceTxIPduTransmissionModeFalseIdx()»,
      «ipdu.gceTxIPduTransmissionModeTrueIdx()»
    },
		«ELSE -»
    /*TransmissionModeIdx*/         «ipdu.gceTxIPduTransmissionModeTrueIdx()»,
		«ENDIF -»
    /*FirstElementInIpduIdx*/       «ipdu.gceTxIPduFirstElementInIpduIdx()»,
    /*NextIpduInGroupIdx*/          «ipdu.gceTxIPduNextIpduInGroupIdx()»,
    /*TimerIndex[4]*/
    {
      «ipdu.gceTxIPduTimerIndexDeadline()»,
      «ipdu.gceTxIPduTimerIndexDirect()»,
      «ipdu.gceTxIPduTimerIndexPeriodic()»,
      «ipdu.gceTxIPduTimerIndexMDT()»
    },
    /*HandleId*/                    «ipdu.gceTxIPduHandleId()»,
    /*DefaultValue*/                «ipdu.gceTxIPduDefaultValue()»,
    /*Length*/                      «ipdu.gceIPduLength()»,
    /*SignalProcessing*/            «ipdu.gceTxIPduSignalProcessing()»,
    /*TMSalwaysTRUE*/               «ipdu.gceTxIPduTMSalwaysTRUE()»,
    /*FirstElementInIpduType*/      «ipdu.gceTxIPduFirstElementInIpduType()»,
    /*Unused*/                      0
  }
	«ENDFOREACH -»
};
«ENDIF -»

«REM»
CONST(Com_IpduGroupConfigType,COM_CONST) Com_IpduGroupConfig[<%varGet("IPduGroupNumber")%>] =
{
<%for (Com.gceIPDuGroupSort()){%>
    /* Ipdu Group <%gceHandleId()%> : <%_shortname%> */
  {<%self().nPush()%><%varSet("CurrentIndex", i()).empty()%>
    /*FirstElementInGroupIdx*/      <%gceIPduGroupFirstElementInGroupIdx()%>,
    /*NextIpduGroupInGroupIdx*/     <%gceIPduGroupNextIpduGroupInGroupIdx()%>,
    /*Direction*/                   <%gceIPduGroupDirection()%>,
    /*ElementType*/                 <%gceIPduGroupElementType()%>,
    /*Unused*/                      0
  }<%if (i() != (varGet("IPduGroupNumber")-1)){%>,<%}%><%nPop()%>
<%}%>
};
«ENDREM»
CONST(Com_IpduGroupConfigType,COM_CONST) Com_IpduGroupConfig[«varGet("IPduGroupNumber")»] =
{
«FOREACH gceIPDuGroupSort() AS ipdu SEPARATOR ',' -»
  /* Ipdu Group «ipdu.gceHandleId()» : «ipdu.shortName» */
  {
    /*FirstElementInGroupIdx*/      «ipdu.gceIPduGroupFirstElementInGroupIdx()»,
    /*NextIpduGroupInGroupIdx*/     «ipdu.gceIPduGroupNextIpduGroupInGroupIdx()»,
    /*Direction*/                   ipdu.gceIPduGroupDirection(),
    /*ElementType*/                 ipdu.gceIPduGroupElementType(),
    /*Unused*/                      0
  }
«ENDFOREACH -»
};
«REM»<%if (varGet("RxSignalNumber") > 0){%><%gceComputeRxSgCfg_Cbks()%>«ENDREM»
«IF intVarGet("RxSignalNumber") > 0»«EXPAND ComStatic::gceComputeRxSgCfg_Cbks -»
«REM»
CONST(Com_RxSignalCfgTimeoutNotificationCbkType, COM_CONST) Com_RxSignalCfgTimeoutNotificationCbk[<%varGet("RxSignalTimeoutNotificationCbkCounter")%>] =
{
<%for (varRange("Counter", 0, varGet("RxSignalTimeoutNotificationCbkCounter")-1)){%>
  <%varGet("RxSignalTimeoutNotificationCbk["+i()*1+"]")%><%if (i() != (varGet("RxSignalTimeoutNotificationCbkCounter")-1)){%>,<%}%>
<%}%>
};
«ENDREM»
CONST(Com_RxSignalCfgTimeoutNotificationCbkType, COM_CONST) Com_RxSignalCfgTimeoutNotificationCbk[«varGet("RxSignalTimeoutNotificationCbkCounter")»] =
{
«FOREACH asListOfInteger(intVarGet("RxSignalTimeoutNotificationCbkCounter")-1) AS int ITERATOR i -»
  «varGet("RxSignalTimeoutNotificationCbk["+i.counter0.toString()+"]")»
«ENDFOREACH»
};
«REM»
CONST(Com_RxSignalCfgInvalidNotificationCbkType, COM_CONST) Com_RxSignalCfgInvalidNotificationCbk[<%varGet("RxSignalInvalidNotificationCbkCounter")%>] =
{
<%for (varRange("Counter", 0, varGet("RxSignalInvalidNotificationCbkCounter")-1)){%>
  <%varGet("RxSignalInvalidNotificationCbk["+i()*1+"]")%><%if (i() != (varGet("RxSignalInvalidNotificationCbkCounter")-1)){%>,<%}%>
<%}%>
};
«ENDREM»
CONST(Com_RxSignalCfgInvalidNotificationCbkType, COM_CONST) Com_RxSignalCfgInvalidNotificationCbk[«varGet("RxSignalInvalidNotificationCbkCounter")»] =
{
«FOREACH asListOfInteger(intVarGet("RxSignalInvalidNotificationCbkCounter")-1) AS int ITERATOR i -»
  «varGet("RxSignalInvalidNotificationCbk["+i.counter0.toString()+"]")»
«ENDFOREACH»
};
«ENDIF»
«REM»
CONST(Com_RxSignalCfgNotificationCbkType, COM_CONST) Com_RxSignalCfgNotificationCbk[<%varGet("RxSignalNotificationCbkCounter")%>] =
{
<%for (varRange("Counter", 0, varGet("RxSignalNotificationCbkCounter")-1)){%>
  <%varGet("RxSignalNotificationCbk["+i()*1+"]")%><%if (i() != (varGet("RxSignalNotificationCbkCounter")-1)){%>,<%}%>
<%}%>
};

CONST(Com_RxSignalConfigType,COM_CONST) Com_RxSignalConfig[<%varGet("RxSignalNumber")%>] =
{
<%for (Com.gceRxSignalSort()){%>
    /* Signal <%gceHandleId()%> : <%_shortname%> (Index : <%i()%>) */
  {<%self().nPush()%><%--
  --%><%varSet("Com_iSignalIndexById["+gceHandleId()+"]", i()).empty()%><%--
  --%><%varSet("Com_iSignalDirectionById["+gceHandleId()+"]", 1).empty()%><%--
  --%><%varSet("Com_iSignalGroupingById["+gceHandleId()+"]", 0).empty()%>
    /*DataInvalidValuePtr*/         <%gceRxSignalDataInvalidValuePtr()%>,
    /*InitValuePtr*/                <%gceSignalInitValuePtr()%>,
    /*OldValuePtr*/                 <%gceSignalOldValuePtr()%>,
    /*FirstTimeoutFactor*/          <%gceRxSignalFirstTimeoutFactor()%>,
    /*TimeoutFactor*/               <%gceRxSignalTimeoutFactor()%>,
    /*NextElementInIpduIdx*/        <%gceRxSignalNextElementInIpduIdx()%>,
    /*DeadlineTimerIndex*/          <%gceRxSignalDeadlineTimerIndex()%>,
    /*RoutingListIndex*/            <%gceRxSignalRoutingListIndex()%>,
    <%gceRxSgCfg_Cbks()%>
    /*IpduIdx*/                     <%gceRxSignalIpduIdx()%>,
<%if (varGet("RxSignalFilterNumber") > 0){%>
    /*FilterIdx*/                   <%gceRxSignalFilterIdx()%>,
<%}%>
    /*UpdateBitPosition*/           <%gceSignalUpdateBitPosition()%>,
    /*BitPosition*/                 <%gceSignalBitPosition()%>,
    /*ByteLength*/                  <%gceSignalByteLength()%>,
    /*DataInvalidAction*/           <%gceRxSignalDataInvalidAction()%>,
    /*BitSize*/                     <%gceSignalBitSize()%>,
    /*Endianness*/                  <%gceSignalEndianness()%>,
    /*RxDataTimeoutAction*/         <%gceRxSignalRxDataTimeoutAction()%>,
    /*NegativeType*/                <%gceSignalNegativeType()%>,
    /*IsGatewayed*/                 <%gceRxSignalIsGatewayed()%>,
    /*IsBytesArray*/                <%gceSignalIsBytesArray()%>,
    /*Unused*/                      0
  }<%if (i() != (varGet("RxSignalNumber")-1)){%>,<%}%><%nPop()%>
<%}%>
};
<%}%>

<%if (varGet("TxSignalNumber") > 0){%><%gceComputeTxSgCfg_Cbks()%>
CONST(Com_TxSignalCfgErrorNotificationCbkType, COM_CONST) Com_TxSignalCfgErrorNotificationCbk[<%varGet("TxSignalErrorNotificationCbkCounter")%>] =
{
<%for (varRange("Counter", 0, varGet("TxSignalErrorNotificationCbkCounter")-1)){%>
  <%varGet("TxSignalErrorNotificationCbk["+i()*1+"]")%><%if (i() != (varGet("TxSignalErrorNotificationCbkCounter")-1)){%>,<%}%>
<%}%>
};

CONST(Com_TxSignalCfgTimeoutNotificationCbkType, COM_CONST) Com_TxSignalCfgTimeoutNotificationCbk[<%varGet("TxSignalTimeoutNotificationCbkCounter")%>] =
{
<%for (varRange("Counter", 0, varGet("TxSignalTimeoutNotificationCbkCounter")-1)){%>
  <%varGet("TxSignalTimeoutNotificationCbk["+i()*1+"]")%><%if (i() != (varGet("TxSignalTimeoutNotificationCbkCounter")-1)){%>,<%}%>
<%}%>
};

CONST(Com_TxSignalCfgNotificationCbkType, COM_CONST) Com_TxSignalCfgNotificationCbk[<%varGet("TxSignalNotificationCbkCounter")%>] =
{
<%for (varRange("Counter", 0, varGet("TxSignalNotificationCbkCounter")-1)){%>
  <%varGet("TxSignalNotificationCbk["+i()*1+"]")%><%if (i() != (varGet("TxSignalNotificationCbkCounter")-1)){%>,<%}%>
<%}%>
};

CONST(Com_TxSignalConfigType,COM_CONST) Com_TxSignalConfig[<%varGet("TxSignalNumber")%>] =
{
<%for (Com.gceTxSignalSort()){%>
    /* Signal <%gceHandleId()%> : <%_shortname%> (Index : <%i()%>) */
  {<%self().nPush()%><%--
  --%><%varSet("Com_iSignalIndexById["+gceHandleId()+"]", i()).empty()%><%--
  --%><%varSet("Com_iSignalDirectionById["+gceHandleId()+"]", 0).empty()%><%--
  --%><%varSet("Com_iSignalGroupingById["+gceHandleId()+"]", 0).empty()%>
    /*DataInvalidValuePtr*/         <%gceTxSignalDataInvalidValuePtr()%>,
    /*InitValuePtr*/                <%gceSignalInitValuePtr()%>,
    /*OldValuePtr*/                 <%gceSignalOldValuePtr()%>,
    /*NextElementInIpduIdx*/        <%gceTxSignalNextElementInIpduIdx()%>,
    <%gceTxSgCfg_Cbks()%>
    /*IpduIdx*/                     <%gceTxSignalIpduIdx()%>,
<%if (varGet("TxSignalFilterNumber") > 0){%>
    /*FilterIdx*/                   <%gceTxSignalFilterIdx()%>,
<%}%>
    /*UpdateBitPosition*/           <%gceSignalUpdateBitPosition()%>,
    /*BitPosition*/                 <%gceSignalBitPosition()%>,
    /*BitSize*/                     <%gceSignalBitSize%>,
    /*ByteLength*/                  <%gceSignalByteLength()%>,
    /*Endianness*/                  <%gceSignalEndianness()%>,
    /*TransferProperty*/            <%gceTxSignalTransferProperty()%>,
    /*NegativeType*/                <%gceSignalNegativeType()%>,
    /*IsBytesArray*/                <%gceSignalIsBytesArray()%>
  }<%if (i() != (varGet("TxSignalNumber")-1)){%>,<%}%><%nPop()%>
<%}%>
};
<%}%>

<%if (varGet("RxSignalGroupNumber") > 0){%><%gceComputeRxSgGrpCfg_Cbks()%>
CONST(Com_RxSignalGroupCfgTimeoutNotificationCbkType, COM_CONST) Com_RxSignalGroupCfgTimeoutNotificationCbk[<%varGet("RxSignalGroupTimeoutNotificationCbkCounter")%>] =
{
<%for (varRange("Counter", 0, varGet("RxSignalGroupTimeoutNotificationCbkCounter")-1)){%>
  <%varGet("RxSignalGroupTimeoutNotificationCbk["+i()*1+"]")%><%if (i() != (varGet("RxSignalGroupTimeoutNotificationCbkCounter")-1)){%>,<%}%>
<%}%>
};

CONST(Com_RxSignalGroupCfgInvalidNotificationCbkType, COM_CONST) Com_RxSignalGroupCfgInvalidNotificationCbk[<%varGet("RxSignalGroupInvalidNotificationCbkCounter")%>] =
{
<%for (varRange("Counter", 0, varGet("RxSignalGroupInvalidNotificationCbkCounter")-1)){%>
  <%varGet("RxSignalGroupInvalidNotificationCbk["+i()*1+"]")%><%if (i() != (varGet("RxSignalGroupInvalidNotificationCbkCounter")-1)){%>,<%}%>
<%}%>
};

CONST(Com_RxSignalGroupCfgNotificationCbkType, COM_CONST) Com_RxSignalGroupCfgNotificationCbk[<%varGet("RxSignalGroupNotificationCbkCounter")%>] =
{
<%for (varRange("Counter", 0, varGet("RxSignalGroupNotificationCbkCounter")-1)){%>
  <%varGet("RxSignalGroupNotificationCbk["+i()*1+"]")%><%if (i() != (varGet("RxSignalGroupNotificationCbkCounter")-1)){%>,<%}%>
<%}%>
};

CONST(Com_RxSignalGroupConfigType,COM_CONST) Com_RxSignalGroupConfig[<%varGet("RxSignalGroupNumber")%>] =
{
<%for (Com.gceRxSignalGroupSort()){%>
    /* Signal Group <%gceHandleId()%> : <%_shortname%> (Index : <%i()%>) */
  {<%self().nPush()%><%varSet("CurrentIndex", i()).empty()%><%--
  --%><%varSet("Com_iSignalGroupIndexById["+gceHandleId()+"]", i()).empty()%><%--
  --%><%varSet("Com_iSignalGroupDirectionById["+gceHandleId()+"]", 1).empty()%>
    /*UpdateBitPosition*/           <%gceSignalGroupUpdateBitPosition()%>,
    /*DataInvalidAction*/           <%gceRxSignalGroupDataInvalidAction()%>,
    /*RxDataTimeoutAction*/         <%gceRxSignalGroupRxDataTimeoutAction()%>,
    /*NextElementInIpduType*/       <%gceRxSignalGroupNextElementInIpduType()%>,
    /*IsGatewayed*/                 <%gceRxSignalGroupIsGatewayed()%>,
    /*FirstTimeoutFactor*/          <%gceRxSignalGroupFirstTimeoutFactor()%>,
    /*TimeoutFactor*/               <%gceRxSignalGroupTimeoutFactor()%>,
    /*NextElementInIpduIdx*/        <%gceRxSignalGroupNextElementInIpduIdx()%>,
    /*DeadlineTimerIndex*/          <%gceRxSignalGroupDeadlineTimerIndex()%>,
    /*RoutingListIndex*/            <%gceRxSignalGroupRoutingListIndex()%>,
    /*FirstSignalInGroupIdx*/       <%gceRxSignalGroupFirstSignalInGroupIdx()%>,
    /*IpduIdx*/                     <%gceRxSignalGroupIpduIdx()%>,
    <%gceRxSgGrCfg_Cbks()%>
  }<%if (i() != (varGet("RxSignalGroupNumber")-1)){%>,<%}%><%nPop()%>
<%}%>
};
<%}%>

<%if (varGet("TxSignalGroupNumber") > 0){%><%gceComputeTxSgGrpCfg_Cbks()%>
CONST(Com_TxSignalGroupCfgErrorNotificationCbkType, COM_CONST) Com_TxSignalGroupCfgErrorNotificationCbk[<%varGet("TxSignalGroupErrorNotificationCbkCounter")%>] =
{
<%for (varRange("Counter", 0, varGet("TxSignalGroupErrorNotificationCbkCounter")-1)){%>
  <%varGet("TxSignalGroupErrorNotificationCbk["+i()*1+"]")%><%if (i() != (varGet("TxSignalGroupErrorNotificationCbkCounter")-1)){%>,<%}%>
<%}%>
};

CONST(Com_TxSignalGroupCfgTimeoutNotificationCbkType, COM_CONST) Com_TxSignalGroupCfgTimeoutNotificationCbk[<%varGet("TxSignalGroupTimeoutNotificationCbkCounter")%>] =
{
<%for (varRange("Counter", 0, varGet("TxSignalGroupTimeoutNotificationCbkCounter")-1)){%>
  <%varGet("TxSignalGroupTimeoutNotificationCbk["+i()*1+"]")%><%if (i() != (varGet("TxSignalGroupTimeoutNotificationCbkCounter")-1)){%>,<%}%>
<%}%>
};

CONST(Com_TxSignalGroupCfgNotificationCbkType, COM_CONST) Com_TxSignalGroupCfgNotificationCbk[<%varGet("TxSignalGroupNotificationCbkCounter")%>] =
{
<%for (varRange("Counter", 0, varGet("TxSignalGroupNotificationCbkCounter")-1)){%>
  <%varGet("TxSignalGroupNotificationCbk["+i()*1+"]")%><%if (i() != (varGet("TxSignalGroupNotificationCbkCounter")-1)){%>,<%}%>
<%}%>
};

CONST(Com_TxSignalGroupConfigType,COM_CONST) Com_TxSignalGroupConfig[<%varGet("TxSignalGroupNumber")%>] =
{
<%for (Com.gceTxSignalGroupSort()){%>
    /* Signal Group <%gceHandleId()%> : <%_shortname%> (Index : <%i()%>) */
  {<%self().nPush()%><%varSet("CurrentIndex", i()).empty()%><%--
  --%><%varSet("Com_iSignalGroupIndexById["+gceHandleId()+"]", i()).empty()%><%--
  --%><%varSet("Com_iSignalGroupDirectionById["+gceHandleId()+"]", 0).empty()%>
    /*UpdateBitPosition*/           <%gceSignalGroupUpdateBitPosition()%>,
    /*TransferProperty*/            <%gceTxSignalGroupTransferProperty()%>,
    /*NextElementInIpduType*/       <%gceTxSignalGroupNextElementInIpduType()%>,
    /*Unused*/                      0,
    /*NextElementInIpduIdx*/        <%gceTxSignalGroupNextElementInIpduIdx()%>,
    /*FirstSignalInGroupIdx*/       <%gceTxSignalGroupFirstSignalInGroupIdx()%>,
    /*IpduIdx*/                     <%gceTxSignalGroupIpduIdx()%>,
    <%gceTxSgGrCfg_Cbks()%>
  }<%if (i() != (varGet("TxSignalGroupNumber")-1)){%>,<%}%><%nPop()%>
<%}%>
};
<%}%>

<%if (varGet("RxGroupSignalNumber") > 0){%>
CONST(Com_RxGroupSignalConfigType,COM_CONST)  Com_RxGroupSignalConfig[<%varGet("RxGroupSignalNumber")%>] =
{
<%for (Com.gceRxGroupSignalSort()){%>
    /* Group Signal <%gceHandleId()%> : <%_shortname%> (Index : <%i()%>) */
  {<%self().nPush()%><%--
  --%><%varSet("Com_iSignalIndexById["+gceHandleId()+"]", i()).empty()%><%--
  --%><%varSet("Com_iSignalDirectionById["+gceHandleId()+"]", 1).empty()%><%--
  --%><%varSet("Com_iSignalGroupingById["+gceHandleId()+"]", 1).empty()%>
    /*InvalidNotificationCallback*/ <%gceRxGroupSignalInvalidNotificationCallback()%>,
    /*DataInvalidValuePtr*/         <%gceRxGroupSignalDataInvalidValuePtr()%>,
    /*InitValuePtr*/                <%gceGroupSignalInitValuePtr()%>,
    /*OldValuePtr*/                 <%gceGroupSignalOldValuePtr()%>,
    /*NextSignalInGroupIdx*/        <%gceRxGroupSignalNextSignalInGroupIdx()%>,
    /*RoutingListIndex*/            <%gceRxGroupSignalRoutingListIndex()%>,
    /*GroupIdx*/                    <%gceRxGroupSignalGroupIdx()%>,
    /*BitPosition*/                 <%gceGroupSignalBitPosition()%>,
    /*ByteLength*/                  <%gceGroupSignalByteLength()%>,
    /*NegativeType*/                <%gceGroupSignalNegativeType()%>,
    /*BitSize*/                     <%gceGroupSignalBitSize()%>,
    /*Endianness*/                  <%gceGroupSignalEndianness()%>,
    /*IsGatewayed*/                 <%gceRxGroupSignalIsGatewayed()%>,
    /*IsBytesArray*/                <%gceGroupSignalIsBytesArray()%>,
    /*Unused*/                      0
  }<%if (i() != (varGet("RxGroupSignalNumber")-1)){%>,<%}%><%nPop()%>
<%}%>
};
<%}%>

<%if (varGet("TxGroupSignalNumber") > 0){%>
CONST(Com_TxGroupSignalConfigType,COM_CONST)  Com_TxGroupSignalConfig[<%varGet("TxGroupSignalNumber")%>] =
{
<%for (Com.gceTxGroupSignalSort()){%>
    /* Group Signal <%gceHandleId()%> : <%_shortname%> (Index : <%i()%>) */
  {<%self().nPush()%><%--
  --%><%varSet("Com_iSignalIndexById["+gceHandleId()+"]", i()).empty()%><%--
  --%><%varSet("Com_iSignalDirectionById["+gceHandleId()+"]", 0).empty()%><%--
  --%><%varSet("Com_iSignalGroupingById["+gceHandleId()+"]", 1).empty()%>
    /*DataInvalidValuePtr*/         <%gceTxGroupSignalDataInvalidValuePtr()%>,
    /*InitValuePtr*/                <%gceGroupSignalInitValuePtr()%>,
    /*OldValuePtr*/                 <%gceGroupSignalOldValuePtr()%>,
    /*NextSignalInGroupIdx*/        <%gceTxGroupSignalNextSignalInGroupIdx()%>,
    /*GroupIdx*/                    <%gceTxGroupSignalGroupIdx()%>,
<%if (varGet("TxGroupSignalFilterNumber") > 0){%>
    /*FilterIdx*/                   <%gceTxGroupSignalFilterIdx()%>,
<%}%>
    /*BitPosition*/                 <%gceGroupSignalBitPosition()%>,
    /*ByteLength*/                  <%gceGroupSignalByteLength()%>,
    /*NegativeType*/                <%gceGroupSignalNegativeType()%>,
    /*BitSize*/                     <%gceGroupSignalBitSize()%>,
    /*Endianness*/                  <%gceGroupSignalEndianness()%>,
    /*IsBytesArray*/                <%gceGroupSignalIsBytesArray()%>,
    /*Unused*/                      0
  }<%if (i() != (varGet("TxGroupSignalNumber")-1)){%>,<%}%><%nPop()%>
<%}%>
};
<%}%>


<%if (varGet("FilterNumber") > 0){%>
CONST(Com_FilterType,COM_CONST) Com_FilterConfig[<%varGet("FilterNumber")%>] =
{
<%for (Com.gceFilter()){%>
    /* Signal : <%_parent._shortname%> (Index : <%i()%>) */
  {<%self().nPush()%>
    <%getRootContainer().gceDisplayFilter%>
  <%nPop()%>}<%if (i() != (varGet("FilterNumber")-1)){%>,<%}%>
<%}%>
};
<%}%>

<%if (varGet("SignalRouteNumber") > 0){%>
CONST(Com_SignalRouteType,COM_CONST) Com_SignalRoute[<%varGet("SignalRouteNumber")%>] =
{
<%for (Com.gceSignalRoute()){%>
  {<%self().nPush()%>
    /*SourceIdx*/ <%gceSignalSourceIdx()%>,
    /*DestIdx*/   <%gceSignalDestIdx()%>
  }<%if (i() != (varGet("SignalRouteNumber")-1)){%>,<%}%><%--
--%><%nPop()%>
<%}%>
};
<%}%>
<%if (varGet("SignalGroupRouteNumber") > 0){%>
CONST(Com_SignalGroupRouteType,COM_CONST) Com_SignalGroupRoute[<%varGet("SignalGroupRouteNumber")%>] =
{
<%for (Com.gceSignalGroupRoute()){%>
  {<%self().nPush()%>
    /*SourceIdx*/ <%gceSignalGroupSourceIdx()%>,
    /*DestIdx*/   <%gceSignalGroupDestIdx()%>
  }<%if (i() != (varGet("SignalGroupRouteNumber")-1)){%>,<%}%><%--
--%><%nPop()%>
<%}%>
};
<%}%>
<%if (varGet("GroupSignalRouteNumber") > 0){%>
CONST(Com_GroupSignalRouteType,COM_CONST) Com_GroupSignalRoute[<%varGet("GroupSignalRouteNumber")%>] =
{
<%for (Com.gceGroupSignalRoute()){%>
  {<%self().nPush()%>
    /*SourceIdx*/ <%gceGroupSignalSourceIdx()%>,
    /*DestIdx*/   <%gceGroupSignalDestIdx()%>
  }<%if (i() != (varGet("GroupSignalRouteNumber")-1)){%>,<%}%><%--
--%><%nPop()%>
<%}%>
};
<%}%>

<%if (varGet("TMnumber") > 0){%>
CONST(Com_TransmissionModeType,COM_CONST) Com_TransmissionMode[<%varGet("TMnumber")%>] =
{
<%Com.gceTMmodeDisplay()%>
};
<%}%>

CONST(Com_AllSignalIndexType, COM_CONST) Com_iSignalIndexById[<%varGet("AllSignalNumber")%>] =
{
<%for (varRange("SignalId", 0, varGet("AllSignalNumber").adapt("int")-1)){%>
  <%varGet("Com_iSignalIndexById["+i()+"]")%><%--
--%><%if (i() != (varGet("AllSignalNumber")-1)){%>,<%}%>
<%}%>
};
<%if (varGet("AllSignalGroupNumber") > 0){%>
CONST(Com_SignalGroupIndexType, COM_CONST) Com_iSignalGroupIndexById[<%varGet("AllSignalGroupNumber")%>] =
{
<%for (varRange("SignalId", 0, varGet("AllSignalGroupNumber").adapt("int")-1)){%>
  <%varGet("Com_iSignalGroupIndexById["+i()+"]")%><%--
--%><%if (i() != (varGet("AllSignalGroupNumber")-1)){%>,<%}%>
<%}%>
};
<%}%>

<%if (varGet("RxIPduNumber") > 0){%>
CONST(Com_IpduCalloutTableType, COM_CONST) Com_RxIpduCalloutTable[<%varGet("RxIPduNumber")%>] =
{
<%for (Com.gceRxIPduSort()){%>
    <%if (ComIPduCallout.isConfig()){%><%--
    --%><%ComIPduCallout.value%><%--
--%><%}else{%><%--
    --%>NULL_PTR<%--
--%><%}%><%--
--%><%if (i() != (varGet("RxIPduNumber")-1)){%>,<%}%>
<%}%>
};
<%}%>
<%if (varGet("TxIPduNumber") > 0){%>
CONST(Com_IpduCalloutTableType, COM_CONST) Com_TxIpduCalloutTable[<%varGet("TxIPduNumber")%>] =
{
<%for (Com.gceTxIPdu){%>
    <%if (ComIPduCallout.isConfig()){%><%--
    --%><%ComIPduCallout.value%><%--
--%><%}else{%><%--
    --%>NULL_PTR<%--
--%><%}%><%--
--%><%if (i() != (varGet("TxIPduNumber")-1)){%>,<%}%>
<%}%>
};
<%}%>
#define COM_STOP_SEC_CONST_UNSPECIFIED
#include "MemMap.h"

<%if (Com.ComGeneral.ComConfigurationUseDet.isTrue){%>
#define COM_START_SEC_CONST_8BIT
#include "MemMap.h"
CONST(uint8, COM_CONST) Com_iSignalDirectionById[<%(varGet("AllSignalNumber")/8)+1%>] =
{<%varSet("Multiplicator", 1).empty()%><%--
--%><%varSet("Temp", 0).empty()%>
<%for (varRange("SignalId", 0, varGet("AllSignalNumber").adapt("int")-1)){%><%--
--%><%varAdd("Temp", (varGet("Com_iSignalDirectionById["+i()+"]")*varGet("Multiplicator"))).empty()%><%--
--%><%varSet("Multiplicator", varGet("Multiplicator")*2).empty()%><%--
--%><%if ((varGet("Multiplicator") > 255) || (i() == (varGet("AllSignalNumber").adapt("int")-1))){%><%--
  --%><%varSet("Multiplicator", 1).empty()%><%--
  --%>  <%varGet("Temp")%><%if (i() != (varGet("AllSignalNumber").adapt("int")-1)){%>,<%}%>
<%--
  --%><%varSet("Temp", 0).empty()%><%--
--%><%}%><%--
--%><%}%>
};
<%if ((varGet("AllSignalGroupNumber") > 0) && (varGet("MaxSingleSignalIndex") > 0)){%>
CONST(uint8, COM_CONST) Com_iSignalGroupingById[<%(varGet("AllSignalNumber")/8)+1%>] =
{<%varSet("Multiplicator", 1).empty()%><%--
--%><%varSet("Temp", 0).empty()%>
<%for (varRange("SignalId", 0, varGet("AllSignalNumber").adapt("int")-1)){%><%--
--%><%varAdd("Temp", (varGet("Com_iSignalGroupingById["+i()+"]")*varGet("Multiplicator"))).empty()%><%--
--%><%varSet("Multiplicator", varGet("Multiplicator")*2).empty()%><%--
--%><%if ((varGet("Multiplicator") > 255) || (i() == (varGet("AllSignalNumber").adapt("int")-1))){%><%--
  --%><%varSet("Multiplicator", 1).empty()%><%--
  --%>  <%varGet("Temp")%><%if (i() != (varGet("AllSignalNumber").adapt("int")-1)){%>,<%}%>
<%--
  --%><%varSet("Temp", 0).empty()%><%--
--%><%}%><%--
--%><%}%>
};
<%}%>
<%if (varGet("AllSignalGroupNumber") > 0){%>
CONST(uint8, COM_CONST) Com_iSignalGroupDirectionById[<%(varGet("AllSignalGroupNumber")/8)+1%>] =
{<%varSet("Multiplicator", 1).empty()%><%--
--%><%varSet("Temp", 0).empty()%>
<%for (varRange("SignalId", 0, varGet("AllSignalGroupNumber").adapt("int")-1)){%><%--
--%><%varAdd("Temp", (varGet("Com_iSignalGroupDirectionById["+i()+"]")*varGet("Multiplicator"))).empty()%><%--
--%><%varSet("Multiplicator", varGet("Multiplicator")*2).empty()%><%--
--%><%if ((varGet("Multiplicator") > 255) || (i() == (varGet("AllSignalGroupNumber")-1))){%><%--
  --%><%varSet("Multiplicator", 1).empty()%><%--
  --%>  <%varGet("Temp")%><%if (i() != (varGet("AllSignalGroupNumber")-1)){%>,<%}%>
<%--
  --%><%varSet("Temp", 0).empty()%><%--
--%><%}%><%--
--%><%}%>
};
<%}%>
#define COM_STOP_SEC_CONST_8BIT
#include "MemMap.h"
<%}%>
«ENDREM»
«ENDDEFINE»



«DEFINE declarationOfConfigurationRamInfos FOR ARRoot::Com»
«REM»
/*****************************************************************************/
/* DECLARATION OF CONFIGURATION DEPENDENT RAM INFOS                          */
/*****************************************************************************/
#define COM_START_SEC_VAR_NOINIT_UNSPECIFIED
#include "MemMap.h"
<%if (varGet("RxIPduNumber") > 0){%>
VAR(Com_RxIpduInfoType, COM_VAR_NOINIT)         Com_RxIpduInfo[<%varGet("RxIPduNumber")%>];
<%}%>
<%if (varGet("TxIPduNumber") > 0){%>
VAR(Com_TxIpduInfoType, COM_VAR_NOINIT)         Com_TxIpduInfo[<%varGet("TxIPduNumber")%>];
<%}%>
#define COM_STOP_SEC_VAR_NOINIT_UNSPECIFIED
#include "MemMap.h"

<%if (varGet("AllFilterOccNumber") > 0){%>
#define COM_START_SEC_VAR_NOINIT_<%varGet("MaxFilterOccurenceValueBits")%>BIT
#include "MemMap.h"
VAR(uint<%varGet("MaxFilterOccurenceValueBits")%>, COM_VAR_NOINIT) Com_iFilterOccurence[<%varGet("AllFilterOccNumber")%>];
#define COM_STOP_SEC_VAR_NOINIT_<%varGet("MaxFilterOccurenceValueBits")%>BIT
#include "MemMap.h"
<%}%>

#define COM_START_SEC_VAR_NOINIT_<%varGet("MaxIpduIndexBits")%>BIT
#include "MemMap.h"
<%if (varGet("RxIPduNumber") > 0){%>
VAR(uint<%varGet("MaxIpduIndexBits")%>, COM_VAR_NOINIT) Com_iRxIpduNextReceivedIdx[<%varGet("RxIPduNumber")%>];
<%}%>
<%if (varGet("TxIPduNumber") > 0){%>
VAR(uint<%varGet("MaxIpduIndexBits")%>, COM_VAR_NOINIT) Com_iTxIpduNextConfirmIpduIdx[<%varGet("TxIPduNumber")%>];
<%}%>
#define COM_STOP_SEC_VAR_NOINIT_<%varGet("MaxIpduIndexBits")%>BIT
#include "MemMap.h"

#define COM_START_SEC_VAR_NOINIT_8BIT
#include "MemMap.h"
<%if (varGet("TxSignalFilterNumber") > 0){%>
VAR(uint8, COM_VAR_NOINIT) Com_iTxSgFilterResult[<%((varGet("TxSignalNumber")-1)/8)+1%>];
<%}%>
<%if (varGet("TxGroupSignalFilterNumber") > 0){%>
VAR(uint8, COM_VAR_NOINIT) Com_iTxGrSgFilterResult[<%((varGet("TxGroupSignalNumber")-1)/8)+1%>];
<%}%>
<%if (varGet("RxSignalNumber") > 0){%>
VAR(uint8, COM_VAR_NOINIT) Com_iCurrentRxSgValuePtrIsInit[<%((varGet("RxSignalNumber")-1)/8)+1%>];
<%}%>
<%if (varGet("RxGroupSignalNumber") > 0){%>
VAR(uint8, COM_VAR_NOINIT) Com_iCurrentRxGrSgValuePtrIsInit[<%((varGet("RxGroupSignalNumber")-1)/8)+1%>];
<%}%>
#define COM_STOP_SEC_VAR_NOINIT_8BIT
#include "MemMap.h"

<%if (varGet("RxIPduDeadlineNumber") > 0){%>
/* Rx IPdu deadline monitoring */
#define COM_START_SEC_VAR_NOINIT_<%varGet("MaxRxIPduDeadlineTimerBits")%>BIT
#include "MemMap.h"
VAR(uint<%varGet("MaxRxIPduDeadlineTimerBits")%>, COM_VAR_NOINIT) Com_iRxIPduDeadlineTimer[<%varGet("RxIPduDeadlineNumber")%>];
#define COM_STOP_SEC_VAR_NOINIT_<%varGet("MaxRxIPduDeadlineTimerBits")%>BIT
#include "MemMap.h"
#define COM_START_SEC_VAR_NOINIT_<%varGet("MaxIpduIndexBits")%>BIT
#include "MemMap.h"
VAR(uint<%varGet("MaxIpduIndexBits")%>, COM_VAR_NOINIT) Com_iRxIPduDeadlineNextIdx[<%varGet("RxIPduDeadlineNumber")%>];
VAR(uint<%varGet("MaxIpduIndexBits")%>, COM_VAR_NOINIT) Com_iRxIPduDeadlinePreviousIdx[<%varGet("RxIPduDeadlineNumber")%>];
#define COM_STOP_SEC_VAR_NOINIT_<%varGet("MaxIpduIndexBits")%>BIT
#include "MemMap.h"
#define COM_START_SEC_CONST_UNSPECIFIED
#include "MemMap.h"
CONST(Com_IPduIndexType, COM_CONST)	Com_iRxIPduDeadlineNumber = <%varGet("RxIPduDeadlineNumber")%>;
#define COM_STOP_SEC_CONST_UNSPECIFIED
#include "MemMap.h"
<%}%>
<%if (varGet("TxIPduDeadlineNumber") > 0){%>
/* Tx IPdu deadline monitoring */
#define COM_START_SEC_VAR_NOINIT_<%varGet("MaxTxIPduDeadlineTimerBits")%>BIT
#include "MemMap.h"
VAR(uint<%varGet("MaxTxIPduDeadlineTimerBits")%>, COM_VAR_NOINIT) Com_iTxIPduDeadlineTimer[<%varGet("TxIPduDeadlineNumber")%>];
#define COM_STOP_SEC_VAR_NOINIT_<%varGet("MaxTxIPduDeadlineTimerBits")%>BIT
#include "MemMap.h"
#define COM_START_SEC_VAR_NOINIT_<%varGet("MaxIpduIndexBits")%>BIT
#include "MemMap.h"
VAR(uint<%varGet("MaxIpduIndexBits")%>, COM_VAR_NOINIT) Com_iTxIPduDeadlineNextIdx[<%varGet("TxIPduDeadlineNumber")%>];
#define COM_STOP_SEC_VAR_NOINIT_<%varGet("MaxIpduIndexBits")%>BIT
#include "MemMap.h"
#define COM_START_SEC_CONST_UNSPECIFIED
#include "MemMap.h"
CONST(Com_IPduIndexType, COM_CONST)	Com_iTxIPduDeadlineNumber = <%varGet("TxIPduDeadlineNumber")%>;
#define COM_STOP_SEC_CONST_UNSPECIFIED
#include "MemMap.h"
<%}%>
<%if (varGet("TxIPduDirectTimerNumber") > 0){%>
/* Tx IPdu direct transmission monitoring */
#define COM_START_SEC_VAR_NOINIT_<%varGet("MaxTxIPduDirectTimerBits")%>BIT
#include "MemMap.h"
VAR(uint<%varGet("MaxTxIPduDirectTimerBits")%>, COM_VAR_NOINIT) Com_iTxIPduDirectTimer[<%varGet("TxIPduDirectTimerNumber")%>];
#define COM_STOP_SEC_VAR_NOINIT_<%varGet("MaxTxIPduDirectTimerBits")%>BIT
#include "MemMap.h"
#define COM_START_SEC_VAR_NOINIT_8BIT
#include "MemMap.h"
VAR(uint8, COM_VAR_NOINIT) Com_iTxIPduRepetNumber[<%varGet("TxIPduDirectTimerNumber")%>];
#define COM_STOP_SEC_VAR_NOINIT_8BIT
#include "MemMap.h"
#define COM_START_SEC_VAR_NOINIT_<%varGet("MaxIpduIndexBits")%>BIT
#include "MemMap.h"
VAR(uint<%varGet("MaxIpduIndexBits")%>, COM_VAR_NOINIT) Com_iTxIPduDirectNextIdx[<%varGet("TxIPduDirectTimerNumber")%>];
#define COM_STOP_SEC_VAR_NOINIT_<%varGet("MaxIpduIndexBits")%>BIT
#include "MemMap.h"
#define COM_START_SEC_CONST_UNSPECIFIED
#include "MemMap.h"
CONST(Com_IPduIndexType, COM_CONST)	Com_iTxIPduDirectTimerNumber = <%varGet("TxIPduDirectTimerNumber")%>;
#define COM_STOP_SEC_CONST_UNSPECIFIED
#include "MemMap.h"
<%}%>
<%if (varGet("TxIPduNumber") > 0){%>
#define COM_START_SEC_VAR_NOINIT_8BIT
#include "MemMap.h"
VAR(uint8, COM_VAR_NOINIT) Com_iTxIPduTransmitCycle[<%((varGet("TxIPduNumber")-1)/8)+1%>];
#define COM_STOP_SEC_VAR_NOINIT_8BIT
#include "MemMap.h"
<%}%>
<%if (varGet("TxIPduPeriodicTimerNumber") > 0){%>
/* Tx IPdu periodic transmission monitoring */
#define COM_START_SEC_VAR_NOINIT_<%varGet("MaxTxIPduPeriodicTimerBits")%>BIT
#include "MemMap.h"
VAR(uint<%varGet("MaxTxIPduPeriodicTimerBits")%>, COM_VAR_NOINIT) Com_iTxIPduPeriodicTimer[<%varGet("TxIPduPeriodicTimerNumber")%>];
#define COM_STOP_SEC_VAR_NOINIT_<%varGet("MaxTxIPduPeriodicTimerBits")%>BIT
#include "MemMap.h"
#define COM_START_SEC_VAR_NOINIT_<%varGet("MaxIpduIndexBits")%>BIT
#include "MemMap.h"
VAR(uint<%varGet("MaxIpduIndexBits")%>, COM_VAR_NOINIT) Com_iTxIPduPeriodicNextIdx[<%varGet("TxIPduPeriodicTimerNumber")%>];
#define COM_STOP_SEC_VAR_NOINIT_<%varGet("MaxIpduIndexBits")%>BIT
#include "MemMap.h"
#define COM_START_SEC_CONST_UNSPECIFIED
#include "MemMap.h"
CONST(Com_IPduIndexType, COM_CONST)	Com_iTxIPduPeriodicTimerNumber = <%varGet("TxIPduPeriodicTimerNumber")%>;
#define COM_STOP_SEC_CONST_UNSPECIFIED
#include "MemMap.h"
<%}%>
<%if (varGet("TxIPduMDTimerNumber") > 0){%>
/* Tx IPdu MDT monitoring */
#define COM_START_SEC_VAR_NOINIT_<%varGet("MaxTxIPduMDTimerBits")%>BIT
#include "MemMap.h"
VAR(uint<%varGet("MaxTxIPduMDTimerBits")%>, COM_VAR_NOINIT) Com_iTxIPduMDTimer[<%varGet("TxIPduMDTimerNumber")%>];
#define COM_STOP_SEC_VAR_NOINIT_<%varGet("MaxTxIPduMDTimerBits")%>BIT
#include "MemMap.h"
#define COM_START_SEC_VAR_NOINIT_<%varGet("MaxIpduIndexBits")%>BIT
#include "MemMap.h"
VAR(uint<%varGet("MaxIpduIndexBits")%>, COM_VAR_NOINIT) Com_iTxIPduMDTNextIdx[<%varGet("TxIPduMDTimerNumber")%>];
#define COM_STOP_SEC_VAR_NOINIT_<%varGet("MaxIpduIndexBits")%>BIT
#include "MemMap.h"
#define COM_START_SEC_CONST_UNSPECIFIED
#include "MemMap.h"
CONST(Com_IPduIndexType, COM_CONST)	Com_iTxIPduMDTimerNumber = <%varGet("TxIPduMDTimerNumber")%>;
#define COM_STOP_SEC_CONST_UNSPECIFIED
#include "MemMap.h"
<%}%>
<%if (varGet("RxSgDeadlineNumber") > 0){%>
/* Signal deadline monitoring */
#define COM_START_SEC_VAR_NOINIT_<%varGet("MaxRxSgDeadlineTimerBits")%>BIT
#include "MemMap.h"
VAR(uint<%varGet("MaxRxSgDeadlineTimerBits")%>, COM_VAR_NOINIT) Com_iRxSgDeadlineTimer[<%varGet("RxSgDeadlineNumber")%>];
#define COM_STOP_SEC_VAR_NOINIT_<%varGet("MaxRxSgDeadlineTimerBits")%>BIT
#include "MemMap.h"
#define COM_START_SEC_VAR_NOINIT_<%varGet("MaxSingleSignalIndexBits")%>BIT
#include "MemMap.h"
VAR(uint<%varGet("MaxSingleSignalIndexBits")%>, COM_VAR_NOINIT) Com_iRxSgDeadlineNextIdx[<%varGet("RxSgDeadlineNumber")%>];
VAR(uint<%varGet("MaxSingleSignalIndexBits")%>, COM_VAR_NOINIT) Com_iRxSgDeadlinePreviousIdx[<%varGet("RxSgDeadlineNumber")%>];
#define COM_STOP_SEC_VAR_NOINIT_<%varGet("MaxSingleSignalIndexBits")%>BIT
#include "MemMap.h"
#define COM_START_SEC_CONST_UNSPECIFIED
#include "MemMap.h"
CONST(Com_SingleSignalIndexType, COM_CONST)	Com_iRxSgDeadlineNumber = <%varGet("RxSgDeadlineNumber")%>;
#define COM_STOP_SEC_CONST_UNSPECIFIED
#include "MemMap.h"
<%}%>
<%if (varGet("RxSgGrDeadlineNumber") > 0){%>
/* Signal Group deadline monitoring */
#define COM_START_SEC_VAR_NOINIT_<%varGet("MaxRxSgGrDeadlineTimerBits")%>BIT
#include "MemMap.h"
VAR(uint<%varGet("MaxRxSgGrDeadlineTimerBits")%>, COM_VAR_NOINIT) Com_iRxSgGrDeadlineTimer[<%varGet("RxSgGrDeadlineNumber")%>];
#define COM_STOP_SEC_VAR_NOINIT_<%varGet("MaxRxSgGrDeadlineTimerBits")%>BIT
#include "MemMap.h"
#define COM_START_SEC_VAR_NOINIT_<%varGet("MaxSignalGroupIndexBits")%>BIT
#include "MemMap.h"
VAR(uint<%varGet("MaxSignalGroupIndexBits")%>, COM_VAR_NOINIT) Com_iRxSgGrDeadlineNextIdx[<%varGet("RxSgGrDeadlineNumber")%>];
VAR(uint<%varGet("MaxSignalGroupIndexBits")%>, COM_VAR_NOINIT) Com_iRxSgGrDeadlinePreviousIdx[<%varGet("RxSgGrDeadlineNumber")%>];
#define COM_STOP_SEC_VAR_NOINIT_<%varGet("MaxSignalGroupIndexBits")%>BIT
#include "MemMap.h"
#define COM_START_SEC_CONST_UNSPECIFIED
#include "MemMap.h"
CONST(Com_SignalGroupIndexType, COM_CONST)	Com_iRxSgGrDeadlineNumber = <%varGet("RxSgGrDeadlineNumber")%>;
#define COM_STOP_SEC_CONST_UNSPECIFIED
#include "MemMap.h"
<%}%>

/* Routing Lists */
<%if (varGet("RxSgRoutingListIdxNumber") > 0){%>
#define COM_START_SEC_VAR_NOINIT_<%varGet("MaxSingleSignalIndexBits")%>BIT
#include "MemMap.h"
VAR(uint<%varGet("MaxSingleSignalIndexBits")%>, COM_VAR_NOINIT) Com_iRxSgNextRoutingIdx[<%varGet("RxSgRoutingListIdxNumber")%>];
#define COM_STOP_SEC_VAR_NOINIT_<%varGet("MaxSingleSignalIndexBits")%>BIT
#include "MemMap.h"
#define COM_START_SEC_CONST_UNSPECIFIED
#include "MemMap.h"
CONST(Com_SingleSignalIndexType, COM_CONST)	Com_iRxSgRoutingListIdxNumber = <%varGet("RxSgRoutingListIdxNumber")%>;
#define COM_STOP_SEC_CONST_UNSPECIFIED
#include "MemMap.h"
<%}%>
<%if (varGet("RxSgGrRoutingListIdxNumber") > 0){%>
#define COM_START_SEC_VAR_NOINIT_<%varGet("MaxSignalGroupIndexBits")%>BIT
#include "MemMap.h"
VAR(uint<%varGet("MaxSignalGroupIndexBits")%>, COM_VAR_NOINIT) Com_iRxSgGrNextRoutingIdx[<%varGet("RxSgGrRoutingListIdxNumber")%>];
#define COM_STOP_SEC_VAR_NOINIT_<%varGet("MaxSignalGroupIndexBits")%>BIT
#include "MemMap.h"
#define COM_START_SEC_CONST_UNSPECIFIED
#include "MemMap.h"
CONST(Com_SignalGroupIndexType, COM_CONST)	Com_iRxSgGrRoutingListIdxNumber = <%varGet("RxSgGrRoutingListIdxNumber")%>;
#define COM_STOP_SEC_CONST_UNSPECIFIED
#include "MemMap.h"
<%}%>
<%if (varGet("RxGrSgRoutingListIdxNumber") > 0){%>
#define COM_START_SEC_VAR_NOINIT_<%varGet("MaxGroupSignalIndexBits")%>BIT
#include "MemMap.h"
VAR(uint<%varGet("MaxGroupSignalIndexBits")%>, COM_VAR_NOINIT) Com_iRxGrSgNextRoutingIdx[<%varGet("RxGrSgRoutingListIdxNumber")%>];
#define COM_STOP_SEC_VAR_NOINIT_<%varGet("MaxGroupSignalIndexBits")%>BIT
#include "MemMap.h"
#define COM_START_SEC_CONST_UNSPECIFIED
#include "MemMap.h"
CONST(Com_GroupSignalIndexType, COM_CONST)	Com_iRxGrSgRoutingListIdxNumber = <%varGet("RxGrSgRoutingListIdxNumber")%>;
#define COM_STOP_SEC_CONST_UNSPECIFIED
#include "MemMap.h"
<%}%>
«ENDREM»
«ENDDEFINE»

